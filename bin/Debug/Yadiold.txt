
--<Version = 1.0.0.0>


SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON


IF not EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'DBVersionLog')
begin
CREATE TABLE dbo.DBVersionLog
	(
	ScriptNo numeric(18, 0) NOT NULL,
	ScriptDescription text NOT NULL,
	ExecutedOn datetime NULL
	)  ON [PRIMARY]
	 TEXTIMAGE_ON [PRIMARY]

ALTER TABLE dbo.DBVersionLog ADD CONSTRAINT
	DF_DBVersionLog_ExecutedOn DEFAULT getDate() FOR ExecutedOn

ALTER TABLE dbo.DBVersionLog ADD CONSTRAINT
	PK_DBVersionLog PRIMARY KEY CLUSTERED 
	(
	ScriptNo
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

end

<BREAK>

INSERT INTO [MSettings]
           ([PkSettingNo]
           ,[SettingKeyCode]
           ,[SettingTypeNo]
           ,[SettingValue]
           ,[SettingDescription])
     VALUES
           (369
           ,'S_IsPartyWiseDisc'
           ,1
           ,'False'
           ,NULL);

<BREAK>

SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON

ALTER TABLE dbo.MLedgerDetails ADD
	CreditDays numeric(18, 0) NULL 

<BREAK>

UPDATE MLedgerDetails SET CreditDays = 0 where CreditDays is null

<BREAK>

INSERT INTO [DBVersionLog]
           ([ScriptNo]
           ,[ScriptDescription])
     VALUES
           (1
           ,'001_added_customerwise_discount.sql file execute')

<BREAK>

IF NOT EXISTS(select ScriptNo from DBVersionLog where ScriptNo = 2)
BEGIN
UPDATE MSetting SET AppVersion = 'rKNKsixM4yg=';
INSERT INTO [DBVersionLog]
           ([ScriptNo]
           ,[ScriptDescription])
     VALUES
           (2
           ,'Updated application version to 1.0.1.0')
END

<BREAK>

INSERT INTO [MSettings]([PkSettingNo],[SettingKeyCode],[SettingTypeNo],[SettingValue],[SettingDescription])
     VALUES(370,'S_IsSMSSend',1,'False',NULL);

INSERT INTO [MSettings]([PkSettingNo],[SettingKeyCode],[SettingTypeNo],[SettingValue],[SettingDescription])
     VALUES(371,'S_IsEmailSend',1,'False',NULL);

INSERT INTO [MSettings]([PkSettingNo],[SettingKeyCode],[SettingTypeNo],[SettingValue],[SettingDescription])
     VALUES(372,'S_IsAutoSMSSend',1,'False',NULL);

INSERT INTO [MSettings]([PkSettingNo],[SettingKeyCode],[SettingTypeNo],[SettingValue],[SettingDescription])
     VALUES(373,'S_IsAutoEmailSend',1,'False',NULL);

<BREAK>

SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON


ALTER TABLE dbo.MItemMaster ADD
	ContainerCharges  numeric(18,2) NULL

<BREAK>

UPDATE dbo.MItemMaster SET ContainerCharges = 0 where ContainerCharges is null

<BREAK>

SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON

ALTER TABLE dbo.MRateSetting ADD
	Weight1  numeric(18,2) NULL,
    Weight2  numeric(18,2) NULL

<BREAK>

UPDATE dbo.MRateSetting SET Weight1 = 0,Weight2 = 0 where Weight1 is null and Weight2 is null


<BREAK>

SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON

ALTER TABLE dbo.MLedger ADD
	IsSendEmail bit NULL

<BREAK>

UPDATE dbo.MLedger SET IsSendEmail = 'False' where IsSendEmail is null

<BREAK>

ALTER TABLE dbo.MRateSetting ADD
	SPPerc numeric(18, 2) NULL
ALTER TABLE dbo.MRateSetting ADD
	LPPerc numeric(18, 2) NULL

<BREAK>

update MRateSetting set LPPerc=0.0,SPPerc=0.0 where LPPerc is null and SPPerc is null

<BREAK>
set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON

Create PROCEDURE [dbo].[AddMRack]
     @RackNo                              numeric(18),
     @RackName                            varchar(50),
     @RackCode                            varchar(50),
     @IsActive                            bit,
     @UserID                              numeric(18),
     @UserDate                            datetime,
	 @CompanyNo							  numeric(18)

AS
IF EXISTS(select RackNo from MRack
          where
          RackNo = @RackNo)
     BEGIN
       --Update existing row
       UPDATE MRack
       SET
          RackName = @RackName,
          RackCode = @RackCode,
          IsActive = @IsActive,
          UserID = @UserID,
          UserDate = @UserDate,
	      CompanyNo=@CompanyNo

       WHERE
          RackNo = @RackNo

     END
ELSE
     BEGIN
       --Insert new row
       Declare @Id numeric
       SELECT @Id=IsNull(Max(RackNo),0) From MRack
       DBCC CHECKIDENT('MRack', RESEED, @Id)
       INSERT INTO MRack(
          RackName,
          RackCode,
          IsActive,
          UserID,
          UserDate,
		  CompanyNo
)
       VALUES(
          @RackName,
          @RackCode,
          @IsActive,
          @UserID,
          @UserDate,
	      @CompanyNo
)

END

<BREAK>

Create PROCEDURE [dbo].[AddMRackDetails]
     @RackDetailsNo                       numeric(18),
     @UOMLNo                              numeric(18, 0),
     @FkRackNo                            numeric(18, 0),
     @ItemNo                              numeric(18, 0),
     @ToQty                               numeric(18, 2) ,
     @IsActive                            bit,
     @UserID                              numeric(18),
     @UserDate                            datetime

AS
IF EXISTS(select RackDetailsNo from MRackDetails
          where
          RackDetailsNo = @RackDetailsNo)
     BEGIN
       --Update existing row
       UPDATE MRackDetails
       SET
          UOMLNo=@UOMLNo,
	      FkRackNo=@FkRackNo,
          ItemNo=@ItemNo,
          ToQty=@ToQty, 
          IsActive = @IsActive,
          UserID = @UserID,
          UserDate = @UserDate

       WHERE
          RackDetailsNo = @RackDetailsNo

     END
ELSE
     BEGIN
       --Insert new row
       Declare @Id numeric
       SELECT @Id=IsNull(Max(RackDetailsNo),0) From MRackDetails
       DBCC CHECKIDENT('MRackDetails', RESEED, @Id)
       INSERT INTO MRackDetails(

          UOMLNo,
	      FkRackNo,
          ItemNo,
          ToQty, 
          IsActive,
          UserID,
          UserDate
)
       VALUES(

          @UOMLNo,
	      @FkRackNo,
          @ItemNo,
          @ToQty, 
          @IsActive,
          @UserID,
          @UserDate
)

END

<BREAK>

Create PROCEDURE [dbo].[AddMLedgerGroup]
     @LedgerGroupNo                       numeric(18),
     @LedgerName                          varchar(250),
	 @LedgerLangName					  nvarchar(500),
     @GroupNo                             numeric(18),
	 @IsActive                            bit,
	 @UserID                              numeric(18),
     @UserDate                            datetime,
	 @CompanyNo                           numeric(18),
     @ReturnID							  int output
AS
IF EXISTS(select LedgerGroupNo from MLedgerGroup
          where
          LedgerGroupNo = @LedgerGroupNo)
     BEGIN
       --Update existing row
       UPDATE MLedgerGroup
       SET
          LedgerName = @LedgerName,
          LedgerLangName=@LedgerLangName,
          GroupNo = @GroupNo,
		  IsActive=@IsActive,      
		  UserID = @UserID,
          UserDate = @UserDate,
		  CompanyNo = @CompanyNo
          
       WHERE
          LedgerGroupNo = @LedgerGroupNo		
		  set @ReturnID=@LedgerGroupNo

     END
ELSE
     BEGIN
       --Insert new row
       Declare @Id numeric
       SELECT @Id=IsNull(Max(LedgerGroupNo),0) From MLedgerGroup
       DBCC CHECKIDENT('MLedgerGroup', RESEED, @Id)

       INSERT INTO MLedgerGroup(
         
          LedgerName,
          LedgerLangName,
          GroupNo,
		  IsActive,
          UserID,
          UserDate,
          CompanyNo
         
)
       VALUES(

          @LedgerName,
          @LedgerLangName,
          @GroupNo,
	      @IsActive,
		  @UserID,
          @UserDate,
          @CompanyNo
  	 
)
set @ReturnID=Scope_Identity()

END

<BREAK>

Create PROCEDURE [dbo].[AddMLedgerGroupDetails]
     @LedgerGrpDetailsNo                  numeric(18),
     @LedgerGroupNo                       numeric(18),
	 @LedgerNo				        	  numeric(18),
     @IsActive                            bit,
	 @UserID                              numeric(18),
     @UserDate                            datetime,
	 @CompanyNo                           numeric(18)
AS
IF EXISTS(select LedgerGrpDetailsNo from MLedgerGroupDetails
          where
          LedgerGrpDetailsNo = @LedgerGrpDetailsNo)
     BEGIN
       --Update existing row
       UPDATE MLedgerGroupDetails
       SET
          LedgerGroupNo = @LedgerGroupNo,
          LedgerNo=@LedgerNo,
          IsActive=@IsActive,      
		  UserID = @UserID,
          UserDate = @UserDate,
		  CompanyNo = @CompanyNo
          
       WHERE
          LedgerGrpDetailsNo = @LedgerGrpDetailsNo	

     END
ELSE
     BEGIN
       --Insert new row
       Declare @Id numeric
       SELECT @Id=IsNull(Max(LedgerGrpDetailsNo),0) From MLedgerGroupDetails
       DBCC CHECKIDENT('MLedgerGroupDetails', RESEED, @Id)

       INSERT INTO MLedgerGroupDetails(
         
          LedgerGroupNo,
          LedgerNo,
          IsActive,
          UserID,
          UserDate,
          CompanyNo
         
)
       VALUES(

          @LedgerGroupNo,
          @LedgerNo,
          @IsActive,
		  @UserID,
          @UserDate,
          @CompanyNo
  	 
)
END

<BREAK>

Create PROCEDURE  [dbo].[DeleteMRack] 
@RackNo                             numeric(18)

AS
Update MRack set IsActive='False' where RackNo = @RackNo

<BREAK>

Create PROCEDURE  [dbo].[DeleteMLedgerGroup] 
@LedgerGroupNo                          numeric(18)

AS
Update MLedgerGroup set IsActive='False' where LedgerGroupNo= @LedgerGroupNo

<BREAK>

Create PROCEDURE [dbo].[GetRackWiseBill]
@PkVoucherNo                numeric(18),
@Type						int


AS
Begin

SELECT     TVoucherEntry.VoucherUserNo, TVoucherEntry.VoucherDate, CASE WHEN (@Type = 1) 
                      THEN MStockItems_V_1.ItemName ELSE MStockItems_V_1.ItemNameLang END AS ItemName, MRateSetting.MRP, TStock.Quantity, TStock.GRWeight, 
                      TStock.TRWeight, TStock.PackagingCharges, TStock.NoOfBag, TStock.CessValue, TStock.OtherCharges AS Dhekharek, TStock.Rate, TStock.Amount, MUOM.UOMName, 
                      TStock.SGSTPercentage, TStock.SGSTAmount, TStock.DiscPercentage, TStock.DiscAmount, TStock.DiscRupees, TStock.DiscPercentage2, TStock.DiscAmount2, 
                      TStock.DiscRupees2, TStock.CGSTPercentage, TStock.CGSTAmount, TStock.IGSTPercentage, TStock.IGSTAmount, TStock.CessPercentage, TStock.CessAmount, 
                      MLedgerDetails.GSTNO AS CustGSTNo, MLedgerDetails.PANNo AS CustPANNo, MLedgerDetails.FSSAI, MFirm.GSTNO AS CmpGSTNo, MLedger.StateCode, 
                      MItemMaster.HSNCode, TVoucherEntry.BilledAmount, CASE WHEN (@Type = 1) THEN LedgerName ELSE LedgerLangName END AS LedgerName, 
                      MLedger.ContactPerson, MLedgerDetails.PhNo1 AS CustPhNo, MLedgerDetails.MobileNo1 AS CustMoNo, CASE WHEN (@Type = 1) 
                      THEN MLedgerDetails.Address ELSE MLedgerDetails.AddressLang END AS CustAddress, MFirm.Address + ' / ' + MFirm.PinCode AS CmpAddress, 
                      MFirm.EmailID AS CmpEmailID, MFirm.PhoneNo1 + ' / ' + MFirm.PhoneNo2 AS CompPhoneNo, MFirm.FSSAINO AS CompFSSAINo, TVoucherEntry.Reference, 
                      TVoucherEntry.VoucherTime, TStock.NetAmount + TStock.CessValue + TStock.PackagingCharges + TStock.OtherCharges AS NetAmount, TStock.NetRate, 
                      TStock.DisplayItemName, TStock.Remarks AS RemarksItemlevel, '' AS TransporterName, TVoucherEntry.LRNo, MTransporterMode.TransModeName, 
                      TVoucherEntry.TransNoOfItems,
                          (SELECT     SettingValue
                            FROM          MSettings
                            WHERE      (PkSettingNo = 311)) AS DisplayTrans, TVoucherEntry.Remark, MState.StateName, MCity.CityName, MPayType.PayTypeName, 
                      MLedgerDetails_1.Address AS CustDeliveryAddress, mcity_1.CityName AS custDeliverycity, MRack.RackName, MRackDetails.ToQty
FROM         MCity AS mcity_1 RIGHT OUTER JOIN
                      TStock INNER JOIN
                      MUOM ON TStock.FkUomNo = MUOM.UOMNo INNER JOIN
                      TVoucherEntry ON TStock.FKVoucherNo = TVoucherEntry.PkVoucherNo INNER JOIN
                      MFirm ON TVoucherEntry.CompanyNo = MFirm.FirmNo INNER JOIN
                      MItemMaster ON TStock.ItemNo = MItemMaster.ItemNo INNER JOIN
                      dbo.MStockItems_V(NULL, NULL, NULL, NULL, NULL, NULL, NULL) AS MStockItems_V_1 ON TStock.ItemNo = MStockItems_V_1.ItemNo INNER JOIN
                      MLedger ON TVoucherEntry.LedgerNo = MLedger.LedgerNo INNER JOIN
                      MLedgerDetails ON MLedgerDetails.LedgerNo = MLedger.LedgerNo INNER JOIN
                      MRateSetting ON TStock.FkRateSettingNo = MRateSetting.PkSrNo LEFT OUTER JOIN
                      MTransporterMode ON TVoucherEntry.TransportMode = MTransporterMode.TransModeNo INNER JOIN
                      MState ON MLedger.StateCode = MState.StateCode LEFT OUTER JOIN
                      MCity ON MLedgerDetails.CityNo = MCity.CityNo INNER JOIN
                      MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo INNER JOIN
                      MRack INNER JOIN
                      MRackDetails ON MRack.RackNo = MRackDetails.FkRackNo ON MItemMaster.GroupNo = MRackDetails.ItemNo LEFT OUTER JOIN
                      TDeliveryAddress ON TVoucherEntry.PkVoucherNo = TDeliveryAddress.FkVoucherno AND TVoucherEntry.LedgerNo = TDeliveryAddress.Ledgerno LEFT OUTER JOIN
                      MLedgerDetails AS MLedgerDetails_1 ON MLedgerDetails_1.LedgerDetailsNo = TDeliveryAddress.LedgerDetailsNo AND 
                      TDeliveryAddress.Ledgerno = MLedgerDetails_1.DeliveryLedgerNo ON mcity_1.CityNo = MLedgerDetails_1.CityNo
WHERE     (TVoucherEntry.PkVoucherNo = @PkVoucherNo)
ORDER BY TStock.PkStockTrnNo
END

<BREAK>

Create PROCEDURE  [dbo].[DeleteMRack] 
@RackNo                             numeric(18)

AS
Update MRack set IsActive='False' where RackNo = @RackNo

<BREAK>

Create PROCEDURE  [dbo].[DeleteMRackDetails] 
@RackDetailsNo                             numeric(18)

AS
Update MRackDetails set IsActive='False' where RackDetailsNo = @RackDetailsNo

<BREAK>

Create PROCEDURE  [dbo].[DeleteMLedgerGroup] 
@LedgerGroupNo                          numeric(18)

AS
Update MLedgerGroup set IsActive='False' where LedgerGroupNo= @LedgerGroupNo

<BREAK>

CREATE TABLE [dbo].[MRack](
	[RackNo] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
	[RackName] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[RackCode] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsActive] [bit] NULL,
	[UserID] [numeric](18, 0) NULL,
	[UserDate] [datetime] NULL,
	[CompanyNo] [numeric](18, 0) NULL,
 CONSTRAINT [PK_MRack] PRIMARY KEY CLUSTERED 
(
	[RackNo] ASC
)WITH (PAD_INDEX  = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

<BREAK>

CREATE TABLE [dbo].[MRackDetails](
	[RackDetailsNo] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
	[UOMLNo] [numeric](18, 0) NULL,
	[FkRackNo] [numeric](18, 0) NULL,
	[ItemNo] [numeric](18, 0) NULL,
	[ToQty] [numeric](18, 2) NULL,
	[IsActive] [bit] NULL,
	[UserID] [numeric](18, 0) NULL,
	[UserDate] [datetime] NULL,
 CONSTRAINT [PK_MRackDetails] PRIMARY KEY CLUSTERED 
(
	[RackDetailsNo] ASC
)WITH (PAD_INDEX  = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

<BREAK>

CREATE TABLE [dbo].[MLedgerGroup](
	[LedgerGroupNo] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
	[LedgerName] [varchar](250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LedgerLangName] [nvarchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[GroupNo] [numeric](18, 0) NULL,
	[IsActive] [bit] NULL,
	[CompanyNo] [numeric](18, 0) NULL,
	[UserID] [numeric](18, 0) NULL,
	[UserDate] [datetime] NULL,
 CONSTRAINT [PK_MLedgerGroup] PRIMARY KEY CLUSTERED 
(
	[LedgerGroupNo] ASC
)WITH (PAD_INDEX  = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

<BREAK>

CREATE TABLE [dbo].[MLedgerGroupDetails](
	[LedgerGrpDetailsNo] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
	[LedgerGroupNo] [numeric](18, 0) NULL,
	[LedgerNo] [numeric](18, 0) NULL,
	[IsActive] [bit] NULL,
	[CompanyNo] [numeric](18, 0) NULL,
	[UserID] [numeric](18, 0) NULL,
	[UserDate] [datetime] NULL,
 CONSTRAINT [PK_MLedgerGroupDetails] PRIMARY KEY CLUSTERED 
(
	[LedgerGrpDetailsNo] ASC
)WITH (PAD_INDEX  = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

<BREAK>

CREATE TABLE [dbo].[TDeliveryAddress](
	[PkSrNo] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
	[FkVoucherno] [numeric](18, 0) NULL,
	[Ledgerno] [numeric](18, 0) NULL,
	[LedgerDetailsNo] [numeric](18, 0) NULL,
	[IsActive] [bit] NULL,
	[UserId] [int] NULL,
	[UserDate] [datetime] NULL,
	[ModifiedBy] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[StatusNo] [int] NULL,
	[CompanyNo] [numeric](18, 0) NULL,
 CONSTRAINT [PK_TDeliveryAddress] PRIMARY KEY CLUSTERED 
(
	[PkSrNo] ASC
)WITH (PAD_INDEX  = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

<BREAK>

CREATE TABLE [dbo].[TEWayDetails](
	[PKEWayNo] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
	[FkVoucherNo] [int] NULL,
	[EWayNo] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[VoucherUserNo] [numeric](18, 0) NULL,
	[EWayDate] [datetime] NULL,
	[ModeNo] [numeric](18, 0) NULL,
	[Distance] [numeric](18, 2) NULL,
	[TransportNo] [numeric](18, 0) NULL,
	[VehicleNo] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LRNo] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LRDate] [datetime] NULL,
	[LedgerNo] [numeric](18, 0) NULL,
	[LedgerName] [varchar](max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Address] [varchar](max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CityNo] [numeric](18, 0) NULL,
	[Yadi2018BhatiyaCityName] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PinCode] [numeric](18, 0) NULL,
	[StateCode] [numeric](18, 0) NULL,
	[StateName] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UserID] [numeric](18, 0) NULL,
	[UserDate] [datetime] NULL,
	[ModifiedBy] [varchar](max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[StatusNo] [int] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_TEWayDetails] PRIMARY KEY CLUSTERED 
(
	[PKEWayNo] ASC
)WITH (PAD_INDEX  = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

<BREAK>

CREATE TABLE [dbo].[MRecipeMain](
	[MRecipeID] [int] IDENTITY(1,1) NOT NULL,
	[DocNo] [int] NULL,
	[ItemType] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[GroupNo] [int] NULL,
	[FinishItemID] [int] NULL,
	[PackingSize] [decimal](18, 2) NULL,
	[RDate] [datetime] NULL,
	[Qty] [numeric](18, 2) NULL,
	[ProdQty] [numeric](18, 2) NULL,
	[UomNo] [numeric](18, 0) NULL,
	[RecipeType] [numeric](18, 0) NULL,
	[FkRecipeID] [numeric](18, 0) NULL,
	[IsLock] [bit] NULL,
	[IsActive] [bit] NULL,
	[UserID] [int] NULL,
	[UserDate] [datetime] NULL,
	[ModifiedOn] [varchar](max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
 CONSTRAINT [PK_MRecipeMain] PRIMARY KEY CLUSTERED 
(
	[MRecipeID] ASC
)WITH (PAD_INDEX  = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

<BREAK>

CREATE TABLE [dbo].[MRecipeSub](
	[SRecipeID] [int] IDENTITY(1,1) NOT NULL,
	[FKMRecipeID] [int] NULL,
	[RawGroupNo] [int] NULL,
	[RawProductID] [int] NULL,
	[UomNo] [int] NULL,
	[Qty] [decimal](18, 2) NULL,
	[ProductQty] [numeric](18, 2) NULL,
	[Wastageper] [decimal](18, 2) NULL,
	[WastagePerQty] [decimal](18, 2) NULL,
	[FinalQty] [decimal](18, 2) NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_MRecipeSub] PRIMARY KEY CLUSTERED 
(
	[SRecipeID] ASC
)WITH (PAD_INDEX  = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

<BREAK>

Create PROCEDURE [dbo].[GetRackWiseBill]
@PkVoucherNo                numeric(18),
@Type						int

AS
Begin

SELECT     TVoucherEntry.VoucherUserNo, TVoucherEntry.VoucherDate, CASE WHEN (@Type = 1) 
                      THEN MStockItems_V_1.ItemName ELSE MStockItems_V_1.ItemNameLang END AS ItemName, MRateSetting.MRP, TStock.Quantity, TStock.GRWeight, 
                      TStock.TRWeight, TStock.PackagingCharges, TStock.NoOfBag, TStock.CessValue, TStock.OtherCharges AS Dhekharek, TStock.Rate, TStock.Amount, MUOM.UOMName, 
                      TStock.SGSTPercentage, TStock.SGSTAmount, TStock.DiscPercentage, TStock.DiscAmount, TStock.DiscRupees, TStock.DiscPercentage2, TStock.DiscAmount2, 
                      TStock.DiscRupees2, TStock.CGSTPercentage, TStock.CGSTAmount, TStock.IGSTPercentage, TStock.IGSTAmount, TStock.CessPercentage, TStock.CessAmount, 
                      MLedgerDetails.GSTNO AS CustGSTNo, MLedgerDetails.PANNo AS CustPANNo, MLedgerDetails.FSSAI, MFirm.GSTNO AS CmpGSTNo, MLedger.StateCode, 
                      MItemMaster.HSNCode, TVoucherEntry.BilledAmount, CASE WHEN (@Type = 1) THEN LedgerName ELSE LedgerLangName END AS LedgerName, 
                      MLedger.ContactPerson, MLedgerDetails.PhNo1 AS CustPhNo, MLedgerDetails.MobileNo1 AS CustMoNo, CASE WHEN (@Type = 1) 
                      THEN MLedgerDetails.Address ELSE MLedgerDetails.AddressLang END AS CustAddress, MFirm.Address + ' / ' + MFirm.PinCode AS CmpAddress, 
                      MFirm.EmailID AS CmpEmailID, MFirm.PhoneNo1 + ' / ' + MFirm.PhoneNo2 AS CompPhoneNo, MFirm.FSSAINO AS CompFSSAINo, TVoucherEntry.Reference, 
                      TVoucherEntry.VoucherTime, TStock.NetAmount + TStock.CessValue + TStock.PackagingCharges + TStock.OtherCharges AS NetAmount, TStock.NetRate, 
                      TStock.DisplayItemName, TStock.Remarks AS RemarksItemlevel, '' AS TransporterName, TVoucherEntry.LRNo, MTransporterMode.TransModeName, 
                      TVoucherEntry.TransNoOfItems,
                          (SELECT     SettingValue
                            FROM          MSettings
                            WHERE      (PkSettingNo = 311)) AS DisplayTrans, TVoucherEntry.Remark, MState.StateName, MCity.CityName, MPayType.PayTypeName, 
                      MLedgerDetails_1.Address AS CustDeliveryAddress, mcity_1.CityName AS custDeliverycity, MRack.RackName, MRackDetails.ToQty
FROM         MCity AS mcity_1 RIGHT OUTER JOIN
                      TStock INNER JOIN
                      MUOM ON TStock.FkUomNo = MUOM.UOMNo INNER JOIN
                      TVoucherEntry ON TStock.FKVoucherNo = TVoucherEntry.PkVoucherNo INNER JOIN
                      MFirm ON TVoucherEntry.CompanyNo = MFirm.FirmNo INNER JOIN
                      MItemMaster ON TStock.ItemNo = MItemMaster.ItemNo INNER JOIN
                      dbo.MStockItems_V(NULL, NULL, NULL, NULL, NULL, NULL, NULL) AS MStockItems_V_1 ON TStock.ItemNo = MStockItems_V_1.ItemNo INNER JOIN
                      MLedger ON TVoucherEntry.LedgerNo = MLedger.LedgerNo INNER JOIN
                      MLedgerDetails ON MLedgerDetails.LedgerNo = MLedger.LedgerNo INNER JOIN
                      MRateSetting ON TStock.FkRateSettingNo = MRateSetting.PkSrNo LEFT OUTER JOIN
                      MTransporterMode ON TVoucherEntry.TransportMode = MTransporterMode.TransModeNo INNER JOIN
                      MState ON MLedger.StateCode = MState.StateCode LEFT OUTER JOIN
                      MCity ON MLedgerDetails.CityNo = MCity.CityNo INNER JOIN
                      MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo INNER JOIN
                      MRack INNER JOIN
                      MRackDetails ON MRack.RackNo = MRackDetails.FkRackNo ON MItemMaster.GroupNo = MRackDetails.ItemNo LEFT OUTER JOIN
                      TDeliveryAddress ON TVoucherEntry.PkVoucherNo = TDeliveryAddress.FkVoucherno AND TVoucherEntry.LedgerNo = TDeliveryAddress.Ledgerno LEFT OUTER JOIN
                      MLedgerDetails AS MLedgerDetails_1 ON MLedgerDetails_1.LedgerDetailsNo = TDeliveryAddress.LedgerDetailsNo AND 
                      TDeliveryAddress.Ledgerno = MLedgerDetails_1.DeliveryLedgerNo ON mcity_1.CityNo = MLedgerDetails_1.CityNo
WHERE     (TVoucherEntry.PkVoucherNo = @PkVoucherNo)

ORDER BY TStock.PkStockTrnNo

END

<BREAK>

Create Procedure [dbo].[GetStockSummaryAllReport] 
@CompNo		           numeric(18),
@FromDate	           datetime,
@ToDate		           datetime,
@ItStr		           varchar(max),
@EsFlag                int
As

SELECT  StockType, ItemNo,sum(PurQty) AS PurQty, sum(SaleQty)  AS SaleQty,sum(PurReturnQty) AS PurReturnQty,sum(SalesReturnQty) AS SalesReturnQty,
sum(OpnOutQty) AS OpnOutQty,sum (OpnInQty) AS OpnInQty,sum (PhyOutQty) AS PhyOutQty,sum (PhyInQty) AS PhyInQty,
ItemGroupName, ItemName, Barcode,UOMH,UOMName_H,UOML,UOMName_L,HSNCode,VoucherDate from
(
--------Opening Stock for Sales---------------

SELECT     0 as StockType,   b.ItemNo, 0 AS PurQty, 
CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End  AS SaleQty,0 AS PurReturnQty,0 AS SalesReturnQty,b.FkUomNo, MUOM_S.UOMName AS UOMName_S,   
MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH,MUOM_H.UOMName AS UOMName_H,  
MItemMASter.UOML, MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,0 AS OpnOutQty,0 AS OpnInQty,0 AS PhyOutQty,0 AS PhyInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo 
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 
WHERE     a.VoucherDate < @FromDate AND a.IsCancel = 'False' AND a.VoucherTypeCode IN (15)
GROUP BY b.ItemNo, b.FkUomNo,MUOM_S.UOMName,MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,   
MItemMASter.UOMH, MUOM_H.UOMName,MItemMASter.UOML, MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate

--------Opening Stock Purchase---------------

Union All

SELECT   0 as StockType,  b.ItemNo, CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End AS PurQty, 0 AS SaleQty,0 AS PurReturnQty,0 AS SalesReturnQty,b.FkUomNo, MUOM_S.UOMName AS UOMName_S,   
MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH,MUOM_H.UOMName AS UOMName_H,  
MItemMASter.UOML, MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,0 AS OpnOutQty,0 AS OpnInQty,0 AS PhyOutQty,0 AS PhyInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 

WHERE    (a.VoucherDate < @FromDate) AND (a.IsCancel = 'False') AND (a.VoucherTypeCode IN (9))
GROUP BY b.ItemNo, b.FkUomNo,MUOM_S.UOMName,MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,   
MItemMASter.UOMH, MUOM_H.UOMName,MItemMASter.UOML, MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate

--------Opening Stock for Sales Return---------------

Union All

SELECT     0 as StockType,   b.ItemNo, 0 AS PurQty, 
CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End  AS SaleQty,0 AS PurReturnQty,0 AS SalesReturnQty,b.FkUomNo, MUOM_S.UOMName AS UOMName_S,   
MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH,MUOM_H.UOMName AS UOMName_H,  
MItemMASter.UOML, MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,0 AS OpnOutQty,0 AS OpnInQty,0 AS PhyOutQty,0 AS PhyInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 

WHERE    
     (a.VoucherDate < @FromDate) AND (a.IsCancel = 'False') AND (a.VoucherTypeCode IN (12))
GROUP BY b.ItemNo, b.FkUomNo,MUOM_S.UOMName,MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,   
MItemMASter.UOMH, MUOM_H.UOMName,MItemMASter.UOML, MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate

--------Opening Stock Purchase Return---------------

Union All

SELECT     0 as StockType,   b.ItemNo, CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End AS PurQty, 0 AS SaleQty,0 AS PurReturnQty,0 AS SalesReturnQty,b.FkUomNo, MUOM_S.UOMName AS UOMName_S,   
MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH,MUOM_H.UOMName AS UOMName_H,  
MItemMASter.UOML, MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,0 AS OpnOutQty,0 AS OpnInQty,0 AS PhyOutQty,0 AS PhyInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 

WHERE       (a.VoucherDate < @FromDate) AND (a.IsCancel = 'False') AND (a.VoucherTypeCode IN (13))
GROUP BY b.ItemNo, b.FkUomNo,MUOM_S.UOMName,MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,   
MItemMASter.UOMH, MUOM_H.UOMName,MItemMASter.UOML, MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate

Union All

------------------- Sales -------------------
SELECT   1 as StockType,     b.ItemNo, 0 AS PurQty, 
CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End  AS SaleQty,0 AS PurReturnQty,0 AS SalesReturnQty,b.FkUomNo,MUOM_S.UOMName AS UOMName_S,
MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH, MUOM_H.UOMName AS UOMName_H, 
MItemMASter.UOML, MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,0 AS OpnOutQty,0 AS OpnInQty,0 AS PhyOutQty,0 AS PhyInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 

WHERE        (a.VoucherDate >= @FromDate) AND (a.VoucherDate <= @ToDate) AND (a.IsCancel = 'False') AND (a.VoucherTypeCode IN (15))
GROUP BY b.ItemNo, b.FkUomNo,MUOM_S.UOMName,   MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,
MItemMASter.UOMH, MUOM_H.UOMName,MItemMASter.UOML, MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate

Union All

------------------- Pur Return -------------------
SELECT    1 as StockType,     b.ItemNo, 0 AS PurQty, 0 AS SaleQty, 
CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End AS PurReturnQty,0 AS SalesReturnQty,b.FkUomNo,MUOM_S.UOMName AS UOMName_S, 
MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH,MUOM_H.UOMName AS UOMName_H, 
MItemMASter.UOML, MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,0 AS OpnOutQty,0 AS OpnInQty,0 AS PhyOutQty,0 AS PhyInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 

WHERE     (a.VoucherDate >= @FromDate) AND (a.VoucherDate <= @ToDate) AND (a.IsCancel = 'False') AND (a.VoucherTypeCode IN (13))
GROUP BY b.ItemNo, b.FkUomNo,MUOM_S.UOMName,MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,
MItemMASter.UOMH, MUOM_H.UOMName,MItemMASter.UOML, MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate

Union All
------------------- PurchASe -------------------
SELECT   1 as StockType, b.ItemNo, CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End AS PurQty, 
0 AS SaleQty,0 AS PurReturnQty, 0 AS SalesReturnQty,b.FkUomNo, MUOM_S.UOMName AS UOMName_S,MItemGroup.ItemGroupName,
MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH, MUOM_H.UOMName AS UOMName_H,MItemMASter.UOML,
MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,0 AS OpnOutQty,0 AS OpnInQty,0 AS PhyOutQty,0 AS PhyInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 

WHERE     (a.VoucherDate >= @FromDate) AND (a.VoucherDate <= @ToDate) AND (a.IsCancel = 'False') AND (a.VoucherTypeCode IN (9))
GROUP BY b.ItemNo, b.FkUomNo,MUOM_S.UOMName,MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,
MItemMASter.UOMH, MUOM_H.UOMName,MItemMASter.UOML,MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate

Union All
------------------- Sales Return -------------------
SELECT    1 as StockType,  b.ItemNo, 0 AS PurQty, 0 AS SaleQty,0 AS PurReturnQty, 
CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End AS SalesReturnQty,b.FkUomNo, MUOM_S.UOMName AS UOMName_S,
MItemGroup.ItemGroupName,   MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH, MUOM_H.UOMName AS UOMName_H, 
MItemMASter.UOML, MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,0 AS OpnOutQty,0 AS OpnInQty,0 AS PhyOutQty,0 AS PhyInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 

WHERE         (a.VoucherDate >= @FromDate) AND (a.VoucherDate <= @ToDate) AND (a.IsCancel = 'False') AND (a.VoucherTypeCode IN (12))
GROUP BY b.ItemNo,b.FkUomNo,MUOM_S.UOMName,MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode, 
MItemMASter.UOMH,MUOM_H.UOMName,MItemMASter.UOML, MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate
)AS tbl
GROUP BY StockType, ItemNo,ItemGroupName, ItemName, Barcode, UOMH,UOMName_H,UOML,UOMName_L,HSNCode,VoucherDate
Order BY ItemGroupName, ItemName

<BREAK>

Create PROCEDURE [dbo].[GetGSTB2BPayTypewise] 
	@FromDate datetime,
	@ToDate datetime
		
AS
BEGIN
SELECT    'Cash SAles' as LedgerName, '21' as LedgerNo,SUM(TStock.NetAmount) AS basic, TStock.SGSTPercentage *2 AS taxPer,
 SUM(TStock.SGSTAmount) as cgstamt  , sum(TStock.SGSTAmount) AS sgstamount,     SUM(TStock.Amount) AS Expr2, MPayType.PayTypeName
FROM         TVoucherEntry INNER JOIN
                      TStock ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo INNER JOIN
                      MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo INNER JOIN
                      MLedger ON TVoucherEntry.LedgerNo = MLedger.LedgerNo
WHERE     (TVoucherEntry.VoucherTypeCode = 15) AND (TVoucherEntry.IsCancel = 'false') AND (TVoucherEntry.PayTypeNo = 2) AND (TVoucherEntry.LedgerNo = 21) 
AND (TVoucherEntry.VoucherDate >= @FromDate) AND (TVoucherEntry.VoucherDate <=@ToDate)
GROUP BY TStock.SGSTPercentage, MPayType.PayTypeName

union 
SELECT     MLedger.LedgerName, TVoucherEntry.LedgerNo, SUM(TStock.NetAmount) AS basic, TStock.SGSTPercentage * 2 AS taxPer,
SUM(TStock.SGSTAmount) as cgstamt  , sum(TStock.SGSTAmount) AS sgstamount, 
                      SUM(TStock.Amount) AS Expr2, MPayType.PayTypeName
FROM         TVoucherEntry INNER JOIN
                      TStock ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo INNER JOIN
                      MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo INNER JOIN
                      MLedger ON TVoucherEntry.LedgerNo = MLedger.LedgerNo
WHERE     (TVoucherEntry.VoucherTypeCode = 15) AND (TVoucherEntry.IsCancel = 'false') AND (TVoucherEntry.PayTypeNo = 2) AND (TVoucherEntry.LedgerNo != 21) 
AND (TVoucherEntry.VoucherDate >= @FromDate) AND (TVoucherEntry.VoucherDate <=@ToDate)
GROUP BY TVoucherEntry.LedgerNo, TStock.SGSTPercentage, MPayType.PayTypeName, MLedger.LedgerName
union
SELECT     MLedger.LedgerName, TVoucherEntry.LedgerNo, SUM(TStock.NetAmount) AS basic, TStock.SGSTPercentage * 2 AS taxPer,
SUM(TStock.SGSTAmount) as cgstamt  , sum(TStock.SGSTAmount) AS sgstamount, 
                      SUM(TStock.Amount) AS Expr2, MPayType.PayTypeName
FROM         TVoucherEntry INNER JOIN
                      TStock ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo INNER JOIN
                      MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo INNER JOIN
                      MLedger ON TVoucherEntry.LedgerNo = MLedger.LedgerNo
WHERE     (TVoucherEntry.VoucherTypeCode = 15) AND (TVoucherEntry.IsCancel = 'false') AND (TVoucherEntry.PayTypeNo!= 2)
AND (TVoucherEntry.VoucherDate >= @FromDate) AND (TVoucherEntry.VoucherDate <=@ToDate)
GROUP BY TVoucherEntry.LedgerNo, TStock.SGSTPercentage, MPayType.PayTypeName, MLedger.LedgerName

end

<BREAK>

Create PROCEDURE [dbo].[GetStockAllBrandQty]
@CompNo		           numeric(18),
@FromDate	           datetime,
@ToDate		           datetime,
@ItStr		            varchar(max),
@Itype                numeric(18)

AS
Declare @ItemNo		numeric(18)
Declare @TStock TABLE (ItemNo int,ItemName varchar(max),OpQty numeric(18,2),InwardQty numeric(18,2),OutwardQty numeric(18,2),Quantity numeric(18,2))
Declare @ItemTable TABLE(ItemNo numeric(18))
Declare @ItemName varchar(max),@OpQty numeric(18,2),@CrQty numeric(18,2),@ClosingQty numeric(18,2),@DrQty numeric(18,2),@StrQry varchar(max),@ItNo numeric(18),@StrItem varchar(max),@StrVchType varchar(max)
set @OpQty=0  set @DrQty=0  set @CrQty=0 set @StrQry='' 
set @StrItem=''

if(@ItStr<>'')
	begin
		set @StrItem='  MItemMaster.GroupNo IN ('+@ItStr+') and  ' 
		--insert into @ItemTable  Exec (@StrQry) 
    end
else
    begin
		set @StrItem=' '
    end

if(@Itype=0)
begin 
set @StrVchType='and TVoucherEntry.vouchertypecode in(15,12,13,9,8)'
end
else
begin 
set @StrVchType='and TVoucherEntry.vouchertypecode in(115,112,113,109,108)'
end

set @StrQry='Select Tbl1.ItemNo,Tbl1.ItemGroupName As ItemName, Sum(OpQty) As OpQty, abs(Sum(InQty)) As InwardQty, abs(Sum(OutQty)) As OutwardQty, 
Sum(OpQty + abs(InQty) - abs(OutQty)) As Quantity,''0'' as Barcode From
(
SELECT    MItemGroup.ItemGroupNo as ItemNo , MItemGroup.ItemGroupName , SUM(CASE WHEN (TStock.TrnCode = 1) THEN isnull(TStock.BilledQuantity, 0) ELSE isnull(TStock.BilledQuantity, 0) * - 1 END) AS OpQty, 0.00 AS InQty, 
                      0.00 AS OutQty
FROM         TVoucherEntry INNER JOIN
                      TStock ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo INNER JOIN
                      MItemMaster ON TStock.ItemNo = MItemMaster.ItemNo INNER JOIN
                      MItemGroup ON MItemMaster.GroupNo = MItemGroup.ItemGroupNo
WHERE   ' + @StrItem + ' (TVoucherEntry.VoucherDate < '''+cast(@FromDate as varchar)+''')  and TVoucherEntry.IsCancel=''false'' ' + @StrVchType + '
GROUP BY MItemGroup.ItemGroupNo , MItemGroup.ItemGroupName 
UNION ALL
SELECT     MItemGroup.ItemGroupNo as ItemNo, MItemGroup.ItemGroupName , 0.00 AS OpQty, SUM(CASE WHEN (TStock.TrnCode = 1) THEN isnull(TStock.BilledQuantity, 0) ELSE 0.00 END) AS InQty, 
                      SUM(CASE WHEN (TStock.TrnCode = 2) THEN isnull(TStock.BilledQuantity, 0) * - 1 ELSE 0.00 END) AS OutQty
FROM         TVoucherEntry INNER JOIN
                      TStock ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo INNER JOIN
                      MItemMaster ON TStock.ItemNo = MItemMaster.ItemNo INNER JOIN
                      MItemGroup ON MItemMaster.GroupNo = MItemGroup.ItemGroupNo
WHERE    ' + @StrItem + ' (TVoucherEntry.VoucherDate >= '''+cast(@FromDate as varchar)+''') AND 
        (TVoucherEntry.VoucherDate <= '''+cast(@ToDate as varchar)+''')  and TVoucherEntry.IsCancel=''false'' ' + @StrVchType + '
GROUP BY MItemGroup.ItemGroupNo, MItemGroup.ItemGroupName 
) As Tbl1 
Group BY Tbl1.ItemNo,Tbl1.ItemGroupName
order by ItemName  '

Exec(@StrQry)
RETURN

<BREAK>

Create PROCEDURE [dbo].[AddMRecipeMain]
 @MRecipeID                  int,
 @DocNo                      int,
 @ItemType                   varchar(50),
 @GroupNo                    int,
 @FinishItemID               int,
 @PackingSize                decimal(18,2), 
 @RDate                      datetime,
 @Qty                        numeric(18,2), 
 @UomNo                      numeric(18,0),
 @RecipeType                 numeric(18,0),
 @IsActive                   bit, 
 @UserID                     int,
 @UserDate                   datetime,
 @ProdQty                    numeric(18,2),
 @FkRecipeID                 numeric(18,2),
 @IsLock                     bit,
 @ReturnID                   int output

AS
IF EXISTS(select MRecipeID from MRecipeMain
          where
          MRecipeID = @MRecipeID and RecipeType=@RecipeType)
     BEGIN
       --Update existing row
       UPDATE MRecipeMain
       SET
        DocNo=@DocNo,
		ItemType=@ItemType,
		GroupNo=@GroupNo,
		FinishItemID=@FinishItemID,
		PackingSize=@PackingSize,
		RDate=@RDate,
        Qty=@Qty,
        ProdQty=@ProdQty,
        UomNo=@UomNo,
        RecipeType=@RecipeType,
        FkRecipeID=@FkRecipeID,
        IsLock=@IsLock,
		IsActive=@IsActive,
		UserID=@UserID,
        ModifiedOn = isnull(ModifiedOn,'') + cast(@UserID as varchar)+'@'+ CONVERT(VARCHAR(10), GETDATE(), 105)

       WHERE
          MRecipeID = @MRecipeID and RecipeType=@RecipeType
		set @ReturnID=@MRecipeID 

     END
ELSE
     BEGIN
       --Insert new row
       Declare @Id numeric
  SELECT @Id=IsNull(Max(MRecipeID),0) From MRecipeMain
       DBCC CHECKIDENT('MRecipeMain', RESEED, @Id)
       SELECT @DocNo=IsNull(Max(DocNo),0)+1 From MRecipeMain where RecipeType=@RecipeType
     
       INSERT INTO MRecipeMain(
        DocNo,
		ItemType, 
		GroupNo,
		FinishItemID, 
		PackingSize, 
		RDate, 
        Qty,
        ProdQty,
        UomNo,
        RecipeType,
        FkRecipeID,
        IsLock,
		IsActive, 
		UserID, 
		UserDate
         
)
       VALUES(
         
		@DocNo,
		@ItemType,
		@GroupNo, 
		@FinishItemID, 
		@PackingSize, 
		@RDate,
        @Qty, 
        @ProdQty,
        @UomNo,
        @RecipeType,
        @FkRecipeID,
        @IsLock,
		@IsActive, 
		@UserID,
        @UserDate         
)
Set @ReturnID=Scope_Identity()
END

<BREAK>

Create PROCEDURE [dbo].[AddMRecipeSub]
 @SRecipeID             int,
 @FKMRecipeID           int,
 @RawGroupNo            int,
 @RawProductID          int, 
 @Qty                   decimal(18,2),
 @ProductQty            numeric(18,2),
 @UomNo                 int,
 @Wastageper            decimal(18,2),
 @WastagePerQty         decimal(18,2),
 @FinalQty              decimal(18,2),
 @IsActive              bit

AS
IF EXISTS(select SRecipeID from MRecipeSub
          where
          SRecipeID = @SRecipeID) 
     BEGIN
       --Update existing row
       UPDATE MRecipeSub
       SET

        FKMRecipeID=@FKMRecipeID,
		RawGroupNo=@RawGroupNo,
		RawProductID=@RawProductID,
		Qty=@Qty,
		UomNo=@UomNo,
        ProductQty=@ProductQty,
		Wastageper=@Wastageper,
		WastagePerQty=@WastagePerQty,
		FinalQty=@FinalQty, 
        IsActive=@IsActive

       WHERE
          SRecipeID = @SRecipeID 

     END
ELSE
	BEGIN
		   --Insert new row
		   Declare @Id numeric
		   SELECT @Id=IsNull(Max(SRecipeID),0) From MRecipeSub
		   DBCC CHECKIDENT('MRecipeSub', RESEED, @Id)
		   INSERT INTO MRecipeSub
(
			FKMRecipeID, 
			RawGroupNo,
			RawProductID, 
			Qty, 
			UomNo, 
            ProductQty,
			Wastageper, 
			WastagePerQty, 
			FinalQty, 
			IsActive			  
)
VALUES
(
			@FKMRecipeID,
			@RawGroupNo,
			@RawProductID,
			@Qty,
			@UomNo,
            @ProductQty,
			@Wastageper,
			@WastagePerQty,
			@FinalQty,
			@IsActive
)
	END

<BREAK>

Update dbo.MItemGroup set controlgroup=4 where ItemGroupNo=10 and controlgroup=1

Update dbo.MItemGroup set controlgroup=2 where ItemGroupNo=8 and controlgroup=0

Update dbo.MItemMaster set FkDepartmentNo= 10,FkCategoryNo=8 where FkDepartmentNo= 1 and FkCategoryNo=0

Update MSettings set SettingKeyCode= 'S_IsUseLastPartyWiseDiscEnabled' where PkSettingNo=98

<BREAK>

ALTER TABLE MRateSetting ADD CONSTRAINT Stock DEFAULT 0 FOR Stock

ALTER TABLE MRateSetting ADD CONSTRAINT Stock2 DEFAULT 0 FOR Stock2

ALTER TABLE MRateSetting ADD CONSTRAINT Weight1 DEFAULT 0 FOR Weight1

ALTER TABLE MRateSetting ADD CONSTRAINT Weight2 DEFAULT 0 FOR Weight2

ALTER TABLE MRateSetting ADD CONSTRAINT SPPerc DEFAULT 0 FOR SPPerc

ALTER TABLE MRateSetting ADD CONSTRAINT LPPerc DEFAULT 0 FOR LPPerc

<BREAK>

Drop table Company 
Drop table Customer
Drop table Itemmast

<BREAK>

IF NOT EXISTS(select ScriptNo from DBVersionLog where ScriptNo = 3)
BEGIN

UPDATE MSetting SET AppVersion = 'rKNKsixM4yg=';

INSERT INTO [DBVersionLog]
           ([ScriptNo]
           ,[ScriptDescription])
     VALUES
           (2
           ,'Updated application version to 1.0.1.0')
END

<BREAK>

ALTER PROCEDURE [dbo].[AddMRateSetting2]
     @PkSrNo                              numeric(18),
--   @FkBcdSrNo                           numeric(18),
     @ItemNo                              numeric(18),
     @FromDate                            datetime,
     @PurRate                             numeric(18,4),
	 @MRP				                  numeric(18,4),
	 @UOMNo                               numeric(18),
	 @ASaleRate                           numeric(18,4),
	 @BSaleRate                           numeric(18,4),
	 @CSaleRate                           numeric(18,4),
	 @DSaleRate                           numeric(18,4),
	 @ESaleRate                           numeric(18,4),
	 @StockConversion					  Numeric(18,2),
--	 @PerOfRateVariation				  numeric(18),
     @MKTQty						      numeric(18),
	 @IsActive							  bit,
	 @UserID                              numeric(18),
     @UserDate                            datetime,
	 @CompanyNo							  numeric(18),
     @Weight1                             Numeric(18,2),  
     @Weight2                             Numeric(18,2),
     @LPPerc                             Numeric(18,2),  
     @SPPerc                             Numeric(18,2)
AS
if(cast(@FromDate as datetime) < cast('02-02-1900 00:00:00' as datetime))
begin
	set @FromDate= Convert(datetime,Cast(getdate() as varchar))
end
IF EXISTS(select PkSrNo from MRateSetting
          where
          PkSrNo = @PkSrNo)
     BEGIN
       --Update existing row
       UPDATE MRateSetting
       SET

          ItemNo = @ItemNo,
          FromDate = @FromDate,
          PurRate = @PurRate,
	      MRP = @MRP,
		  UOMNo=@UOMNo,                               
		  ASaleRate = @ASaleRate,
		  BSaleRate = @BSaleRate,
		  CSaleRate = @CSaleRate,
		  DSaleRate = @DSaleRate,
		  ESaleRate = @ESaleRate,
		  StockConversion=@StockConversion,
		  MKTQty=@MKTQty,
		  IsActive=@IsActive,
          UserID = @UserID,
          UserDate = @UserDate,
		  CompanyNo=@CompanyNo,
          StatusNo=2,
          Weight1 = @Weight1,                              
          Weight2 = @Weight2,
          LPPerc = @LPPerc,                              
          SPPerc = @SPPerc  
       WHERE
          PkSrNo = @PkSrNo

     END
ELSE
     BEGIN
       --Insert new row
       Declare @Id numeric
       SELECT @Id=IsNull(Max(PkSrNo),0) From MRateSetting
       DBCC CHECKIDENT('MRateSetting', RESEED, @Id)
       INSERT INTO MRateSetting(
          ItemNo,
          FromDate,
          PurRate,
	      MRP,
		  UOMNo,
		  ASaleRate,
		  BSaleRate,
		  CSaleRate,
		  DSaleRate,
		  ESaleRate,
		  StockConversion,

		  MKTQty,
		  IsActive,
          UserID,
          UserDate,
		  CompanyNo,
          StatusNo,
          Weight1 ,                             
          Weight2,
          LPPerc,
          SPPerc 
)
       VALUES(
          @ItemNo,
          @FromDate,
          @PurRate,
		  @MRP,
		  @UOMNo,
          @ASaleRate,
          @BSaleRate,
          @CSaleRate,
          @DSaleRate,
          @ESaleRate,
		  @StockConversion,
		  @MKTQty,
		  @IsActive,
          @UserID,
          @UserDate,
		  @CompanyNo,
          1,
          @Weight1,                              
          @Weight2,
          @LPPerc,
          @SPPerc 
)

END

<BREAK>

ALTER Function [dbo].[GetItemRateAll]
(
@PItemNo		           numeric(18),
--@PBarCodeNo			   numeric(18),
@PUOMNo	               numeric(18),
@PMRP				   numeric(18,4),
@POnDate		           datetime,
@PGroupNo				numeric(18)
)
RETURNS @TRate TABLE  (PkSrNo numeric(18)/*,FkBcdSrNo numeric(18)*/ ,ItemNo numeric(18),FromDate datetime,PurRate numeric(18,2),MRP numeric(18,2),
ASaleRate numeric(18, 2),BSaleRate numeric(18, 2),CSaleRate numeric(18, 2),DSaleRate numeric(18, 2),ESaleRate numeric(18, 2)
,UOMNo numeric(18), StockConversion numeric(18,2),PerOfRateVariation numeric(18, 2),MKTQty numeric(18,0),IsActive bit,
Stock numeric(18, 2),Stock2 numeric(18, 2),Weight1 numeric(18, 2),Weight2 numeric(18, 2))
AS
Begin
Declare @TempTbl TABLE (PkSrNo numeric(18)/*,FkBcdSrNo numeric(18) */,ItemNo numeric(18),FromDate datetime,PurRate numeric(18,2),MRP numeric(18,2),
ASaleRate numeric(18, 2),BSaleRate numeric(18, 2),CSaleRate numeric(18, 2),DSaleRate numeric(18, 2),ESaleRate numeric(18, 2),
UOMNo numeric(18), StockConversion numeric(18,2),PerOfRateVariation numeric(18, 2),IsActive bit)

Declare @PkSrNo numeric(18) , /*@FkBcdSrNo numeric(18) , */ @ItemNo numeric(18) , 
@FromDate datetime , @PurRate numeric(18,2), @MRP numeric(18,2),@IsActive bit,@Stock numeric(18, 2),@Stock2 numeric(18, 2),
@Weight1 numeric(18, 2),@Weight2 numeric(18, 2),
@ASaleRate numeric(18, 2),@BSaleRate numeric(18, 2),@CSaleRate numeric(18, 2),@DSaleRate numeric(18, 2),@ESaleRate numeric(18, 2),
@UOMNo numeric(18) ,@StockConversion numeric(18,2) , @PerOfRateVariation numeric(18, 2),@MKTQty numeric(18, 0),
@StrFilter varchar(max),@SqlQuery varchar(max), @VItemNo numeric(18), 
@VBarCodeNo numeric(18), @VUOMNo numeric(18),@VMRP numeric(18,4)

Set  @PkSrNo = 0-- Set @FkBcdSrNo = 0 
set @MKTQty=0 set @MRP=0.00
Set  @ItemNo = 0 Set @FromDate = 0 Set  @PurRate  = 0 
Set  @ASaleRate = 0 Set  @BSaleRate = 0 Set  @CSaleRate = 0 Set  @DSaleRate = 0 Set  @ESaleRate = 0 Set  @UOMNo  = 0 
Set  @StockConversion = 0 
Set  @PerOfRateVariation = 0
Set @VItemNo = 0 
set @VBarCodeNo=0 set @VUOMNo =0 set @VMRP=0.00
set @Stock=0 set @Stock2=0
set @Weight1=0 set @Weight2=0
if(@PGroupNo is Null)
Declare CurRate Cursor For Select PkSrNo ,ItemNo/*,MRateSetting.FkBcdSrNo*/,FromDate ,PurRate,MRP,ASaleRate,BSaleRate,CSaleRate,DSaleRate,ESaleRate ,
				 UOMNo , StockConversion ,
				 PerOfRateVariation,MKTQty,IsActive, Stock,Stock2,Weight1,Weight2 From MRateSetting 
				 where IsActive='true' AND  ItemNo=Case When @PItemNo is null then ItemNo else @PItemNo end 
				AND UOMNo=Case When @PUOMNo is null then UOMNo else @PUOMNo end 
				AND MRP=Case When @PMRP is null then MRP else @PMRP end				
				 Order by ItemNo,UOMNo,MRP,FromDate DESC, PkSrNo DESC 
else
	Declare CurRate Cursor For Select MRateSetting.PkSrNo /*,MRateSetting.FkBcdSrNo*/,MRateSetting.ItemNo,MRateSetting.FromDate ,MRateSetting.PurRate,MRateSetting.MRP,MRateSetting.ASaleRate,MRateSetting.BSaleRate,MRateSetting.CSaleRate,MRateSetting.DSaleRate,MRateSetting.ESaleRate ,
				 MRateSetting.UOMNo , MRateSetting.StockConversion ,
				 MRateSetting.PerOfRateVariation,MRateSetting.MKTQty,MRateSetting.IsActive  ,MRateSetting.Stock,MRateSetting.Stock2,MRateSetting.Weight1,MRateSetting.Weight2
 From MRateSetting INNER JOIN 
				 MItemMaster ON MRateSetting.ItemNo=MItemMaster.ItemNo
				 where MRateSetting.IsActive='true' AND  MRateSetting.ItemNo=Case When @PItemNo is null then MRateSetting.ItemNo else @PItemNo end 
				AND MRateSetting.UOMNo=Case When @PUOMNo is null then MRateSetting.UOMNo else @PUOMNo end 
				AND MRateSetting.MRP=Case When @PMRP is null then MRateSetting.MRP else @PMRP end
				AND MItemMaster.GroupNo=@PGroupNo
				 Order by MRateSetting.ItemNo/*,MRateSetting.FkBcdSrNo*/,MRateSetting.UOMNo,MRateSetting.MRP,MRateSetting.FromDate DESC, PkSrNo DESC 
Open CurRate 

Fetch CurRate into @PkSrNo ,@ItemNo,@FromDate,@PurRate,@MRP,@ASaleRate,@BSaleRate,@CSaleRate,@DSaleRate,@ESaleRate ,
								  @UOMNo ,@StockConversion ,@PerOfRateVariation,@MKTQty,@IsActive,@Stock,@Stock2,@Weight1,@Weight2
DECLARE @isRecOK int

while(@@Fetch_Status = 0)
Begin
		SET @isRecOK = 1
	    if(@PItemNo IS not NULL AND @PItemNo != @ItemNo)
		Begin
            SET @isRecOK = 0
		End 

		if( @PUOMNo is not NUll AND @PUOMNo != @UOMNo)
		Begin
			 SET @isRecOK = 0
		End 

		if( @PMRP is not NUll AND @PMRP != @MRP)
		Begin
			 SET @isRecOK = 0
		End 
		
		if(@POnDate is not NUll AND @FromDate > @POnDate)
		Begin
			 SET @isRecOK = 0
		End 
		else if(getdate()<@FromDate)
		Begin
			SET @isRecOK = 0
		End
 
	if((@isRecOK = 1) AND 
       (@VItemNo != @ItemNo or @VUOMNo != @UOMNo or @VMRP!=@MRP ))
	Begin
		set @VItemNo = @ItemNo  
		set @VUOMNo = @UOMNo 
		set @VMRP=@MRP
		
		insert into @TRate values (@PkSrNo /*,@FkBcdSrNo*/,@ItemNo,@FromDate,@PurRate,@MRP,@ASaleRate,@BSaleRate,@CSaleRate,@DSaleRate,@ESaleRate ,@UOMNo, 
								   @StockConversion ,@PerOfRateVariation,@MKTQty,@IsActive,@Stock,@Stock2,@Weight1,@Weight2)
	End 
	
	Fetch CurRate into @PkSrNo /*,@FkBcdSrNo*/,@ItemNo,@FromDate,@PurRate,@MRP,@ASaleRate,@BSaleRate,@CSaleRate,@DSaleRate,@ESaleRate ,
								  @UOMNo ,@StockConversion ,@PerOfRateVariation,@MKTQty,@IsActive,@Stock,@Stock2,@Weight1,@Weight2
End 

close CurRate deallocate CurRate 

Return
End

<BREAK>

ALTER PROCEDURE [dbo].[AddMItemMaster]
     @ItemNo                              numeric(18),
     @ItemName                            varchar(50),
     @ItemShortName                       varchar(50),
     @Barcode                             varchar(50),
     @ShortCode                           varchar(50),
     @GroupNo                             numeric(18),
     @UOMH                                numeric(18),
     @UOML                                numeric(18),
     @UOMDefault                          numeric(18),
     @FkDepartmentNo                      numeric(18),
     @FkCategoryNo                        numeric(18),
     @MinLevel                            numeric(18),
     @MaxLevel                            numeric(18),
    -- @ReOrderLevelQty                     numeric(18),
     @LangFullDesc                        varchar(50),
     @LangShortDesc                       varchar(50),
     @CompanyNo                           numeric(18),
     @IsActive                            bit,
     @UserId                              numeric(18),
     @UserDate                            datetime,
    -- @ModifiedBy                          text,
     --@StatusNo                            int,
     @ControlUnder                        numeric(18),
     @FactorVal                           numeric(18),
     @Margin                              numeric(18),
     @CessValue                           numeric(18,2),
     @PackagingCharges                    numeric(18,2),
     @Dhekhrek                            numeric(18,2),
     @OtherCharges                        numeric(18,2),
     @HigherVariation                     numeric(18),
     @LowerVariation                      numeric(18),
     @HSNCode                             varchar(50),
     @FKStockGroupTypeNo                  numeric(18),
     @ESFlag                              bit,
     @ItemType                            int,
    -- @Stock                               numeric(18),
     @ContainerCharges                    numeric(18,2), 
     @ReturnID		    	INT OUTPUT

AS
IF EXISTS(select ItemNo from MItemMaster
          where
          ItemNo = @ItemNo)
     BEGIN
       --Update existing row
       UPDATE MItemMaster
       SET
          ItemName = @ItemName,
          ItemShortName = @ItemShortName,
          Barcode = @Barcode,
          ShortCode = @ShortCode,
          GroupNo = @GroupNo,
         UOMH = @UOMH,
          UOML = @UOML,         UOMDefault = @UOMDefault,
          FkDepartmentNo = @FkDepartmentNo,
          FkCategoryNo = @FkCategoryNo,
          MinLevel = @MinLevel,
          MaxLevel = @MaxLevel,
          --ReOrderLevelQty = @ReOrderLevelQty,
          LangFullDesc = @LangFullDesc,
          LangShortDesc = @LangShortDesc,
          CompanyNo = @CompanyNo,
          IsActive = @IsActive,
          UserId = @UserId,
          UserDate = @UserDate,
          ModifiedBy =  isnull(ModifiedBy,'') + cast(@UserID as varchar)+'@'+ CONVERT(VARCHAR(10), GETDATE(), 105),
          StatusNo = 1,
          ControlUnder = @ControlUnder,
          FactorVal = @FactorVal,
          Margin = @Margin,
          CessValue = @CessValue,
          PackagingCharges = @PackagingCharges,
          Dhekhrek = @Dhekhrek,
          OtherCharges = @OtherCharges,
          HigherVariation = @HigherVariation,
          LowerVariation = @LowerVariation,
          HSNCode = @HSNCode,
          FKStockGroupTypeNo=@FKStockGroupTypeNo,
          ItemType=@ItemType,
          ESFlag=@ESFlag,
          ContainerCharges=@ContainerCharges
      --    Stock = @Stock
       WHERE
          ItemNo = @ItemNo
     SET @ReturnID =@ItemNo
     END
ELSE
     BEGIN
       --Insert new row
       INSERT INTO MItemMaster(
          ItemName,
          ItemShortName,
          Barcode,
          ShortCode,
          GroupNo,
          UOMH,
          UOML,
          UOMDefault,
          FkDepartmentNo,
          FkCategoryNo,
          MinLevel,
          MaxLevel,
        --  ReOrderLevelQty,
          LangFullDesc,
          LangShortDesc,
          CompanyNo,
          IsActive,
          UserId,
          UserDate,
        --  ModifiedBy,
          StatusNo,
          ControlUnder,
          FactorVal,
          Margin,
          CessValue,
          PackagingCharges,
          Dhekhrek,
          OtherCharges,
          HigherVariation,
          LowerVariation,
          HSNCode,
          FKStockGroupTypeNo,
          ItemType,
          ESFlag,
          ContainerCharges
         -- Stock
)
       VALUES(
          @ItemName,
          @ItemShortName,
          @Barcode,
          @ShortCode,
          @GroupNo,
          @UOMH,
          @UOML,
          @UOMDefault,
          @FkDepartmentNo,
          @FkCategoryNo,
          @MinLevel,
          @MaxLevel,
        --  @ReOrderLevelQty,
          @LangFullDesc,
          @LangShortDesc,
          @CompanyNo,
          @IsActive,
          @UserId,
          @UserDate,
         -- @ModifiedBy,
1,
          @ControlUnder,
          @FactorVal,
          @Margin,
          @CessValue,
          @PackagingCharges,
          @Dhekhrek,
          @OtherCharges,
          @HigherVariation,
          @LowerVariation,
          @HSNCode,
          @FKStockGroupTypeNo,
          @ItemType,
          @ESFlag,
          @ContainerCharges
         -- @Stock
)
     SET @ReturnID = SCOPE_IDENTITY()
END

<BREAK>

ALTER PROCEDURE [dbo].[AddMLedger1]
     @LedgerNo                            numeric(18),
     @LedgerUserNo                        varchar(100),
     @LedgerName                          varchar(250),
     @GroupNo                             numeric(18),
	 @OpeningBalance					  numeric(18,2),
	 @SignCode							  numeric(18),  
     @MaintainBillByBill                  bit,
	 @IsActive                            bit,
     @ContactPerson                       varchar(100),
     @CompanyNo                           numeric(18),
	 @LedgerStatus						  int,
     @IsEnroll                            bit,
     @IsSendSMS                           bit,
     @UserID                              numeric(18),
     @UserDate                            datetime,
     @TransporterNo                       numeric(18),
     @StateCode                           numeric(18),
	 @LedgerLangName					  varchar(100),
     @IsPartyWiseRate                     bit,
     @QuotationRate                       bit,
     @ContactPersonLang                   nvarchar(500),
     @IsSendEmail                         bit,
     @ReturnID							  int output
AS
IF EXISTS(select LedgerNo from MLedger
          where
          LedgerNo = @LedgerNo)
     BEGIN
       --Update existing row
       UPDATE MLedger
       SET
          LedgerUserNo = @LedgerUserNo,
          LedgerName = @LedgerName,
          GroupNo = @GroupNo,
		  OpeningBalance=@OpeningBalance,
		  SignCode=@SignCode,
          MaintainBillByBill = @MaintainBillByBill,
	      IsActive=@IsActive,
          ContactPerson = @ContactPerson,
          CompanyNo = @CompanyNo,
		  LedgerStatus = @LedgerStatus,
          IsEnroll = @IsEnroll,
          IsSendSMS = @IsSendSMS,
          UserID = @UserID,
          UserDate = @UserDate,
		  TransporterNo= @TransporterNo, 
          StateCode=@StateCode,   
          LedgerLangName=@LedgerLangName,
		  IsPartyWiseRate =  @IsPartyWiseRate,
          QuotationRate=  @QuotationRate, 
          ContactPersonLang=@ContactPersonLang,              
          ModifiedBy = isnull(ModifiedBy,'') + cast(@UserID as varchar)+'@'+ CONVERT(VARCHAR(10), GETDATE(), 105),
          StatusNo=2,
          IsSendEmail=@IsSendEmail

       WHERE
          LedgerNo = @LedgerNo
		  set @ReturnID=@LedgerNo

     END
ELSE
     BEGIN
       --Insert new row
       Declare @Id numeric
       SELECT @Id=IsNull(Max(LedgerNo),0) From MLedger
       DBCC CHECKIDENT('MLedger', RESEED, @Id)
	  --For Max Ledger User No 
	  Select @LedgerUserNo=IsNull(Max(Cast(LedgerUserNo as numeric)),0)+1 from MLedger Where GroupNo=@GroupNo

       INSERT INTO MLedger(
          LedgerUserNo,
          LedgerName,
          GroupNo,
		  OpeningBalance,
		  SignCode,
          MaintainBillByBill,
		  IsActive,
          ContactPerson,
          CompanyNo,
		  LedgerStatus,
          IsEnroll,
          IsSendSMS,
          UserID,
          UserDate,
          TransporterNo,
          StateCode,
		  LedgerLangName,
          IsPartyWiseRate,
		  QuotationRate,
          ContactPersonLang,
          StatusNo,
          IsSendEmail
)
       VALUES(
          @LedgerUserNo,
          @LedgerName,
          @GroupNo,
		  @OpeningBalance,
		  @SignCode,
          @MaintainBillByBill,
		  @IsActive,
          @ContactPerson,
          @CompanyNo,
		  @LedgerStatus,
          @IsEnroll,
          @IsSendSMS,
          @UserID,
          @UserDate,
		  @TransporterNo,
		  @StateCode,
	      @LedgerLangName,
          @IsPartyWiseRate,
          @QuotationRate,
          @ContactPersonLang,
          1,
          @IsSendEmail
)
set @ReturnID=Scope_Identity()

END

<BREAK>

ALTER PROCEDURE [dbo].[StockUpdateAll]
AS
update mratesetting set stock=0,stock2=0 

--Purchase
update m set m.stock =m.stock + t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN  TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 9 and TVoucherEntry.iscancel='false' and TStock.itype = 0
group by itemno ) t
on m.itemno=t.itemno 
--Opening Stock
update m set m.stock =m.stock + t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 36 and TVoucherEntry.iscancel='false' and TStock.itype = 0
group by itemno ) t
on m.itemno=t.itemno 
--Physical Stock
update m set m.stock =m.stock + t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 8 and TVoucherEntry.iscancel='false' and TStock.itype = 0
group by itemno ) t
on m.itemno=t.itemno 
--sales return
update m set m.stock =m.stock + t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN  TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 12 and TVoucherEntry.iscancel='false' and TStock.itype = 0
group by itemno ) t
on m.itemno=t.itemno 

--sales
update m set m.stock =m.stock - t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 15 and TVoucherEntry.iscancel='false' and TStock.itype = 0
group by itemno ) t
on m.itemno=t.itemno 


--Estimate Purchase
update m set m.stock2 =m.stock2 + t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN  TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 109 and TVoucherEntry.iscancel='false' and TStock.itype = 1
group by itemno ) t
on m.itemno=t.itemno 
--Estimate Sales Return
update m set m.stock2 =m.stock2 + t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN  TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 112 and TVoucherEntry.iscancel='false' and TStock.itype = 1
group by itemno ) t
on m.itemno=t.itemno 

--Estimate Sales 
update m set m.stock2 =m.stock2 - t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 115 and TVoucherEntry.iscancel='false' and TStock.itype = 1
group by itemno ) t
on m.itemno=t.itemno 

--Estimate Opening Stock
update m set m.stock =m.stock + t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 136 and TVoucherEntry.iscancel='false' and TStock.itype = 1
group by itemno ) t
on m.itemno=t.itemno 
--Estimate Physical Stock
update m set m.stock =m.stock + t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 108 and TVoucherEntry.iscancel='false' and TStock.itype = 1
group by itemno ) t
on m.itemno=t.itemno 


update m set m.stock2 =m.stock2 - t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 15 and TVoucherEntry.iscancel='false' and TStock.itype = 1
group by itemno ) t
on m.itemno=t.itemno 

update m set m.stock2 =m.stock2 + t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 12 and TVoucherEntry.iscancel='false' and TStock.itype = 1
group by itemno ) t
on m.itemno=t.itemno 

update m set m.stock =m.stock + t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 9 and TVoucherEntry.iscancel='false' and TStock.itype = 1
group by itemno ) t
on m.itemno=t.itemno 

<BREAK>

ALTER PROCEDURE [dbo].[GetGSTTaxDetailsHSNCodeWise] 

	@FromDate datetime,
	@ToDate datetime,
	@VchType numeric(18)
	
AS
BEGIN
	Declare @PerTable Table(TempPer numeric(18,2),ColNo numeric(18))
declare @StrQry varchar(max)

 set @StrQry='SELECT   HSNCode,ItemGroupName + ''  ''+MItemMaster.ItemName As Itemname,UOMShortCode +'' - ''+ UOMShortCode as Uomname,
sum(TStock.Quantity) as Quantity, sum(tstock.Amount) as Amount,sum((tstock.Netamount)-(TStock.SGSTAmount+TStock.IGSTAmount+TStock.CessAmount+TStock.CGSTAmount)) as NetAmount,
sum(TStock.IGSTAmount) as IGSTAmount ,sum(TStock.CGSTAmount) as CGSTAmount ,sum(TStock.SGSTAmount) as SGSTAmount,sum(TStock.CessAmount) as CessAmount 
FROM TVoucherEntry AS TVoucherEntry_1 INNER JOIN
TStock ON TVoucherEntry_1.PkVoucherNo = TStock.FKVoucherNo  
inner join MItemMaster on TStock.itemno=MItemMaster.itemno
INNER JOIN MItemGroup on MItemGroup.ItemGroupNo=MItemMaster.groupno
inner join muom on tstock.FkUomNo=muom.uomno
WHERE TVoucherEntry_1.VoucherTypeCode='+cast(@VchType as varchar)+' and  VoucherDate>='''+cast(@FromDate as varchar)+''' and VoucherDate<='''+cast(@ToDate as varchar)+'''
and TVoucherEntry_1.iscancel= 0  group by HSNCode,ItemGroupName,ItemName,UOMShortCode,UOMShortCode

order by HSNCode'

 Exec(@StrQry) 
END

<BREAK>

ALTER PROCEDURE [dbo].[GetSaleVouchEntryDayDtls]
@VchNo int,
@CompNo numeric(18),
@FrDate datetime,
@ToDate datetime,
@Type numeric(18),
@Temp numeric(18)
AS
Declare @TVchNo numeric(18)

if(@VchNo=15)
set @TVchNo=12
else if(@VchNo=115)
set @TVchNo=112
else if(@VchNo=109)
set @TVchNo=113
else if(@VchNo=9)
set @TVchNo=13
else if(@VchNo=12 or @VchNo=13 or @VchNo=113 or @VchNo=112)
begin
set @TVchNo=@VchNo
set @VchNo=-1
end

Begin
if(@Type=1)
Begin

SELECT DISTINCT TVoucherEntry.VoucherDate as Date ,                          
                          (SELECT     LedgerName
                            FROM          MLedger
                            WHERE      (LedgerNo = TVoucherDetails_1.LedgerNo)) AS Party,
			  MVoucherType.VoucherTypeName,
			  (Select count(*)  from TVoucherEntry INNER JOIN
                      TVoucherDetails ON TVoucherEntry.PkVoucherNo = TVoucherDetails.FkVoucherNo
				WHERE (TVoucherEntry.VoucherTypeCode  in (@VchNo)) AND  (TVoucherEntry.VoucherDate >= @FrDate) AND 
				(TVoucherEntry.VoucherDate <=@ToDate) AND (TVoucherDetails.SrNo = 501) And   TVoucherEntry.IsCancel=@Temp )as VoucherNo,
		      TVoucherEntry.VoucherUserNo as BillNo,
					(Select ISNULL(SUM(Debit+Credit), 0) 
                           from TVoucherEntry as TVoucherEntry_1 INNER JOIN
                      TVoucherDetails ON TVoucherEntry_1.PkVoucherNo = TVoucherDetails.FkVoucherNo
                            WHERE      (TVoucherDetails.FKVoucherNo = TVoucherEntry_1.PkVoucherNo) AND (TVoucherDetails.SrNo=501) AND (TVoucherEntry.PayTypeNo  = TVoucherEntry_1.PayTypeNo)
							and TVoucherEntry.IsCancel=@Temp and TVoucherEntry_1.PkVoucherNo=TVoucherEntry.PkVoucherNo) as TotalAmount,
				Case When(TVoucherEntry.MixMode=0) Then MPayType.ShortName Else 'MX' End as Prefix,
				1 AS VchTypeNo 
				FROM    TVoucherEntry INNER JOIN MVoucherType ON TVoucherEntry.VoucherTypeCode = MVoucherType.VoucherTypeCode INNER JOIN
				TVoucherDetails AS TVoucherDetails_1 ON TVoucherEntry.PkVoucherNo = TVoucherDetails_1.FkVoucherNo INNER JOIN
                MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo
				WHERE (TVoucherEntry.VoucherTypeCode in(@VchNo)) AND  (TVoucherEntry.VoucherDate >= @FrDate) AND 
				(TVoucherEntry.VoucherDate <= @ToDate) AND (TVoucherDetails_1.SrNo = 501) and (Select ISNULL(SUM(Debit+Credit), 0) 
                           from TVoucherEntry as TVoucherEntry_1 INNER JOIN
                      TVoucherDetails ON TVoucherEntry_1.PkVoucherNo = TVoucherDetails.FkVoucherNo
                            WHERE      (TVoucherDetails.FKVoucherNo = TVoucherEntry_1.PkVoucherNo) AND (TVoucherDetails.SrNo=501) AND (TVoucherEntry.PayTypeNo  = TVoucherEntry_1.PayTypeNo)
							and TVoucherEntry.IsCancel=@Temp and TVoucherEntry_1.PkVoucherNo=TVoucherEntry.PkVoucherNo)<>0							
union 

SELECT DISTINCT TVoucherEntry.VoucherDate as Date ,                          
                          (SELECT     LedgerName
                            FROM          MLedger
                            WHERE      (LedgerNo = TVoucherDetails_1.LedgerNo)) AS Party,
			  MVoucherType.VoucherTypeName,
			  (Select count(*)  from TVoucherEntry INNER JOIN
                      TVoucherDetails ON TVoucherEntry.PkVoucherNo = TVoucherDetails.FkVoucherNo
				WHERE (TVoucherEntry.VoucherTypeCode  in (@TVchNo)) AND  (TVoucherEntry.VoucherDate >= @FrDate) AND 
				(TVoucherEntry.VoucherDate <=@ToDate) AND (TVoucherDetails.SrNo = 501) And   TVoucherEntry.IsCancel=@Temp )as VoucherNo,
		      TVoucherEntry.VoucherUserNo as BillNo,
					(Select ISNULL(SUM(Debit+Credit), 0) 
                           from TVoucherEntry as TVoucherEntry_1 INNER JOIN
                      TVoucherDetails ON TVoucherEntry_1.PkVoucherNo = TVoucherDetails.FkVoucherNo
                            WHERE      (TVoucherDetails.FKVoucherNo = TVoucherEntry_1.PkVoucherNo) AND (TVoucherDetails.SrNo=501) AND (TVoucherEntry.PayTypeNo  = TVoucherEntry_1.PayTypeNo)
							and TVoucherEntry.IsCancel=@Temp and TVoucherEntry_1.PkVoucherNo=TVoucherEntry.PkVoucherNo)*-1 as TotalAmount,
				Case When(TVoucherEntry.MixMode=0) Then MPayType.ShortName Else 'MX' End as Prefix,
				2 AS VchTypeNo 
				FROM    TVoucherEntry INNER JOIN MVoucherType ON TVoucherEntry.VoucherTypeCode = MVoucherType.VoucherTypeCode INNER JOIN
				TVoucherDetails AS TVoucherDetails_1 ON TVoucherEntry.PkVoucherNo = TVoucherDetails_1.FkVoucherNo INNER JOIN
                MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo
				WHERE (TVoucherEntry.VoucherTypeCode in(@TVchNo)) AND  (TVoucherEntry.VoucherDate >= @FrDate) AND 
				(TVoucherEntry.VoucherDate <= @ToDate) AND (TVoucherDetails_1.SrNo = 501) and (Select ISNULL(SUM(Debit+Credit), 0) 
                           from TVoucherEntry as TVoucherEntry_1 INNER JOIN
                      TVoucherDetails ON TVoucherEntry_1.PkVoucherNo = TVoucherDetails.FkVoucherNo
                            WHERE      (TVoucherDetails.FKVoucherNo = TVoucherEntry_1.PkVoucherNo) AND (TVoucherDetails.SrNo=501) AND (TVoucherEntry.PayTypeNo  = TVoucherEntry_1.PayTypeNo)
							and TVoucherEntry.IsCancel=@Temp and TVoucherEntry_1.PkVoucherNo=TVoucherEntry.PkVoucherNo)*-1<>0
				ORDER BY VchTypeNo,TVoucherEntry.VoucherDate,BillNo

End

if(@Type=2)

Begin
SELECT TVoucherEntry.VoucherDate as Date , '' Party, MVoucherType.VoucherTypeName, 0 as VoucherNo,Count(TVoucherEntry.VoucherDate) as TotalBills,
			  SUM(Debit+Credit) as TotalAmount,'' as Prefix, 1  AS VchTypeNo 
				FROM    TVoucherEntry INNER JOIN MVoucherType ON TVoucherEntry.VoucherTypeCode = MVoucherType.VoucherTypeCode INNER JOIN
				TVoucherDetails AS TVoucherDetails_1 ON TVoucherEntry.PkVoucherNo = TVoucherDetails_1.FkVoucherNo 
				WHERE (TVoucherEntry.VoucherTypeCode in(@VchNo)) AND  (TVoucherEntry.VoucherDate >= @FrDate) AND 
				(TVoucherEntry.VoucherDate <= @ToDate) AND (TVoucherDetails_1.SrNo = 501) AND  TVoucherEntry.IsCancel=@Temp and (Debit+Credit) <>0
                GROUP BY TVoucherEntry.VoucherDate, MVoucherType.VoucherTypeName

union 

SELECT TVoucherEntry.VoucherDate as Date , '' Party, MVoucherType.VoucherTypeName, 0 as VoucherNo, Count(TVoucherEntry.VoucherDate) as TotalBills,
			  SUM(Debit+Credit)*-1 as TotalAmount,'' as Prefix, 2 AS VchTypeNo 
				FROM    TVoucherEntry INNER JOIN MVoucherType ON TVoucherEntry.VoucherTypeCode = MVoucherType.VoucherTypeCode INNER JOIN
				TVoucherDetails AS TVoucherDetails_1 ON TVoucherEntry.PkVoucherNo = TVoucherDetails_1.FkVoucherNo 
				WHERE (TVoucherEntry.VoucherTypeCode in(@TVchNo)) AND  (TVoucherEntry.VoucherDate >= @FrDate) AND 
				(TVoucherEntry.VoucherDate <= @ToDate) AND (TVoucherDetails_1.SrNo = 501) AND  TVoucherEntry.IsCancel=@Temp and (Debit+Credit) <>0
				GROUP BY TVoucherEntry.VoucherDate, MVoucherType.VoucherTypeName

ORDER BY VchTypeNo,Date
end

if(@Type=3)

Begin

SELECT min(TVoucherEntry.VoucherDate) as Date , DateName( month , DateAdd( month , Month(TVoucherEntry.VoucherDate) , 0 ) - 1 ) +' -- '+ 
        Cast(Year(TVoucherEntry.VoucherDate) % 100 as varchar) Party, MVoucherType.VoucherTypeName, 0 as VoucherNo,
        Count(TVoucherEntry.VoucherDate) as TotalBills,  SUM(Debit+Credit) TotalAmount,'' as Prefix, 1 AS VchTypeNo 
				FROM    TVoucherEntry INNER JOIN MVoucherType ON TVoucherEntry.VoucherTypeCode = MVoucherType.VoucherTypeCode INNER JOIN
				TVoucherDetails AS TVoucherDetails_1 ON TVoucherEntry.PkVoucherNo = TVoucherDetails_1.FkVoucherNo 
				WHERE (TVoucherEntry.VoucherTypeCode in(@VchNo)) AND  (TVoucherEntry.VoucherDate >= @FrDate) AND 
				(TVoucherEntry.VoucherDate <= @ToDate) AND (TVoucherDetails_1.SrNo = 501) AND  TVoucherEntry.IsCancel=@Temp  and (Debit+Credit) <>0
                GROUP BY Year(TVoucherEntry.VoucherDate), Month(TVoucherEntry.VoucherDate), MVoucherType.VoucherTypeName

union 

SELECT min(TVoucherEntry.VoucherDate) as Date , DateName( month , DateAdd( month , Month(TVoucherEntry.VoucherDate) , 0 ) - 1 ) +' -- '+ 
        Cast(Year(TVoucherEntry.VoucherDate) % 100 as varchar) Party, MVoucherType.VoucherTypeName, 0 as VoucherNo,
        Count(TVoucherEntry.VoucherDate) as TotalBills,  SUM(Debit+Credit)*-1 TotalAmount,'' as Prefix, 2 AS VchTypeNo 
				FROM    TVoucherEntry INNER JOIN MVoucherType ON TVoucherEntry.VoucherTypeCode = MVoucherType.VoucherTypeCode INNER JOIN
				TVoucherDetails AS TVoucherDetails_1 ON TVoucherEntry.PkVoucherNo = TVoucherDetails_1.FkVoucherNo 
				WHERE (TVoucherEntry.VoucherTypeCode in(@TVchNo)) AND  (TVoucherEntry.VoucherDate >= @FrDate) AND 
				(TVoucherEntry.VoucherDate <= @ToDate) AND (TVoucherDetails_1.SrNo = 501) AND  TVoucherEntry.IsCancel=@Temp and (Debit+Credit) <>0
                GROUP BY Year(TVoucherEntry.VoucherDate), Month(TVoucherEntry.VoucherDate), MVoucherType.VoucherTypeName

ORDER BY VchTypeNo, Date
end

if(@Type=4)

Begin

SELECT '01-01-1900' as Date, 'Quarter-'+Cast(datepart (q, min(TVoucherEntry.VoucherDate)) as varchar) As Party, 
        MVoucherType.VoucherTypeName, 0 as VoucherNo,
        Count(TVoucherEntry.VoucherUserNo) as TotalBills,  SUM(Debit+Credit) TotalAmount,'' as Prefix, 1 AS VchTypeNo 
				FROM    TVoucherEntry INNER JOIN MVoucherType ON TVoucherEntry.VoucherTypeCode = MVoucherType.VoucherTypeCode INNER JOIN
				TVoucherDetails AS TVoucherDetails_1 ON TVoucherEntry.PkVoucherNo = TVoucherDetails_1.FkVoucherNo 
				WHERE (TVoucherEntry.VoucherTypeCode in(@VchNo)) AND  (TVoucherEntry.VoucherDate >= @FrDate) AND 
				(TVoucherEntry.VoucherDate <= @ToDate) AND (TVoucherDetails_1.SrNo = 501) AND  TVoucherEntry.IsCancel=@Temp and (Debit+Credit) <>0
                GROUP BY Year(TVoucherEntry.VoucherDate), datepart (q,TVoucherEntry.VoucherDate), MVoucherType.VoucherTypeName
union 

SELECT '01-01-1900'  as Date, 'Quarter-'+Cast(datepart (q, min(TVoucherEntry.VoucherDate)) as varchar) As Party, 
        MVoucherType.VoucherTypeName, 0 as VoucherNo,
        Count(TVoucherEntry.VoucherDate) as TotalBills,  SUM(Debit+Credit)*-1 TotalAmount,'' as Prefix, 2 AS VchTypeNo 
				FROM    TVoucherEntry INNER JOIN MVoucherType ON TVoucherEntry.VoucherTypeCode = MVoucherType.VoucherTypeCode INNER JOIN
				TVoucherDetails AS TVoucherDetails_1 ON TVoucherEntry.PkVoucherNo = TVoucherDetails_1.FkVoucherNo 
				WHERE (TVoucherEntry.VoucherTypeCode in(@TVchNo)) AND  (TVoucherEntry.VoucherDate >= @FrDate) AND 
				(TVoucherEntry.VoucherDate <= @ToDate) AND (TVoucherDetails_1.SrNo = 501) AND  TVoucherEntry.IsCancel=@Temp and (Debit+Credit) <>0
                GROUP BY Year(TVoucherEntry.VoucherDate),datepart (q,TVoucherEntry.VoucherDate), MVoucherType.VoucherTypeName

order by VchTypeNo, Date, Party
end
End

<BREAK>

ALTER PROCEDURE [dbo].[AddMItemTaxInfo1]
     @PkSrNo                              numeric(18),
     @ItemNo                              numeric(18),
     @TaxLedgerNo                         numeric(18),
	 @SalesLedgerNo						  numeric(18),
     @FromDate                            datetime,
     @CalculationMethod                   varchar(50),
     @Percentage                          numeric(18,2),
     @CompanyNo                           numeric(18),
	 @FKTaxSettingNo					  numeric(18),
     @UserID                              numeric(18),
     @UserDate                            datetime
     --@ModifiedBy                          varchar(50)
AS

IF EXISTS(select PkSrNo from MItemTaxInfo
          where
          PkSrNo = @PkSrNo)
     BEGIN
       --Update existing row
       UPDATE MItemTaxInfo
       SET
          ItemNo = @ItemNo,
          TaxLedgerNo = @TaxLedgerNo,
		  SalesLedgerNo=@SalesLedgerNo,
          FromDate = @FromDate,
          CalculationMethod = @CalculationMethod,
          Percentage = @Percentage,
          CompanyNo = @CompanyNo,
		  FKTaxSettingNo = @FKTaxSettingNo,
          UserID = @UserID,
          UserDate = @UserDate,
          ModifiedBy = isnull(ModifiedBy,'') + cast(@UserID as varchar)+'@'+ CONVERT(VARCHAR(10), GETDATE(), 105),
          StatusNo=2
       WHERE
          PkSrNo = @PkSrNo

     END
ELSE 

	BEGIN
	   --Insert new row
	   Declare @Id numeric
	   SELECT @Id=IsNull(Max(PkSrNo),0) From MItemTaxInfo
	   DBCC CHECKIDENT('MItemTaxInfo', RESEED, @Id)
	   INSERT INTO MItemTaxInfo(
		  ItemNo,
		  TaxLedgerNo,
		  SalesLedgerNo,
		  FromDate,
		  CalculationMethod,
		  Percentage,
		  CompanyNo,
		  FKTaxSettingNo,
		  UserID,
		  UserDate,
          StatusNo
		 -- ModifiedBy
       )
	   VALUES(
		  @ItemNo,
		  @TaxLedgerNo,
		  @SalesLedgerNo,
		  @FromDate,
		  @CalculationMethod,
		  @Percentage,
		  @CompanyNo,
		  @FKTaxSettingNo,
		  @UserID,
		  @UserDate,
          1
		  --@ModifiedBy
       ) 
END

<BREAK>

ALTER PROCEDURE [dbo].[AddMLedgerDetails]
     @LedgerDetailsNo                           numeric(18),
     @LedgerNo                            numeric(18),
     @CreditLimit                         numeric(18,2),
     @CreditDays                          numeric(18),
     @Address                             varchar(300),
     @StateNo                             numeric(18),
     @CityNo                              numeric(18),
     @PinCode                             varchar(100),
     @PhNo1                               varchar(100),
     @PhNo2                               varchar(100),
     @MobileNo1                           varchar(100),
     @MobileNo2                           varchar(100),
     @EmailID                             varchar(100),
     @CustomerType                        numeric(18,0),
     @PANNo                               varchar(100),
     @AccountNo                           varchar(150),
     @ReportName                          varchar(max),
     @UserID                              numeric(18),
     @UserDate                            datetime,
	 @CompanyNo						      numeric(18),
	 @FSSAI								  varchar(100),
	 @AreaNo							  numeric(18),
	 @AddressLang                         nvarchar(500),
     @RateTypeNo						  numeric(18),
     @DiscPer						      numeric(18),
     @DiscRs					      	  numeric(18),
     @AdharNo					          varchar(100),
     @AnyotherNo1					      varchar(100),
     @AnyotherNo2				      	  varchar(100),
     @GSTNo				            	  varchar(100),
     @FSSAIDate                           datetime,
     @GSTDate                             datetime,
	 @Distance							  numeric(18,2)
AS
IF EXISTS(select LedgerDetailsNo from MLedgerDetails
          where
          LedgerDetailsNo = @LedgerDetailsNo)
     BEGIN
       --Update existing row
       UPDATE MLedgerDetails
       SET
          LedgerNo = @LedgerNo,
          CreditLimit=@CreditLimit,
          CreditDays=@CreditDays, 
          Address = @Address,
	      StateNo=@StateNo,
          CityNo = @CityNo,
          PinCode = @PinCode,
          PhNo1 = @PhNo1,
          PhNo2 = @PhNo2,
          MobileNo1 = @MobileNo1,
          MobileNo2 = @MobileNo2,
          EmailID = @EmailID,
          CustomerType = @CustomerType,
          PANNo=@PANNo,
          AccountNo=@AccountNo,
          
         ReportName=@ReportName,
          UserID = @UserID,
          UserDate = @UserDate,
		  CompanyNo = @CompanyNo,
		  FSSAI = @FSSAI,	
	      AreaNo = @AreaNo,
          ModifiedBy =  isnull(ModifiedBy,'') + cast(@UserID as varchar)+'@'+ CONVERT(VARCHAR(10), GETDATE(), 105),
          StatusNo=2,
		  AddressLang=@AddressLang ,
		  RateTypeNo=@RateTypeNo,
		  DiscPer	=@DiscPer,
		  DiscRs	=@DiscRs,
		  AdharCardNo=@AdharNo,
          AnyotherNo1=@AnyotherNo1,
          AnyotherNo2=@AnyotherNo2,
		  GSTNo=@GSTNo,
          FSSAIDate=@FSSAIDate,
		  GSTDate=@GSTDate,
		  Distance = @Distance

       WHERE
          LedgerDetailsNo = @LedgerDetailsNo

     END
ELSE
     BEGIN
       --Insert new row
       Declare @Id numeric
       SELECT @Id=IsNull(Max(LedgerDetailsNo),0) From MLedgerDetails
       DBCC CHECKIDENT('MLedgerDetails', RESEED, @Id)
       INSERT INTO MLedgerDetails(
          LedgerNo,
          CreditLimit,
          CreditDays,
          Address,
		  StateNo,
          CityNo,
          PinCode,
          PhNo1,
          PhNo2,
          MobileNo1,
          MobileNo2,
          EmailID,     
          CustomerType,
          PANNo,
          AccountNo,
          ReportName,      
          UserID,
          UserDate,
          StatusNo,
		  CompanyNo,  
		  FSSAI,
	      AreaNo,
		  AddressLang,
		  RateTypeNo,
		  DiscPer,
		  DiscRs,
          AdharCardNo,
	      AnyotherNo1,
		  AnyotherNo2,
		  GSTNo,
		  FSSAIDate,
		  GSTDate,
		  Distance
)
       VALUES(
          @LedgerNo,
          @CreditLimit,
          @CreditDays,
          @Address,
		  @StateNo,
          @CityNo,
          @PinCode,
          @PhNo1,
          @PhNo2,
          @MobileNo1,
          @MobileNo2,
          @EmailID,
          @CustomerType,
          @PANNo,
          @AccountNo,
          @ReportName,
          @UserID,
          @UserDate,
          1,
		  @CompanyNo,
		  @FSSAI,
	      @AreaNo,
		  @AddressLang,
		  @RateTypeNo,
          @DiscPer,
          @DiscRs,
          @AdharNo,
		  @AnyotherNo1,
		  @AnyotherNo2,
		  @GSTNo,
		  @FSSAIDate,
		  @GSTDate,
		  @Distance
)
END

<BREAK>

ALTER PROCEDURE [dbo].[GetGSTTaxDetailsCess] 
	@FromDate datetime,
	@ToDate datetime,
	@Type numeric(18),
	@VchType numeric(18),
	@DiscLedg varchar(max),
	@ChargesLedg varchar(max),
	@RoundOffLedgNo numeric(18),
	@TaxTypeNo	numeric(18)
AS
BEGIN
	Declare @PerTable Table(TempPer numeric(18,2),ColNo numeric(18))
	Declare @ColName numeric(18,2),@Cnt numeric(18),@DocNo numeric(18),@Date datetime,@Amt numeric(18,2),@Per numeric(18,2),
			@Pk numeric(18),@TotTax numeric(18,2), @TotAmt numeric(18,2),@TotAmt2 numeric(18,2),@TaxToal numeric(18,2),@AmtTotal numeric(18,2),
			@FinalAmount numeric(18,2),@StrQry varchar(max),@TempPer numeric(18,2),@TaxAmt numeric(18,2),@TaxAmt2 numeric(18,2),@TaxAmt3 numeric(18,2),@TaxAmt4 numeric(18,2),@TempDate datetime,@GSTNO varchar(50),@HSNCode varchar(50),@StateName varchar(100),@UomName varchar(50),@ItemNo numeric(18)
	Declare @Month varchar(20),@MNo int ,@TDate datetime ,@Yr int,@FrDate datetime,@TempPk numeric(18),@TempColNo numeric(18),
			@SGSTAmount numeric(18,2),@SGSTAmount2 numeric(18,2),@SGSTAmount3 numeric(18,2),@SGSTAmount4 numeric(18,2),@TempDocNo numeric(18),@Disc numeric(18,2),@Charges numeric(18,2),@RndOff numeric(18,2),@LedgerName varchar(max)
	Declare @TVal Table(DocNo numeric(18),Date datetime,LedgerName varchar(max),GSTNO varchar(50),HSNCode varchar(50),StateName varchar(100),UomName varchar(50), FinalAmt numeric(18,2),Disc numeric(18,2),Charges numeric(18,2),RndOff numeric(18,2),SAmt1 numeric(18,2),TAmt1 numeric(18,2),TCAmt1 numeric(18,2),TIAmt1 numeric(18,2),TCeAmt1 numeric(18,2),
			SAmt2 numeric(18,2),TAmt2 numeric(18,2),TCAmt2 numeric(18,2),TIAmt2 numeric(18,2),TCeAmt2 numeric(18,2),SAmt3 numeric(18,2),TAmt3 numeric(18,2),TCAmt3 numeric(18,2),TIAmt3 numeric(18,2),TCeAmt3 numeric(18,2),SAmt4 numeric(18,2),
			TAmt4 numeric(18,2),TCAmt4 numeric(18,2),TIAmt4 numeric(18,2),TCeAmt4 numeric(18,2),SAmt5 numeric(18,2),TAmt5 numeric(18,2),TIAmt5 numeric(18,2),TCeAmt5 numeric(18,2),TCAmt5 numeric(18,2),TaxToal numeric(18,2),AmtTotal numeric(18,2),ItemNo numeric(18))
	Declare @TDisc Table(LedgNo numeric(18))
	Declare @TChrg Table(LedgNo numeric(18))
	

	set @Cnt=0  set @TempPk=0 set @TaxToal =0 set @AmtTotal =0
    set @Amt=0 set @Per=0 set @TotTax=0 set @TotAmt=0 set @Disc =0 set @Charges =0 set @RndOff =0
	 set @StrQry='' set @FrDate=@FromDate set @TempColNo=0  set @TempDocNo=0 set @TempDate='01-01-1900'



set @StrQry='Select distinct TStock.SGSTPercentage,0 FROM TVoucherEntry INNER JOIN
								  TStock ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
								  WHERE TaxTypeNo= '+Cast(@TaxTypeNo as varchar)+' AND TVoucherEntry.VoucherTypeCode='+cast(@VchType as varchar)+'
			and TVoucherEntry.VoucherDate>='''+cast(@FromDate as varchar)+''' and TVoucherEntry.iscancel= 0 
and TVoucherEntry.VoucherDate<='''+cast(@ToDate as varchar)+''' order by TStock.SGSTPercentage'
--(TStock.SGSTPercentage <> 0) and

insert into @PerTable Exec(@StrQry) --select * from @PerTable

insert into @TDisc Exec('Select LedgerNo From MLedger Where LedgerNo in ('+ @DiscLedg +')')
insert into @TChrg Exec('Select LedgerNo From MLedger Where LedgerNo in ('+ @ChargesLedg +')')

Declare CurCol Cursor for Select TempPer from @PerTable

		open CurCol
		Fetch next from CurCol into @TempPer
		while (@@Fetch_Status=0)
		Begin
			
			
			set @Cnt=@Cnt+1	
			update 	@PerTable set ColNo=@Cnt where 	TempPer=@TempPer
			Fetch next from CurCol into @TempPer
		End
		Close CurCol Deallocate CurCol

select * from @PerTable
set @Cnt=0
------------------------------------------------------------------------------------------------------------------------------------------------------------------
if(@Type =2 )
BEGIN
Declare InsValue Cursor for SELECT     TVoucherEntry_1.VoucherUserNo, TVoucherEntry_1.VoucherDate, TStock.SGSTPercentage, TVoucherEntry_1.PkVoucherNo, 
                      TVoucherEntry_1.BilledAmount, TStock.NetAmount AS SAmt1, TStock.SGSTAmount AS TAmt,TStock.CGSTAmount AS TCAmt,TStock.IGSTAmount AS TIAmt, TStock.CessAmount AS TCeAmt,  (TStock.DiscAmount+TStock.DiscRupees) as Disc,
                          (SELECT     isNull(SUM(CASE WHEN (Debit <> 0) THEN Debit ELSE -Credit END),0) 
                            FROM          TVoucherEntry AS TVoucherEntry_3 INNER JOIN
                                                   TVoucherDetails AS TVoucherDetails_3 ON TVoucherEntry_3.PkVoucherNo = TVoucherDetails_3.FkVoucherNo
                            WHERE      (TVoucherDetails_3.LedgerNo IN
                                                       (@RoundOffLedgNo)) AND (TVoucherDetails_3.FkVoucherNo = TVoucherEntry_1.PkVoucherNo)) ,
HSNCode,TStock.Itemno,
                          (SELECT     isNull(SUM(CASE WHEN (Debit <> 0) THEN Debit ELSE Credit END),0)
                            FROM          TVoucherEntry AS TVoucherEntry_2 INNER JOIN
                                                   TVoucherDetails AS TVoucherDetails_2 ON TVoucherEntry_2.PkVoucherNo = TVoucherDetails_2.FkVoucherNo
                            WHERE      (TVoucherDetails_2.LedgerNo IN
                                                       (SELECT LedgNo FROM @TChrg)) AND (TVoucherDetails_2.FkVoucherNo = TVoucherEntry_1.PkVoucherNo)) 
                     
				FROM TVoucherEntry AS TVoucherEntry_1 INNER JOIN
                     TStock ON TVoucherEntry_1.PkVoucherNo = TStock.FKVoucherNo  inner join MStockItems on TStock.itemno=MStockItems.itemno
 inner join MUOM On Muom.UOMNo=TStock.FkUomNo
				WHERE TVoucherEntry_1.VoucherTypeCode=@VchType	 and TVoucherEntry_1.VoucherDate>=@FromDate and TVoucherEntry_1.VoucherDate<=@ToDate  AND (TVoucherEntry_1.IsCancel = 'false')
					  AND TVoucherEntry_1.TaxTypeNo= @TaxTypeNo --and TVoucherEntry_1.PkVoucherNo=14246
				--Group by TVoucherEntry_1.VoucherUserNo,MStockItems.HSNCode,TVoucherEntry_1.VoucherDate,TStock.SGSTPercentage,TVoucherEntry_1.PkVoucherNo,BilledAmount,TStock.NetAmount,TStock.SGSTAmount,TStock.CGSTAmount,TStock.DiscAmount,TStock.DiscRupees
				order by TVoucherEntry_1.VoucherUserNo,TStock.SGSTPercentage

		open InsValue
		fetch next from InsValue into @DocNo,@Date,@Per,@Pk,@FinalAmount,@Amt,@SGSTAmount,@SGSTAmount2,@SGSTAmount3,@SGSTAmount4,@Disc,@RndOff,@HSNCode,@ItemNo,@Charges
			While(@@Fetch_Status=0)
				Begin
						--Select @LedgerName=LedgerName FRom MLedger Where LedgerNo in(Select LedgerNo From TVoucherDetails Where FKVoucherNo=@Pk AND VoucherSrNo=1)
						Select @LedgerName=LedgerName,@StateName=StateName,@GSTNO=Case When(IsNull(GSTNO,'NA')='') Then '' Else  IsNull(GSTNO,'') end FRom MLedger inner Join MLedgerDetails On MLedger.LedgerNo=MLedgerDetails.LedgerNo inner join MState on MLedgerDetails.Stateno=MState.Stateno Where MLedger.LedgerNo in(Select LedgerNo From TVoucherDetails Where FKVoucherNo=@Pk AND VoucherSrNo=1)
					
							set @TempPk=@Pk
							insert into @TVal (DocNo ,Date ,LedgerName,GSTNO, FinalAmt,Disc ,Charges ,RndOff, HSNCode,StateName,Itemno,SAmt1,TAmt1,TCAmt1,TIAmt1,TCeAmt1,SAmt2,TAmt2,TCAmt2,TIAmt2,TCeAmt2,SAmt3,TAmt3,TCAmt3,TIAmt3,TCeAmt3,SAmt4,TAmt4,TCAmt4,TIAmt4,TCeAmt4,SAmt5,TAmt5,TCAmt5,TIAmt5,TCeAmt5) 
                            Values(@DocNo,@Date,@LedgerName,@GSTNO,@FinalAmount ,@Disc,@Charges,@RndOff,@HSNCode,@StateName,@ItemNo,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
							set @Cnt=@Cnt+1	

						select @TempColNo=ColNo from @PerTable where TempPer=@Per

						if (@TempColNo = 1)
							update @TVal set SAmt1 = @Amt , TAmt1 = @SGSTAmount , TCAmt1 = @SGSTAmount2 , TIAmt1 = @SGSTAmount3, TCeAmt1 = @SGSTAmount4 where DocNo = @DocNo and Itemno=@ItemNo
						if (@TempColNo = 2)
							update @TVal set SAmt2 = @Amt , TAmt2 = @SGSTAmount , TCAmt2 = @SGSTAmount2, TIAmt2 = @SGSTAmount3, TCeAmt2 = @SGSTAmount4  where DocNo = @DocNo and Itemno=@ItemNo
						if (@TempColNo = 3)
							update @TVal set SAmt3 = @Amt , TAmt3 = @SGSTAmount , TCAmt3 = @SGSTAmount2 , TIAmt3 = @SGSTAmount3 , TCeAmt3 = @SGSTAmount4  where DocNo = @DocNo and Itemno=@ItemNo
						if (@TempColNo = 4)
							update @TVal set SAmt4 = @Amt , TAmt4 = @SGSTAmount , TCAmt4 = @SGSTAmount2 , TIAmt4 = @SGSTAmount3, TCeAmt4 = @SGSTAmount4 where DocNo = @DocNo and Itemno=@ItemNo
						if (@TempColNo = 5)
						update @TVal set SAmt5 = @Amt , TAmt5 = @SGSTAmount , TCAmt5 = @SGSTAmount2 , TIAmt5 = @SGSTAmount3 , TCeAmt5 = @SGSTAmount4  where DocNo = @DocNo and Itemno=@ItemNo
						set @TaxToal =@TaxToal+@SGSTAmount+@SGSTAmount2+@SGSTAmount3+@SGSTAmount4
					   set @AmtTotal =@AmtTotal+@Amt
					   set @TempDocNo=@DocNo


--if (@@Fetch_Status=0)
					fetch next from InsValue into @DocNo,@Date,@Per,@Pk,@FinalAmount,@Amt,@SGSTAmount,@SGSTAmount2,@SGSTAmount3,@SGSTAmount4,@Disc,@RndOff,@HSNCode,@ItemNo,@Charges
				End

close InsValue deallocate InsValue
if(@TempPk<>0)
							BEGIN
							update @TVal set TaxToal=@TaxToal,AmtTotal=@AmtTotal where DocNo = @TempDocNo and Itemno=@ItemNo
							set @AmtTotal =0 set @TaxToal =0
							set @TempDocNo=@DocNo
							END
End
------------------------------------------------------------------------------------------------------------------------------------------------------------------
if(@Type =1 )
BEGIN
Declare InsValue Cursor for SELECT    case when @VchType=15 then   TVoucherEntry_1.VoucherUserNo else TVoucherEntry_1.Reference end as VoucherUserNo, TVoucherEntry_1.VoucherDate, TStock.SGSTPercentage, TVoucherEntry_1.PkVoucherNo, 
                      TVoucherEntry_1.BilledAmount, SUM(TStock.NetAmount) AS SAmt, SUM(TStock.SGSTAmount) AS TAmt,SUM(TStock.CGSTAmount) AS TCAmt,SUM(TStock.IGSTAmount) AS TCAmt,SUM(TStock.CessAmount) AS TCAmt,sum(TStock.DiscAmount+TStock.DiscRupees) as Disc,
--                          (SELECT     isNull(SUM(CASE WHEN (Debit <> 0) THEN Debit ELSE Credit END),0) 
--                            FROM          TVoucherEntry INNER JOIN
--                                                   TVoucherDetails ON TVoucherEntry.PkVoucherNo = TVoucherDetails.FkVoucherNo
--                            WHERE      (TVoucherDetails.LedgerNo IN
--                                                       (SELECT LedgNo FROM @TDisc )) AND (TVoucherDetails.FkVoucherNo = TVoucherEntry_1.PkVoucherNo)) ,
                        
                          (SELECT     isNull(SUM(CASE WHEN (Debit <> 0) THEN Debit ELSE -Credit END),0) 
                            FROM          TVoucherEntry AS TVoucherEntry_3 INNER JOIN
                                                   TVoucherDetails AS TVoucherDetails_3 ON TVoucherEntry_3.PkVoucherNo = TVoucherDetails_3.FkVoucherNo
                            WHERE      (TVoucherDetails_3.LedgerNo IN
                                                       (@RoundOffLedgNo)) AND (TVoucherDetails_3.FkVoucherNo = TVoucherEntry_1.PkVoucherNo)) ,
                          (SELECT     isNull(SUM(CASE WHEN (Debit <> 0) THEN Debit ELSE Credit END),0)
                            FROM          TVoucherEntry AS TVoucherEntry_2 INNER JOIN
                                                   TVoucherDetails AS TVoucherDetails_2 ON TVoucherEntry_2.PkVoucherNo = TVoucherDetails_2.FkVoucherNo
                            WHERE      (TVoucherDetails_2.LedgerNo IN
                                                       (SELECT LedgNo FROM @TChrg)) AND (TVoucherDetails_2.FkVoucherNo = TVoucherEntry_1.PkVoucherNo)) 
                     
				FROM TVoucherEntry AS TVoucherEntry_1 INNER JOIN
                     TStock ON TVoucherEntry_1.PkVoucherNo = TStock.FKVoucherNo 
				WHERE TVoucherEntry_1.VoucherTypeCode=@VchType	 and TVoucherEntry_1.VoucherDate>=@FromDate and TVoucherEntry_1.VoucherDate<=@ToDate  AND (TVoucherEntry_1.IsCancel = 'false')
					  AND TVoucherEntry_1.TaxTypeNo= @TaxTypeNo
				Group by TVoucherEntry_1.VoucherUserNo,Reference,TVoucherEntry_1.VoucherDate,TStock.SGSTPercentage,TVoucherEntry_1.PkVoucherNo,BilledAmount
				order by TVoucherEntry_1.VoucherUserNo,TStock.SGSTPercentage

		open InsValue
		fetch next from InsValue into @DocNo,@Date,@Per,@Pk,@FinalAmount,@Amt,@SGSTAmount,@SGSTAmount2,@SGSTAmount3,@SGSTAmount4,@Disc,@RndOff,@Charges
			While(@@Fetch_Status=0)
				Begin
						--Select @LedgerName=LedgerName FRom MLedger Where LedgerNo in(Select LedgerNo From TVoucherDetails Where FKVoucherNo=@Pk AND VoucherSrNo=1)
						Select @LedgerName=LedgerName,@GSTNO=Case When(IsNull(GSTNO,'NA')='') Then '' Else  IsNull(GSTNO,'') end FRom MLedger inner Join MLedgerDetails On MLedger.LedgerNo=MLedgerDetails.LedgerNo Where MLedger.LedgerNo in(Select LedgerNo From TVoucherDetails Where FKVoucherNo=@Pk AND VoucherSrNo=1)
					
                    if(@TempPk<>@Pk)
						BEgin
							if(@TempPk<>0)
							BEGIN								
							update @TVal set TaxToal=@TaxToal,AmtTotal=@AmtTotal where DocNo = @TempDocNo							
							set @AmtTotal =0 set @TaxToal =0
							set @TempDocNo=@DocNo
							END
--							if(@Cnt>2000)
--							BEGIn
--								Select * from @TVal
--								Delete from @TVal
--								set @Cnt=0
--							END
							set @TempPk=@Pk
							insert into @TVal (DocNo ,Date ,LedgerName,GSTNO, FinalAmt,Disc ,Charges ,RndOff ,SAmt1,TAmt1,TCAmt1,TIAmt1,TCeAmt1,SAmt2,TAmt2,TCAmt2,TIAmt2,TCeAmt2,SAmt3,TAmt3,TCAmt3,TIAmt3,TCeAmt3,SAmt4,TAmt4,TCAmt4,TIAmt4,TCeAmt4,SAmt5,TAmt5,TCAmt5,TIAmt5,TCeAmt5) 
                            Values(@DocNo,@Date,@LedgerName,@GSTNO,@FinalAmount ,@Disc,@Charges,@RndOff,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
							set @Cnt=@Cnt+1	
						End
						select @TempColNo=ColNo from @PerTable where TempPer=@Per

						if (@TempColNo = 1)
							update @TVal set SAmt1 = @Amt , TAmt1 = @SGSTAmount , TCAmt1 = @SGSTAmount2 , TIAmt1 = @SGSTAmount3, TCeAmt1 = @SGSTAmount4 where DocNo = @DocNo
						if (@TempColNo = 2)
							update @TVal set SAmt2 = @Amt , TAmt2 = @SGSTAmount , TCAmt2 = @SGSTAmount2 , TIAmt2 = @SGSTAmount3, TCeAmt2 = @SGSTAmount4 where DocNo = @DocNo
						if (@TempColNo = 3)
							update @TVal set SAmt3 = @Amt , TAmt3 = @SGSTAmount , TCAmt3 = @SGSTAmount2 , TIAmt3 = @SGSTAmount3 , TCeAmt3 = @SGSTAmount4 where DocNo = @DocNo
						if (@TempColNo = 4)
							update @TVal set SAmt4 = @Amt , TAmt4 = @SGSTAmount , TCAmt4 = @SGSTAmount2 , TIAmt4 = @SGSTAmount3, TCeAmt4 = @SGSTAmount4 where DocNo = @DocNo
						if (@TempColNo = 5)
							update @TVal set SAmt5 = @Amt , TAmt5 = @SGSTAmount , TCAmt5 = @SGSTAmount2 , TIAmt5 = @SGSTAmount3 , TCeAmt5 = @SGSTAmount4 where DocNo = @DocNo
						set @TaxToal =@TaxToal+@SGSTAmount+@SGSTAmount2+@SGSTAmount3+@SGSTAmount4
						set @AmtTotal =@AmtTotal+@Amt
						set @TempDocNo=@DocNo
					fetch next from InsValue into @DocNo,@Date,@Per,@Pk,@FinalAmount,@Amt,@SGSTAmount,@SGSTAmount2,@SGSTAmount3,@SGSTAmount4,@Disc,@RndOff,@Charges
				End

close InsValue deallocate InsValue
if(@TempPk<>0)
							BEGIN
							update @TVal set TaxToal=@TaxToal,AmtTotal=@AmtTotal where DocNo = @TempDocNo
							set @AmtTotal =0 set @TaxToal =0
							set @TempDocNo=@DocNo
							END
End
--------------------------------------------------------------------------------------------------------------------------------------------------------------
if(@Type=3)
Begin
	Declare InsValue Cursor for SELECT     Count(TVoucherEntry_1.PkVoucherNo) as DocNo, TVoucherEntry_1.VoucherDate, -1 as SGSTPercentage,
                      SUM(TVoucherEntry_1.BilledAmount) AS SAmt, 0 as  TAmt,
                          (SELECT     isNull(SUM(CASE WHEN (Debit <> 0) THEN Debit ELSE Credit END),0) 
                            FROM          TVoucherEntry INNER JOIN
                                                   TVoucherDetails ON TVoucherEntry.PkVoucherNo = TVoucherDetails.FkVoucherNo
                            WHERE      (TVoucherDetails.LedgerNo IN
                                                       (SELECT LedgNo FROM @TDisc)) AND (TVoucherEntry.VoucherDate=TVoucherEntry_1.VoucherDate) AND (TVoucherEntry.VoucherTypeCode=@VchType)) as Disc,
                          (SELECT     isNull(SUM(CASE WHEN (Debit <> 0) THEN Debit ELSE -Credit END),0) 
                            FROM          TVoucherEntry AS TVoucherEntry_3 INNER JOIN
                                                   TVoucherDetails AS TVoucherDetails_3 ON TVoucherEntry_3.PkVoucherNo = TVoucherDetails_3.FkVoucherNo
                            WHERE      (TVoucherDetails_3.LedgerNo IN
                                                       (@RoundOffLedgNo)) AND (TVoucherEntry_3.VoucherDate=TVoucherEntry_1.VoucherDate) AND (TVoucherEntry_3.VoucherTypeCode=@VchType)) as RndOff,
                          (SELECT     isNull(SUM(CASE WHEN (Debit <> 0) THEN Debit ELSE Credit END),0)
							 FROM  TVoucherEntry AS TVoucherEntry_2 INNER JOIN TVoucherDetails AS TVoucherDetails_2 ON TVoucherEntry_2.PkVoucherNo = TVoucherDetails_2.FkVoucherNo
                            WHERE      (TVoucherDetails_2.LedgerNo IN (SELECT LedgNo FROM @TChrg)) AND (TVoucherEntry_2.VoucherDate=TVoucherEntry_1.VoucherDate) AND (TVoucherEntry_2.VoucherTypeCode=@VchType)) as Charges
                     
			FROM         TVoucherEntry AS TVoucherEntry_1 
								 WHERE      TVoucherEntry_1.VoucherTypeCode=@VchType	 and TVoucherEntry_1.VoucherDate>=@FromDate and TVoucherEntry_1.VoucherDate<=@ToDate AND (TVoucherEntry_1.IsCancel = 'false')
										AND TVoucherEntry_1.TaxTypeNo= @TaxTypeNo
								Group by TVoucherEntry_1.VoucherDate					
			Union all
			SELECT     0 as DocNo,TVoucherEntry_1.VoucherDate, TStock.SGSTPercentage,SUM(TStock.NetAmount) AS SAmt, SUM(TStock.SGSTAmount) AS TAmt,
									   0 as Disc ,0 as RndOff ,0 as Charges                     
			FROM         TVoucherEntry AS TVoucherEntry_1 INNER JOIN
								  TStock ON TVoucherEntry_1.PkVoucherNo = TStock.FKVoucherNo 
								 WHERE      TVoucherEntry_1.VoucherTypeCode=@VchType	 and TVoucherEntry_1.VoucherDate>=@FromDate and TVoucherEntry_1.VoucherDate<=@ToDate  AND (TVoucherEntry_1.IsCancel = 'false')
										AND TVoucherEntry_1.TaxTypeNo= @TaxTypeNo
								Group by TVoucherEntry_1.VoucherDate,TStock.SGSTPercentage
			order by VoucherDate,SGSTPercentage
		open InsValue
		fetch next from InsValue into @DocNo,@Date,@Per,@Amt,@SGSTAmount,@Disc,@RndOff,@Charges
			While(@@Fetch_Status=0)
			Begin
				if(@Per=-1)
				Begin
					if(@TempDate<>'01-01-1900')
					Begin
						update @TVal set TaxToal=@TaxToal,AmtTotal=@AmtTotal where Date = @TempDate
						set @AmtTotal =0 set @TaxToal =0 set @TempDate=@Date					
					End
					insert into @TVal (DocNo ,Date ,LedgerName,FinalAmt,Disc ,Charges ,RndOff ,SAmt1,TAmt1,SAmt2,TAmt2,SAmt3,TAmt3,SAmt4,TAmt4,SAmt5,TAmt5) 
                            Values(@DocNo,@Date,@LedgerName,@Amt,@Disc,@Charges,@RndOff,0,0,0,0,0,0,0,0,0,0 )
				End
				Else
				Begin
					select @TempColNo=ColNo from @PerTable where TempPer=@Per
						if (@TempColNo = 1)
							update @TVal set SAmt1 = @Amt , TAmt1 = @SGSTAmount where Date = @Date
						if (@TempColNo = 2)
							update @TVal set SAmt2 = @Amt , TAmt2 = @SGSTAmount where Date = @Date
						if (@TempColNo = 3)
							update @TVal set SAmt3 = @Amt , TAmt3 = @SGSTAmount where Date = @Date
						if (@TempColNo = 4)
							update @TVal set SAmt4 = @Amt , TAmt4 = @SGSTAmount where Date = @Date
						if (@TempColNo = 5)
							update @TVal set SAmt5 = @Amt , TAmt5 = @SGSTAmount where Date = @Date
						set @TaxToal =@TaxToal+@SGSTAmount
						set @AmtTotal =@AmtTotal+@Amt
						set @TempDocNo=@DocNo
						set @TempDate=@Date
				
				End
				fetch next from InsValue into @DocNo,@Date,@Per,@Amt,@SGSTAmount,@Disc,@RndOff,@Charges
			End
close InsValue deallocate InsValue
if(@TempDate<>'01-01-1900')
					Begin
						update @TVal set TaxToal=@TaxToal,AmtTotal=@AmtTotal where Date = @TempDate
						set @AmtTotal =0 set @TaxToal =0 set @TempDate=@Date					
					End		

End
------------------------------------------------------------------------------------------------------------------------------------------------------------------
if(@Type=3)
Begin
	Begin
			if((Select Count(*) from @PerTable)=1)			
			select 'Quarter-'+Cast(datepart (q,Date) as varchar) as 'Quarter',Sum(cast (DocNo as numeric)) as 'TotalBills', sum(FinalAmt) as 'FinalAmt' ,sum(Disc) as 'Disc',sum(Charges) as 'Charges',sum(RndOff) as 'RndOff',sum(SAmt1) as 'SAmt1',sum(TAmt1) as 'TAmt1',sum(AmtTotal)as 'AmtTotal' ,sum(TaxToal) as 'TaxToal' from @TVal Group BY datepart (q,Date)
			if((Select Count(*) from @PerTable)=2)
			select 'Quarter-'+Cast(datepart (q,Date) as varchar) as 'Quarter',Sum(cast (DocNo as numeric)) as 'TotalBills', sum(FinalAmt) as 'FinalAmt' ,sum(Disc) as 'Disc',sum(Charges) as 'Charges',sum(RndOff) as 'RndOff',sum(SAmt1) as 'SAmt1',sum(TAmt1) as 'TAmt1',Sum(SAmt2) as 'SAmt2',sum(TAmt2) as 'TAmt2',sum(AmtTotal)as 'AmtTotal' ,sum(TaxToal) as 'TaxToal'  from @TVal Group BY datepart (q,Date)
			if((Select Count(*) from @PerTable)=3)
			select 'Quarter-'+Cast(datepart (q,Date) as varchar) as 'Quarter',Sum(cast (DocNo as numeric)) as 'TotalBills', sum(FinalAmt) as 'FinalAmt' ,sum(Disc) as 'Disc',sum(Charges) as 'Charges',sum(RndOff) as 'RndOff',sum(SAmt1) as 'SAmt1',sum(TAmt1) as 'TAmt1',Sum(SAmt2) as 'SAmt2',sum(TAmt2) as 'TAmt2' ,Sum(SAmt3) as 'SAmt3',sum(TAmt3) as 'TAmt3' ,sum(AmtTotal)as 'AmtTotal' ,sum(TaxToal) as 'TaxToal' from @TVal Group BY datepart (q,Date)
			if((Select Count(*) from @PerTable)=4)
			select 'Quarter-'+Cast(datepart (q,Date) as varchar) as 'Quarter',Sum(cast (DocNo as numeric)) as 'TotalBills', sum(FinalAmt) as 'FinalAmt' ,sum(Disc) as 'Disc',sum(Charges) as 'Charges',sum(RndOff) as 'RndOff',sum(SAmt1) as 'SAmt1',sum(TAmt1) as 'TAmt1',Sum(SAmt2) as 'SAmt2',sum(TAmt2) as 'TAmt2' ,Sum(SAmt3) as 'SAmt3',sum(TAmt3) as 'TAmt3',Sum(SAmt4) as 'SAmt4',sum(TAmt4) as 'TAmt4'  ,sum(AmtTotal)as 'AmtTotal' ,sum(TaxToal) as 'TaxToal' from @TVal Group BY datepart (q,Date)
			if((Select Count(*) from @PerTable)=5)
			select 'Quarter-'+Cast(datepart (q,Date) as varchar) as 'Quarter',Sum(cast (DocNo as numeric)) as 'TotalBills', sum(FinalAmt) as 'FinalAmt' ,sum(Disc) as 'Disc',sum(Charges) as 'Charges',sum(RndOff) as 'RndOff',sum(SAmt1) as 'SAmt1',sum(TAmt1) as 'TAmt1',Sum(SAmt2) as 'SAmt2',sum(TAmt2) as 'TAmt2' ,Sum(SAmt3) as 'SAmt3',sum(TAmt3) as 'TAmt3',Sum(SAmt4) as 'SAmt4',sum(TAmt4) as 'TAmt4',Sum(SAmt5) as 'SAmt5',sum(TAmt5) as 'TAmt5' ,sum(AmtTotal)as 'AmtTotal' ,sum(TaxToal) as 'TaxToal'  from @TVal  Group BY datepart (q,Date)
	End
End
---------------------------------------------------------------------------------------------------------------------------------------------------------
Else
Begin
	if(@Type=1 or @Type=2 )
	Begin
		
		if((Select Count(*) from @PerTable)=1)
		select Date,DocNo ,LedgerName,GSTNO, FinalAmt ,Disc ,Charges ,RndOff,SAmt1 ,TAmt1,TCAmt1,TIAmt1,TCeAmt1,AmtTotal ,TaxToal from @TVal
		union All select null as Date, null as DocNo ,null,null, sum(FinalAmt) ,sum(Disc) ,sum(Charges) ,sum(RndOff),sum(SAmt1) ,sum(TAmt1),sum(TCAmt1),sum(TIAmt1),sum(TCeAmt1),sum(AmtTotal) ,sum(TaxToal) from @TVal
		if((Select Count(*) from @PerTable)=2)
		select Date,DocNo  ,LedgerName,GSTNO, FinalAmt ,Disc ,Charges ,RndOff,SAmt1 ,TAmt1,TCAmt1,TIAmt1,TCeAmt1,SAmt2 ,TAmt2,TCAmt2,TIAmt2 ,TCeAmt2 ,AmtTotal,TaxToal  from @TVal
		union All select null as Date, null as DocNo ,null,null, sum(FinalAmt) ,sum(Disc) ,sum(Charges) ,sum(RndOff),sum(SAmt1) ,sum(TAmt1),sum(TCAmt1),sum(TIAmt1),sum(TCeAmt1),sum(SAmt2) ,sum(TAmt2),sum(TCAmt2),sum(TIAmt2),sum(TCeAmt2),sum(AmtTotal) ,sum(TaxToal) from @TVal
		if((Select Count(*) from @PerTable)=3)
		select Date,DocNo  ,LedgerName,GSTNO, FinalAmt ,Disc ,Charges ,RndOff,SAmt1 as AMT ,TAmt1 as SGST,TCAmt1 as CGST,TIAmt1 as IGST,TCeAmt1 as Cess,SAmt2 as AMT ,TAmt2 as SGST,TCAmt2 as CGST,TIAmt2 as IGST ,TCeAmt2 as Cess  ,SAmt3 as AMT ,TAmt3 as SGST ,TCAmt3 as CGST,TIAmt3 as IGST,TCeAmt3 as Cess,AmtTotal,TaxToal  from @TVal
		union All select null as Date, null as DocNo ,null, null,sum(FinalAmt) ,sum(Disc) ,sum(Charges) ,sum(RndOff),sum(SAmt1) as AMT ,sum(TAmt1) as SGST,sum(TCAmt1) as CGST,sum(TIAmt1) as IGST,sum(TCeAmt1) as Cess,sum(SAmt2) ,sum(TAmt2),sum(TCAmt2),sum(TIAmt2),sum(TCeAmt2),sum(SAmt3) ,sum(TAmt3),sum(TCAmt3),sum(TIAmt3),sum(TCeAmt3),sum(AmtTotal) ,sum(TaxToal) from @TVal
		if((Select Count(*) from @PerTable)=4)
		--select Date,DocNo  , LedgerName,FinalAmt ,Disc ,Charges ,RndOff,SAmt1 ,TAmt1,SAmt2 ,TAmt2 ,SAmt3 ,TAmt3 ,SAmt4 ,TAmt4  ,AmtTotal,TaxToal from @TVal
		--union All select null as Date, null as DocNo ,null, sum(FinalAmt) ,sum(Disc) ,sum(Charges) ,sum(RndOff),sum(SAmt1) ,sum(TAmt1),sum(SAmt2) ,sum(TAmt2),sum(SAmt3) ,sum(TAmt3),sum(SAmt4) ,sum(TAmt4),sum(AmtTotal) ,sum(TaxToal) from @TVal
		select Date,DocNo  ,LedgerName,GSTNO, FinalAmt ,Disc ,Charges ,RndOff,SAmt1 ,TAmt1,TCAmt1,TIAmt1,TCeAmt1,SAmt2 ,TAmt2,TCAmt2,TIAmt2 ,TCeAmt2  ,SAmt3 ,TAmt3 ,TCAmt3,TIAmt3,TCeAmt3,SAmt4 ,TAmt4 ,TCAmt4,TIAmt4,TCeAmt4,AmtTotal,TaxToal  from @TVal
		union All select null as Date, null as DocNo ,null,null, sum(FinalAmt) ,sum(Disc) ,sum(Charges) ,sum(RndOff),sum(SAmt1) ,sum(TAmt1),sum(TCAmt1),sum(TIAmt1),sum(TCeAmt1),sum(SAmt2) ,sum(TAmt2),sum(TCAmt2),sum(TIAmt2),sum(TCeAmt2),sum(SAmt3) ,sum(TAmt3),sum(TCAmt3),sum(TIAmt3),sum(TCeAmt3),sum(SAmt4) ,sum(TAmt4),sum(TCAmt4),sum(TIAmt4),sum(TCeAmt4),sum(AmtTotal) ,sum(TaxToal) from @TVal
		if((Select Count(*) from @PerTable)=5)
		select Date,DocNo  ,LedgerName, GSTNO,FinalAmt ,Disc ,Charges ,RndOff,SAmt1 ,TAmt1,TCAmt1,TIAmt1,TCeAmt1,SAmt2 ,TAmt2,TCAmt2,TIAmt2 ,TCeAmt2  ,SAmt3 ,TAmt3 ,TCAmt3,TIAmt3,TCeAmt3,SAmt4 ,TAmt4 ,TCAmt4,TIAmt4,TCeAmt4,SAmt5 ,TAmt5 ,TCAmt5,TIAmt5,TCeAmt5,AmtTotal,TaxToal  from @TVal
		union All select null as Date, null as DocNo ,null, null,sum(FinalAmt) ,sum(Disc) ,sum(Charges) ,sum(RndOff),sum(SAmt1) ,sum(TAmt1),sum(TCAmt1),sum(TIAmt1),sum(TCeAmt1),sum(SAmt2) ,sum(TAmt2),sum(TCAmt2),sum(TIAmt2),sum(TCeAmt2),sum(SAmt3) ,sum(TAmt3),sum(TCAmt3),sum(TIAmt3),sum(TCeAmt3),sum(SAmt4) ,sum(TAmt4),sum(TCAmt4),sum(TIAmt4),sum(TCeAmt4),sum(SAmt5) ,sum(TAmt5),sum(TCAmt5),sum(TIAmt5),sum(TCeAmt5),sum(AmtTotal) ,sum(TaxToal) from @TVal
	End
  End	
END

<BREAK>

Alter PROCEDURE [dbo].[GetItemClosingStockByDate]
@MonthNo int,
@CompNo numeric(18),
@FrDate datetime,
@ToDate datetime,	
@ItemNo numeric(18)
AS
BEGIN
	SELECT  Distinct   CONVERT(varchar(11), TVoucherEntry.VoucherDate, 105) AS VoucherDate, TVoucherEntry.VoucherUserNo AS VoucherSrNo , MLedger.LedgerName AS Particulars, MVoucherType.VoucherTypeName, TVoucherEntry.PKVoucherNo, 
             case when  TStock.trncode=1 then sum(abs(TStock.BilledQuantity+TStock.FreeQty)) else 0 end as [Inward Quantity], case when  TStock.trncode=2 then sum(abs(TStock.BilledQuantity+TStock.FreeQty)) else 0 end AS [Outward Quantity]
    FROM        TVoucherEntry INNER JOIN
                      --TVoucherDetails ON TVoucherEntry.PKVoucherNo = TVoucherDetails.FKVoucherNo INNER JOIN
                      MLedger ON TVoucherEntry.LedgerNo = MLedger.LedgerNo INNER JOIN
                      MVoucherType ON TVoucherEntry.VoucherTypeCode = MVoucherType.VoucherTypeCode INNER JOIN
                      TStock ON TVoucherEntry.PkVoucherNo  = TStock.FkVoucherTrnNo
WHERE   --  (TVoucherDetails.VoucherSrNo = 1) AND 
(TStock.ItemNo = @ItemNo) and (month(TVoucherEntry.VoucherDate)= @MonthNo)
		And (TVoucherEntry.CompanyNo = @CompNo) And	(TVoucherEntry.VoucherDate >= @FrDate) And (TVoucherEntry.VoucherDate <= @ToDate)  and TVoucherEntry.IsCancel='false'
Group by TVoucherEntry.VoucherDate,TVoucherEntry.VoucherUserNo,MLedger.LedgerName,MVoucherType.VoucherTypeName, TVoucherEntry.PKVoucherNo,
TStock.trncode

Union
SELECT DISTINCT 
                      CONVERT(varchar(11), TVoucherEntry.VoucherDate, 105) AS VoucherDate, TVoucherEntry.VoucherUserNo AS VoucherSrNo,MVoucherType.VoucherTypeName AS Particulars, MVoucherType.VoucherTypeName, TVoucherEntry.PKVoucherNo, 
                      CASE WHEN TStock.trncode = 1 THEN sum(abs(TStock.BilledQuantity+TStock.FreeQty)) ELSE 0 END AS [Inward Quantity], 
                      CASE WHEN TStock.trncode = 2 THEN sum(abs(TStock.BilledQuantity+TStock.FreeQty)) ELSE 0 END AS [Outward Quantity]
FROM           TStock INNER JOIN
                      TVoucherEntry INNER JOIN
                      MVoucherType ON TVoucherEntry.VoucherTypeCode = MVoucherType.VoucherTypeCode ON TStock.FKVoucherNo = TVoucherEntry.PkVoucherNo
WHERE     (TStock.ItemNo = @ItemNo) and (month(TVoucherEntry.VoucherDate)= @MonthNo)
		And (TVoucherEntry.CompanyNo = @CompNo) And	(TVoucherEntry.VoucherDate >= @FrDate) And (TVoucherEntry.VoucherDate <= @ToDate) AND (TVoucherEntry.VoucherTypeCode in(23,24,8,32,19))  and TVoucherEntry.IsCancel='false'
	Group by TVoucherEntry.VoucherDate,TVoucherEntry.VoucherUserNo,TVoucherEntry.VoucherTypeCode,MVoucherType.VoucherTypeName, TVoucherEntry.PKVoucherNo,
TStock.trncode
	
END

<BREAK>

ALTER FUNCTION [dbo].[GetOpeningStock]
	(
	@CompNo		numeric(18),
	@FromDate	datetime,
	@ItemNo		numeric(18),
	@Type		int,
	@No			numeric(18)
	)
RETURNS @TStockBal Table(OpQty numeric(18,2),OpAmt numeric(18,2))
AS
	BEGIN
	Declare @OpAmt numeric(18,2),@OpQty numeric(18,2),@DrAmt numeric(18,2),@DrQty numeric(18,2)
Declare @CrAmt numeric(18,2),@CrQty numeric(18,2),@ClosingQty numeric(18,2),@CategoryNo numeric(18,2)
Declare @Rate numeric(18,2),@BalAmt numeric(18,2)
Declare @OpDt datetime,@TrnDr int,@TrnCr int
Declare @VType int,@VNo numeric(18)--@IsJobWork int,@JobWorkCo numeric(18),
Declare @DAmt numeric(18,2),@DQty Numeric(18,2),@CAmt numeric(18,2),@CQty Numeric(18,2)
Declare @Cnt int
set @VType=0 set @VNo=0--set @IsJobWork=0 set @JobWorkCo=0 
set @Cnt=0
	set @ClosingQty = 0 set @BalAmt = 0
set @DrQty=0 set @DrAmt=0 set @CrQty = 0 set @CrAmt = 0
set @TrnDr = 1 set @TrnCr = 2

if(@Type =0)--Stock Summary
begin
	
	select @OpDt=BooksBeginFrom from Mfirm
	set @OpDt=0
	

	set @OpAmt =0 set @OpQty=0
	if(@FromDate <= @OpDt)
	begin
	
	insert into @TStockBal values(@OpQty,@OpAmt)
	set @Cnt=1
	end
	else
	begin
		Declare CurDr Cursor For 	
		SELECT     isnull(TStock.Amount,0), isNull(abs(TStock.BilledQuantity),0)--isnull(abs(TStock.Quantity),0)+isnull(abs(TStock.FreeQty),0)
					,TVoucherEntry.VoucherTypeCode,TVoucherEntry.PKVoucherNo--@DrAmt=isnull(SUM(TStock.Amount),0) , @DrQty=isnull(SUM(TStock.Quantity) ,0)
		From TVoucherEntry INNER JOIN
                      TStock ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo

		WHERE     (TStock.ItemNo = @ItemNo) AND (TStock.TrnCode = @TrnDr) AND 
			(TVoucherEntry.VoucherDate >= @OpDt) AND 
                      (TVoucherEntry.VoucherDate <= DateAdd(d,-1,@FromDate)) and TVoucherEntry.IsCancel='false'
                      
		Declare CurCr Cursor For
		SELECT     isnull(TStock.Amount,0),isNull(abs(TStock.BilledQuantity),0)-- isnull(TStock.Quantity,0)+isnull(TStock.FreeQty,0)
			,TVoucherEntry.VoucherTypeCode,TVoucherEntry.PKVoucherNo--@CrAmt=isnull(SUM(TStock.Amount),0) , @CrQty=isnull(SUM(TStock.Quantity),0) 
		FROM   TVoucherEntry INNER JOIN
                      TStock ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo

		WHERE     (TStock.ItemNo = @ItemNo) AND (TStock.TrnCode = @TrnCr)  AND 
		(TVoucherEntry.VoucherDate >= @OpDt) AND 
        (TVoucherEntry.VoucherDate <= DateAdd(d,-1,@FromDate)) and TVoucherEntry.IsCancel='false'
            
     
	insert into @TStockBal values(@ClosingQty,@BalAmt)
	end
end
--===============================================================================================================
else if(@Type = 1)--Godownwise Stock
begin	
	select @OpDt=BooksBeginFrom from Mfirm

	set @OpAmt=0 set @OpQty=0
	if(@FromDate <= @OpDt)
	begin
	
	insert into @TStockBal values(@OpQty,@OpAmt)
	set @Cnt=1
	end
	else
	begin
		Declare CurDr Cursor For 	
		SELECT     isnull(TStock.Amount,0), isnull(abs(TStockGodown.Qty),0),TVoucherEntry.VoucherTypeCode,TVoucherEntry.PKVoucherNo-- @DrAmt=isnull(SUM(TStock.Amount),0) , @DrQty=isnull(SUM(TStock.Quantity) ,0)
		FROM  TVoucherEntry INNER JOIN
                      TStock ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo

					  INNER JOIN TStockGodown ON TStock.PkStockTrnNo = TStockGodown.FKStockTrnNo
		WHERE     (TStock.ItemNo = @ItemNo) AND (TStock.TrnCode = @TrnDr)  AND 
			(TVoucherEntry.VoucherDate >= @OpDt) AND 
                        (TVoucherEntry.VoucherDate <= DateAdd(d,-1,@FromDate)) And TStockGodown.GodownNo=@No and TVoucherEntry.IsCancel='false'
 
		Declare CurCr Cursor For
		SELECT     isnull(TStock.Amount,0), isnull(TStockGodown.Qty,0),TVoucherEntry.VoucherTypeCode,TVoucherEntry.PKVoucherNo--     @CrAmt=isnull(SUM(TStock.Amount),0) , @CrQty=isnull(SUM(TStock.Quantity),0) 
		FROM        TVoucherEntry INNER JOIN
                      TStock ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
 INNER JOIN
                      TStockGodown ON TStock.PkStockTrnNo = TStockGodown.FKStockTrnNo
		WHERE     (TStock.ItemNo = @ItemNo) AND (TStock.TrnCode = @TrnCr) AND 
			(TVoucherEntry.VoucherDate >= @OpDt) AND 
                        (TVoucherEntry.VoucherDate <= DateAdd(d,-1,@FromDate)) And TStockGodown.GodownNo=@No and TVoucherEntry.IsCancel='false'
            
     
	insert into @TStockBal values(@ClosingQty,@BalAmt)
	end
end	
--===============================================================================================================
else if(@Type = 3)--Categorywise Stock Details
begin
	select @OpDt=BooksBeginFrom from Mfirm
	set @OpAmt=0 set @OpQty=0
	if(@FromDate <= @OpDt)
	begin	
	insert into @TStockBal values(@OpQty,@OpAmt)
	set @Cnt=1
	end
	else
	begin
		
		Declare CurDr Cursor For 	
		SELECT     isnull(TStock.Amount,0),  isNull(abs(TStock.BilledQuantity),0)--isnull(abs(TStock.Quantity),0)+isnull(abs(TStock.FreeQty),0)
			,TVoucherEntry.VoucherTypeCode,TVoucherEntry.PKVoucherNo--     @DrAmt=isnull(SUM(TStock.Amount),0) , @DrQty=isnull(SUM(TStock.Quantity) ,0)
		FROM     TVoucherEntry INNER JOIN
                      TStock ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
INNER JOIN
                      MStockItems_V(1,NULL,NULL,NULL,NULL,NULL,NULL) as MStockItems ON TStock.ItemNo = MStockItems.ItemNo
		WHERE     (TStock.ItemNo = @ItemNo) AND (TStock.TrnCode = @TrnDr) AND 
			(TVoucherEntry.VoucherDate >= @OpDt) AND 
                      (TVoucherEntry.VoucherDate <= DateAdd(d,-1,@FromDate)) And MStockItems.FKCategoryNo=@No  and TVoucherEntry.IsCancel='false'
 
		Declare CurCr Cursor For
		SELECT     isnull(TStock.Amount,0),  isNull(abs(TStock.BilledQuantity),0)--isnull(TStock.Quantity,0)+isnull(TStock.FreeQty,0)
			,TVoucherEntry.VoucherTypeCode,TVoucherEntry.PKVoucherNo--     @CrAmt=isnull(SUM(TStock.Amount),0) , @CrQty=isnull(SUM(TStock.Quantity),0) 
		FROM      TVoucherEntry INNER JOIN
                      TStock ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
 INNER JOIN
                      MStockItems_V(1,NULL,NULL,NULL,NULL,NULL,NULL) as MStockItems ON TStock.ItemNo = MStockItems.ItemNo
		WHERE     (TStock.ItemNo = @ItemNo) AND (TStock.TrnCode = @TrnCr) AND 
			(TVoucherEntry.VoucherDate >= @OpDt) AND 
                      (TVoucherEntry.VoucherDate <= DateAdd(d,-1,@FromDate)) And MStockItems.FKCategoryNo=@No and TVoucherEntry.IsCancel='false'
            
    
	end
end	
--===============================================================================================================
else if(@Type = 5)--Groupwise wise Stock Details
begin
	select @OpDt=BooksBeginFrom from Mfirm
	set @OpAmt=0 set @OpQty=0
	if(@FromDate <= @OpDt)
	begin
	
	insert into @TStockBal values(@OpQty,@OpAmt)
	set @Cnt=1
	end
	else
	begin
		
		Declare CurDr Cursor For 	
		SELECT     isnull(TStock.Amount,0),  isNull(abs(TStock.BilledQuantity),0)--isnull(abs(TStock.Quantity),0)+isnull(abs(TStock.FreeQty),0)
					,TVoucherEntry.VoucherTypeCode,TVoucherEntry.PKVoucherNo--     @DrAmt=isnull(SUM(TStock.Amount),0) , @DrQty=isnull(SUM(TStock.Quantity) ,0)
		FROM      TVoucherEntry INNER JOIN
                      TStock ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
 INNER JOIN
                      MStockItems_V(1,NULL,NULL,NULL,NULL,NULL,NULL) as MStockItems ON TStock.ItemNo = MStockItems.ItemNo
		WHERE     (TStock.ItemNo = @ItemNo) AND (TStock.TrnCode = @TrnDr) AND 
			(TVoucherEntry.VoucherDate >= @OpDt) AND 
                      (TVoucherEntry.VoucherDate <= DateAdd(d,-1,@FromDate)) And MStockItems.GroupNo=@No and TVoucherEntry.IsCancel='false'
 
		Declare CurCr Cursor For
		SELECT     isnull(TStock.Amount,0),  isNull(abs(TStock.BilledQuantity),0)--isnull(TStock.Quantity,0)+isnull(TStock.FreeQty,0)
			,TVoucherEntry.VoucherTypeCode,TVoucherEntry.PKVoucherNo--     @CrAmt=isnull(SUM(TStock.Amount),0) , @CrQty=isnull(SUM(TStock.Quantity),0) 
		FROM    TVoucherEntry INNER JOIN
                      TStock ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
 INNER JOIN
                      MStockItems_V(1,NULL,NULL,NULL,NULL,NULL,NULL) as MStockItems ON TStock.ItemNo = MStockItems.ItemNo
		WHERE     (TStock.ItemNo = @ItemNo) AND (TStock.TrnCode = @TrnCr) AND 
			(TVoucherEntry.VoucherDate >= @OpDt) AND 
                      (TVoucherEntry.VoucherDate <= DateAdd(d,-1,@FromDate)) And MStockItems.GroupNo=@No and TVoucherEntry.IsCancel='false'
            
     
	end
end	
--===============================================================================================================
else if(@Type = 6)--Ledger wise Stock Details
begin	
	select @OpDt=BooksBeginFrom from Mfirm
	set @OpAmt = 0 Set @OpQty = 0
	if(@FromDate <= @OpDt)
	begin
	
	insert into @TStockBal values(@OpQty,@OpAmt)
	set @Cnt=1
	end
	else
	begin
		
		Declare CurDr Cursor For 	
		SELECT     isnull(TStock.Amount,0), isNull(abs(TStock.BilledQuantity),0)-- isnull(abs(TStock.Quantity),0)+isnull(abs(TStock.FreeQty),0)
					,TVoucherEntry.VoucherTypeCode,TVoucherEntry.PKVoucherNo--     @DrAmt=isnull(SUM(TStock.Amount),0) , @DrQty=isnull(SUM(TStock.Quantity) ,0)
		FROM         TVoucherEntry INNER JOIN
                      TVoucherDetails ON TVoucherEntry.PkVoucherNo = TVoucherDetails.FkVoucherNo INNER JOIN
                      TStock ON TVoucherDetails.PkVoucherTrnNo = TStock.FkVoucherTrnNo 
							WHERE (TVoucherEntry.VoucherDate >= @OpDt) AND (TVoucherEntry.VoucherDate <= DateAdd(d,-1,@FromDate)) 
							AND (TVoucherDetails.LedgerNo = @No) AND (TVoucherDetails.VoucherSrNo = 1)
						--	And (TVoucherEntry.CompanyNo =@CompNo) 
							AND (TStock.TrnCode = @TrnDr) And  (TStock.ItemNo = @ItemNo) and TVoucherEntry.IsCancel='false'
 
		Declare CurCr Cursor For
		SELECT     isnull(TStock.Amount,0),  isNull(abs(TStock.BilledQuantity),0)--isnull(TStock.Quantity,0)+isnull(TStock.FreeQty,0)
				,TVoucherEntry.VoucherTypeCode,TVoucherEntry.PKVoucherNo--     @CrAmt=isnull(SUM(TStock.Amount),0) , @CrQty=isnull(SUM(TStock.Quantity),0) 
		FROM       TVoucherEntry INNER JOIN
                      TVoucherDetails ON TVoucherEntry.PkVoucherNo = TVoucherDetails.FkVoucherNo INNER JOIN
                      TStock ON TVoucherDetails.PkVoucherTrnNo = TStock.FkVoucherTrnNo 
							WHERE (TVoucherEntry.VoucherDate >= @OpDt) AND (TVoucherEntry.VoucherDate <= DateAdd(d,-1,@FromDate)) 
							AND (TVoucherDetails.LedgerNo = @No) AND (TVoucherDetails.VoucherSrNo = 1)
						--	And (TVoucherEntry.CompanyNo =@CompNo) 
							AND (TStock.TrnCode = @TrnCr) And  (TStock.ItemNo = @ItemNo) and TVoucherEntry.IsCancel='false'
      
	end
--===============================================================================================================
end	

if(@Cnt=0)
begin
--Open Debit Cursor
Open CurDr
	Fetch Next From CurDr Into @DAmt,@DQty,@VType,@VNo
	While (@@Fetch_status=0)
	begin
		set @DrAmt=@DrAmt+@DAmt
		set @DrQty=@DrQty+@DQty
		Fetch Next From CurDr Into @DAmt,@DQty,@VType,@VNo
	end
	Close CurDr Deallocate CurDr

set @VType=0 set @VNo=0	
--Open Credit Cursor
Open CurCr
	Fetch Next From CurCr Into @CAmt,@CQty,@VType,@VNo
	While (@@Fetch_status=0)
	begin
		set @CrAmt=@CrAmt+@CAmt
		set @CrQty=@CrQty+@CQty
		Fetch Next From CurCr Into @CAmt,@CQty,@VType,@VNo
	end
	Close CurCr Deallocate CurCr
	
set @ClosingQty=(@DrQty-@CrQty)+@OpQty
	                   
	set @BalAmt = (@DrAmt - @CrAmt)+ @OpAmt  
	insert into @TStockBal values(@ClosingQty,@BalAmt)
end
	RETURN
	END


<BREAK>

ALTER PROCEDURE [dbo].[GetPayTypeDetails]
@FromDate			 datetime,
@ToDate				 datetime,
@VchType			 numeric(18),
@RType				numeric(18),
@CompanyNo			numeric(18)
AS
Declare @Details TABLE (PayTypeNo numeric(18,0),PayTypeName Varchar(500),PayTypeActName varchar(200),PayTypeShortName varchar(20),Amount numeric(18,2),NoOfBills numeric(18),typeno numeric(18))
Declare @PayTypeNo numeric(18,0),@PayTypeName Varchar(500),@Amount numeric(18,2),@NoOfBills numeric(18),
		@PayTypeActName varchar(200),@ShortName varchar(20),@MixAmt numeric(18,2),@TotAmt numeric(18,2),
		@TAmount numeric(18,2),@MAmount numeric(18,2),@VchStr numeric(18)
set @VchStr=0

if(@VchType=15)
begin
set @VchStr=12
Declare CurDtls Cursor  for SELECT PKPayTypeNo, PayTypeName +' ('+ShortName+')',PayTypeName,ShortName
							FROM MPayType 
							WHERE  PKPayTypeNo<>1
							Union 
							SELECT 12000,'Mix Mode(MX)','Mix Mode','MX'

end
else if(@VchType=115)
begin
set @VchStr=112
Declare CurDtls Cursor  for SELECT PKPayTypeNo, PayTypeName +' ('+ShortName+')',PayTypeName,ShortName
							FROM MPayType 
							WHERE  PKPayTypeNo<>1
							Union 
							SELECT 12000,'Mix Mode(MX)','Mix Mode','MX'

end
else if(@VchType=9)
begin
set @VchStr=13
Declare CurDtls Cursor  for SELECT PKPayTypeNo, PayTypeName +' ('+ShortName+')',PayTypeName,ShortName
							FROM MPayType 
							WHERE  PKPayTypeNo<>1
end
else if(@VchType=109)
begin
set @VchStr=113
Declare CurDtls Cursor  for SELECT PKPayTypeNo, PayTypeName +' ('+ShortName+')',PayTypeName,ShortName
							FROM MPayType 
							WHERE  PKPayTypeNo<>1
end
else if (@VchType=12 or @VchType=13 or @VchType=113 or @VchType=112)
Begin
set @VchStr=@VchType 
Declare CurDtls Cursor  for SELECT PKPayTypeNo, PayTypeName +' ('+ShortName+')',PayTypeName,ShortName
							FROM MPayType 
							WHERE  PKPayTypeNo NOT IN (1,4,5,6,7)
end
	Open CurDtls	
	Fetch Next From CurDtls into @PayTypeNo ,@PayTypeName,@PayTypeActName,@ShortName

	while(@@Fetch_Status = 0)
	begin
	if(@RType=0)
	Begin
		if(@PayTypeNo <>12000)
		Begin
		Select @TAmount=ISNull(SUM(case when TVoucherEntry.voucherTypecode in (15,9) then isNull((Debit+Credit),0) else isNull((Debit+Credit),0)*-1 end), 0),@NoOfBills=Count(*) FROM TVoucherEntry INNER JOIN
					   TVoucherDetails ON TVoucherEntry.PkVoucherNo = TVoucherDetails.FkVoucherNo INNER JOIN
                       MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo
                       WHERE (TVoucherDetails.SrNo=501) AND (TVoucherEntry.PayTypeNo = @PayTypeNo) 
					   AND TVoucherEntry.VoucherDate>=@FromDate and  TVoucherEntry.VoucherDate<=@ToDate 
					   AND TVoucherEntry.VoucherTypeCode in(@VchType,@VchStr) and TVoucherEntry.CompanyNo=@CompanyNo
					   AND TVoucherEntry.IsCancel='false' AND MIXMode=0

				SELECT    @MAmount=IsNull(SUM(TVoucherRefDetails.Amount),0) 
				FROM         TVoucherEntry INNER JOIN
									  TVoucherDetails ON TVoucherDetails.FkVoucherNo = TVoucherEntry.PkVoucherNo INNER JOIN
									  TVoucherRefDetails ON TVoucherDetails.PkVoucherTrnNo = TVoucherRefDetails.FkVoucherTrnNo INNER JOIN
									  MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo INNER JOIN
									  TVoucherPayTypeDetails ON TVoucherEntry.PkVoucherNo = TVoucherPayTypeDetails.FKReceiptVoucherNo
				WHERE      (TVoucherEntry.VoucherTypeCode = case when @VchType=15 then 30 else 31 end) and (TVoucherEntry .CompanyNo = @CompanyNo) and MPayType.PKPayTypeNo=@PayTypeNo 
				AND (VoucherDate >= @FromDate) AND (VoucherDate <= @ToDate) AND  TVoucherEntry.IsCancel = 'false'
						
		set @Amount=@TAmount+@MAmount
		end
		else 
		Select @Amount=ISNull(SUM(Debit+Credit), 0),@NoOfBills=Count(*) FROM TVoucherEntry INNER JOIN
					   TVoucherDetails ON TVoucherEntry.PkVoucherNo = TVoucherDetails.FkVoucherNo INNER JOIN
                       MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo
                       WHERE (TVoucherDetails.SrNo=501) AND (TVoucherEntry.PayTypeNo = 3) 
					   AND TVoucherEntry.VoucherDate>=@FromDate and  TVoucherEntry.VoucherDate<=@ToDate 
					   AND TVoucherEntry.VoucherTypeCode=@VchType and TVoucherEntry.CompanyNo=@CompanyNo
					   AND TVoucherEntry.IsCancel='false' AND MIXMode=1
	End
	if(@RType=1)		
	BEgin
		if(@PayTypeNo <>12000)
		Begin
		Select @TAmount=ISNull(SUM(case when TVoucherEntry.voucherTypecode in (15,9) then isNull((Debit+Credit),0) else isNull((Debit+Credit),0)*-1 end), 0),@NoOfBills=Count(*) FROM TVoucherEntry INNER JOIN
                       TVoucherDetails ON TVoucherEntry.PkVoucherNo = TVoucherDetails.FkVoucherNo INNER JOIN
                       MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo
                       WHERE (TVoucherDetails.SrNo=501) AND (TVoucherEntry.PayTypeNo = @PayTypeNo) 
					   AND TVoucherEntry.VoucherDate>=@FromDate and  TVoucherEntry.VoucherDate<=@ToDate 
					   AND TVoucherEntry.VoucherTypeCode in(@VchType,@VchStr) and TVoucherEntry.CompanyNo=@CompanyNo
					   AND TVoucherEntry.IsCancel='true' AND MIXMode=0

SELECT    @MAmount=IsNull(SUM(TVoucherRefDetails.Amount),0) 
				FROM         TVoucherEntry INNER JOIN
									  TVoucherDetails ON TVoucherDetails.FkVoucherNo = TVoucherEntry.PkVoucherNo INNER JOIN
									  TVoucherRefDetails ON TVoucherDetails.PkVoucherTrnNo = TVoucherRefDetails.FkVoucherTrnNo INNER JOIN
									  MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo INNER JOIN
									  TVoucherPayTypeDetails ON TVoucherEntry.PkVoucherNo = TVoucherPayTypeDetails.FKReceiptVoucherNo
				WHERE      (TVoucherEntry.VoucherTypeCode = 30) and (TVoucherEntry .CompanyNo = @CompanyNo) and MPayType.PKPayTypeNo=@PayTypeNo 
				AND (VoucherDate >= @FromDate) AND (VoucherDate <= @ToDate) AND  TVoucherEntry.IsCancel = 'true'
		set @Amount=@TAmount+@MAmount
		end
		else 
		Select @Amount=ISNull(SUM(Debit+Credit), 0),@NoOfBills=Count(*) FROM TVoucherEntry INNER JOIN
                       TVoucherDetails ON TVoucherEntry.PkVoucherNo = TVoucherDetails.FkVoucherNo INNER JOIN
                       MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo
                       WHERE (TVoucherDetails.SrNo=501) AND (TVoucherEntry.PayTypeNo = 3) 
					   AND TVoucherEntry.VoucherDate>=@FromDate and  TVoucherEntry.VoucherDate<=@ToDate 
					   AND TVoucherEntry.VoucherTypeCode=@VchType and TVoucherEntry.CompanyNo=@CompanyNo
					   AND TVoucherEntry.IsCancel='true' AND MIXMode=1
	End
	if(@RType=2)
	Begin
		if(@PayTypeNo <>12000)
		Begin
		Select @TAmount=ISNull(SUM(case when TVoucherEntry.voucherTypecode in (15,9) then isNull((Debit+Credit),0) else isNull((Debit+Credit),0)*-1 end), 0),@NoOfBills=Count(*) FROM TVoucherEntry INNER JOIN
                       TVoucherDetails ON TVoucherEntry.PkVoucherNo = TVoucherDetails.FkVoucherNo INNER JOIN
                       MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo
                       WHERE(TVoucherDetails.SrNo=501) AND (TVoucherEntry.PayTypeNo = @PayTypeNo) 
					   AND TVoucherEntry.VoucherDate>=@FromDate and  TVoucherEntry.VoucherDate<=@ToDate 
					   AND TVoucherEntry.VoucherTypeCode in(@VchType,@VchStr) and TVoucherEntry.CompanyNo=@CompanyNo  --AND MIXMode=0
		
SELECT    @MAmount=IsNull(SUM(TVoucherRefDetails.Amount),0) 
				FROM         TVoucherEntry INNER JOIN
									  TVoucherDetails ON TVoucherDetails.FkVoucherNo = TVoucherEntry.PkVoucherNo INNER JOIN
									  TVoucherRefDetails ON TVoucherDetails.PkVoucherTrnNo = TVoucherRefDetails.FkVoucherTrnNo INNER JOIN
									  MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo INNER JOIN
									  TVoucherPayTypeDetails ON TVoucherEntry.PkVoucherNo = TVoucherPayTypeDetails.FKReceiptVoucherNo
				WHERE      (TVoucherEntry.VoucherTypeCode = 30) and (TVoucherEntry .CompanyNo = @CompanyNo) and MPayType.PKPayTypeNo=@PayTypeNo 
				AND (VoucherDate >= @FromDate) AND (VoucherDate <= @ToDate) 
		set @Amount=@TAmount+@MAmount
		end
		else
		Select @Amount=ISNull(SUM(Debit+Credit), 0),@NoOfBills=Count(*) FROM TVoucherEntry INNER JOIN
                       TVoucherDetails ON TVoucherEntry.PkVoucherNo = TVoucherDetails.FkVoucherNo INNER JOIN
                       MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo
                       WHERE(TVoucherDetails.SrNo=501) AND (TVoucherEntry.PayTypeNo = 3) 
					   AND TVoucherEntry.VoucherDate>=@FromDate and  TVoucherEntry.VoucherDate<=@ToDate 
					   AND TVoucherEntry.VoucherTypeCode=@VchType and TVoucherEntry.CompanyNo=@CompanyNo -- AND MIXMode=1
	End			  
	insert into @Details values(@PayTypeNo ,@PayTypeName,@PayTypeActName,@ShortName,@Amount,@NoOfBills,1)
	if(@PayTypeNo=12000)
	Begin
			set @MixAmt=@Amount
			set @TotAmt=0
		if(@RType=0)

Declare CurMix Cursor for SELECT MPayType.PKPayTypeNo,MPayType.PayTypeName AS Name,MPayType.DisplayName,MPayType.ShortName, SUM(TVoucherRefDetails.Amount) AS Amount FROM TVoucherEntry INNER JOIN  TVoucherDetails ON TVoucherDetails.FkVoucherNo = TVoucherEntry.PkVoucherNo INNER JOIN TVoucherRefDetails ON TVoucherDetails.PkVoucherTrnNo = TVoucherRefDetails.FkVoucherTrnNo INNER JOIN  MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo INNER JOIN  TVoucherPayTypeDetails ON TVoucherEntry.PkVoucherNo = TVoucherPayTypeDetails.FKReceiptVoucherNo WHERE  (TVoucherEntry.VoucherTypeCode = 30) AND (TVoucherRefDetails.RefNo in (SELECT RefNo FROM TVoucherRefDetails AS TVoucherRefDetails_1 WHERE (FkVoucherTrnNo IN (SELECT PkVoucherTrnNo FROM TVoucherDetails AS TVoucherDetails_1
						WHERE (FkVoucherNo IN  (SELECT PkVoucherNo FROM TVoucherEntry AS TVoucherEntry_1 WHERE (PayTypeNo = 3) AND (VoucherDate >= @FromDate) AND (VoucherDate <= @ToDate) 
						AND (VoucherTypeCode = @VchType) AND  TVoucherEntry.IsCancel = 'false'  AND (CompanyNo = @CompanyNo) AND (MixMode = 1))) AND (VoucherSrNo = 1))))) AND (TVoucherEntry.CompanyNo = @CompanyNo)  
GROUP BY MPayType.PKPayTypeNo, MPayType.PayTypeName,MPayType.DisplayName,MPayType.ShortName
	if(@RType=1)
 Declare CurMix Cursor for SELECT MPayType.PKPayTypeNo,MPayType.PayTypeName AS Name,MPayType.DisplayName,MPayType.ShortName, SUM(TVoucherRefDetails.Amount) AS Amount FROM TVoucherEntry INNER JOIN  TVoucherDetails ON TVoucherDetails.FkVoucherNo = TVoucherEntry.PkVoucherNo INNER JOIN TVoucherRefDetails ON TVoucherDetails.PkVoucherTrnNo = TVoucherRefDetails.FkVoucherTrnNo INNER JOIN  MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo INNER JOIN  TVoucherPayTypeDetails ON TVoucherEntry.PkVoucherNo = TVoucherPayTypeDetails.FKReceiptVoucherNo WHERE  (TVoucherEntry.VoucherTypeCode = 30) AND (TVoucherRefDetails.RefNo in (SELECT RefNo FROM TVoucherRefDetails AS TVoucherRefDetails_1 WHERE (FkVoucherTrnNo IN (SELECT PkVoucherTrnNo FROM TVoucherDetails AS TVoucherDetails_1
						WHERE (FkVoucherNo IN  (SELECT PkVoucherNo FROM TVoucherEntry AS TVoucherEntry_1 WHERE (PayTypeNo = 3) AND (VoucherDate >= @FromDate) AND (VoucherDate <= @ToDate) 
						AND (VoucherTypeCode = @VchType) AND  TVoucherEntry.IsCancel = 'true'  AND (CompanyNo = @CompanyNo) AND (MixMode = 1))) AND (VoucherSrNo = 1))))) AND (TVoucherEntry.CompanyNo = @CompanyNo)  
GROUP BY MPayType.PKPayTypeNo, MPayType.PayTypeName,MPayType.DisplayName,MPayType.ShortName
    if(@RType=2)
 Declare CurMix Cursor for SELECT MPayType.PKPayTypeNo,MPayType.PayTypeName AS Name,MPayType.DisplayName,MPayType.ShortName, SUM(TVoucherRefDetails.Amount) AS Amount FROM TVoucherEntry INNER JOIN  TVoucherDetails ON TVoucherDetails.FkVoucherNo = TVoucherEntry.PkVoucherNo INNER JOIN TVoucherRefDetails ON TVoucherDetails.PkVoucherTrnNo = TVoucherRefDetails.FkVoucherTrnNo INNER JOIN  MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo INNER JOIN  TVoucherPayTypeDetails ON TVoucherEntry.PkVoucherNo = TVoucherPayTypeDetails.FKReceiptVoucherNo WHERE  (TVoucherEntry.VoucherTypeCode = 30) AND (TVoucherRefDetails.RefNo in (SELECT RefNo FROM TVoucherRefDetails AS TVoucherRefDetails_1 WHERE (FkVoucherTrnNo IN (SELECT PkVoucherTrnNo FROM TVoucherDetails AS TVoucherDetails_1
						WHERE (FkVoucherNo IN  (SELECT PkVoucherNo FROM TVoucherEntry AS TVoucherEntry_1 WHERE (PayTypeNo = 3) AND (VoucherDate >= @FromDate) AND (VoucherDate <= @ToDate) 
						AND (VoucherTypeCode = @VchType)  AND (CompanyNo = @CompanyNo) AND (MixMode = 1))) AND (VoucherSrNo = 1))))) AND (TVoucherEntry.CompanyNo = @CompanyNo)  
GROUP BY MPayType.PKPayTypeNo, MPayType.PayTypeName,MPayType.DisplayName,MPayType.ShortName


		Open CurMix
		Fetch Next From CurMix Into @PayTypeNo,@PayTypeName,@PayTypeActName,@ShortName,@Amount
		While(@@Fetch_Status = 0)
		Begin
			--insert into @Details values(0 ,@PayTypeName,@PayTypeActName,@ShortName,@Amount,0,2)
			set @TotAmt=@TotAmt+@Amount
			Fetch Next From CurMix Into @PayTypeNo,@PayTypeName,@PayTypeActName,@ShortName,@Amount
		End
		Close CurMix Deallocate CurMix
		set @TotAmt=@MixAmt-@TotAmt

	End
	Fetch Next From CurDtls into @PayTypeNo ,@PayTypeName,@PayTypeActName,@ShortName
	end
Close CurDtls Deallocate CurDtls
if(@TotAmt<>0)
update @Details set Amount=Amount+@TotAmt where PayTypeNo=3
delete from @Details where PayTypeNo=12000
Select PayTypeNo ,PayTypeName ,PayTypeActName ,PayTypeShortName ,abs(Amount) AS Amount ,NoOfBills ,typeno from @Details

<BREAK>

ALTER PROCEDURE [dbo].[GetSaleRegister]
@VchNo int,
@CompNo numeric(18),
@FromDate datetime,
@ToDate datetime,
@Type numeric(18)

AS

if(@Type=1)

SELECT     TVoucherEntry.VoucherDate, TVoucherEntry.VoucherUserNo,TVoucherEntry.Reference, MLedger.LedgerName,'' as ItemName, 0 as Barcode, TVoucherEntry.BilledAmount, MPayType.PayTypeName, TStock.Quantity, 
                      TStock.BilledQuantity, TStock.NetAmount, TStock.Amount, TStock.SGSTPercentage, TStock.SGSTAmount, TStock.CGSTPercentage, TStock.CGSTAmount, 
                      TStock.IGSTPercentage, TStock.IGSTAmount, TStock.CessPercentage, TStock.CessAmount, TStock.DiscPercentage, TStock.DiscAmount, TStock.DiscRupees, 
                      TStock.DiscPercentage2, TStock.DiscAmount2, TStock.DiscRupees2,
 '' as UOMName , '' AS FreeUomName,TStock.itemno,0 as MRP, TStock.PackagingCharges
FROM         TVoucherEntry INNER JOIN
                      MLedger ON TVoucherEntry.LedgerNo = MLedger.LedgerNo INNER JOIN
                      MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo INNER JOIN
                      TStock ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
WHERE (TVoucherEntry.VoucherTypeCode = @VchNo) AND  (TVoucherEntry.VoucherDate >= @FromDate) AND 
				(TVoucherEntry.VoucherDate <= @ToDate) and TVoucherEntry.iscancel='false'
				ORDER BY TVoucherEntry.VoucherDate, TVoucherEntry.VoucherUserNo


else 

SELECT     TVoucherEntry.VoucherDate, TVoucherEntry.VoucherUserNo,TVoucherEntry.Reference, MLedger.LedgerName, MItemGroup.ItemGroupName + ' ' + MItemMaster.ItemShortName AS ItemName, 
                      MItemMaster.Barcode, TVoucherEntry.BilledAmount, MPayType.PayTypeName, TStock.Quantity, TStock.BilledQuantity, TStock.NetAmount, TStock.Amount, 
                      TStock.SGSTPercentage, TStock.SGSTAmount, TStock.CGSTPercentage, TStock.CGSTAmount, TStock.IGSTPercentage, TStock.IGSTAmount, TStock.CessPercentage, 
                      TStock.CessAmount, TStock.DiscPercentage, TStock.DiscAmount, TStock.DiscRupees, TStock.DiscPercentage2, TStock.DiscAmount2, TStock.DiscRupees2, 
                      MUOM.UOMName, MUOM_1.UOMName AS FreeUomName, TStock.ItemNo, TStock.Rate, MRateSetting.MRP, TStock.PackagingCharges
FROM         TVoucherEntry INNER JOIN
                      MLedger ON TVoucherEntry.LedgerNo = MLedger.LedgerNo INNER JOIN
                      MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo INNER JOIN
                      TStock ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo INNER JOIN
                      MItemMaster ON TStock.ItemNo = MItemMaster.ItemNo INNER JOIN
                      MItemGroup ON MItemMaster.GroupNo = MItemGroup.ItemGroupNo INNER JOIN
                      MUOM ON TStock.FkUomNo = MUOM.UOMNo INNER JOIN
                      MUOM AS MUOM_1 ON TStock.FreeUOMNo = MUOM_1.UOMNo INNER JOIN
                      MRateSetting ON TStock.FkRateSettingNo = MRateSetting.PkSrNo
WHERE (TVoucherEntry.VoucherTypeCode = @VchNo) AND  (TVoucherEntry.VoucherDate >= @FromDate) AND 
				(TVoucherEntry.VoucherDate <= @ToDate) and TVoucherEntry.iscancel='false'
				ORDER BY  TVoucherEntry.VoucherDate, TVoucherEntry.VoucherUserNo

<BREAK>

ALTER PROCEDURE [dbo].[GetStockAllItemQty]
@CompNo		           numeric(18),
@FromDate	           datetime,
@ToDate		           datetime,
@ItStr		            varchar(max),
@Itype                numeric(18)

AS
Declare @ItemNo		numeric(18)
Declare @TStock TABLE (ItemNo int,ItemName varchar(max),OpQty numeric(18,2),InwardQty numeric(18,2),OutwardQty numeric(18,2),Quantity numeric(18,2))
Declare @ItemTable TABLE(ItemNo numeric(18))
Declare @ItemName varchar(max),@OpQty numeric(18,2),@CrQty numeric(18,2),@ClosingQty numeric(18,2),@DrQty numeric(18,2),@StrQry varchar(max),@ItNo numeric(18),@StrItem varchar(max),@StrVchType varchar(max)
set @OpQty=0  set @DrQty=0  set @CrQty=0 set @StrQry='' 
set @StrItem=''


if(@ItStr<>'')
	begin
		set @StrItem='(TStock.ItemNo in ('+@ItStr+')) AND ' 		
    end
else
    begin
		set @StrItem=' '
    end

if(@Itype=0)
begin 
set @StrVchType='and TVoucherEntry.vouchertypecode in(15,12,13,9,8)'
end
else
begin 
set @StrVchType='and TVoucherEntry.vouchertypecode in(115,112,113,109,108)'
end

set @StrQry='Select Tbl1.ItemNo,(SELECT     MItemGroup.ItemGroupName + '' '' + CASE WHEN (ItemShortName <> '''') THEN ItemShortName ELSE ItemName END AS Expr1
                            FROM          MItemMaster AS MItemMaster_1 INNER JOIN
                                                   MItemGroup ON MItemMaster_1.GroupNo = MItemGroup.ItemGroupNo
                            WHERE      (MItemMaster_1.ItemNo = Tbl1.ItemNo)) As ItemName, Sum(OpQty) As OpQty, abs(Sum(InQty)) As InwardQty, abs(Sum(OutQty)) As OutwardQty, 
Sum(OpQty + abs(InQty) - abs(OutQty)) As Quantity,MItemMaster.Barcode From
(
SELECT  TStock.ItemNo,
         sum(case when (TStock.TrnCode = 1) then isnull(TStock.BilledQuantity,0) 
                 else isnull(TStock.BilledQuantity,0)*-1 end) as OpQty,
        0.00 as InQty, 0.00 as OutQty
FROM    TVoucherEntry INNER JOIN
        TStock ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
WHERE   ' + @StrItem + ' (TVoucherEntry.VoucherDate < '''+cast(@FromDate as varchar)+''')  and TVoucherEntry.IsCancel=''false'' ' + @StrVchType + '
Group by TStock.itemno
UNION ALL
SELECT  TStock.ItemNo,
         0.00 as OpQty,
         sum(case when (TStock.TrnCode = 1) then isnull(TStock.BilledQuantity,0) 
                 else 0.00 end ) as InQty,
         sum(case when (TStock.TrnCode = 2) then isnull(TStock.BilledQuantity,0)*-1 
                 else 0.00 end) as OutQty
FROM    TVoucherEntry INNER JOIN
        TStock ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
WHERE    ' + @StrItem + ' (TVoucherEntry.VoucherDate >= '''+cast(@FromDate as varchar)+''') AND 
        (TVoucherEntry.VoucherDate <= '''+cast(@ToDate as varchar)+''')  and TVoucherEntry.IsCancel=''false'' ' + @StrVchType + '
Group by TStock.itemno
) As Tbl1 
INNER JOIN  MItemMaster ON MItemMaster.ItemNo = Tbl1.ItemNo
Group BY Tbl1.ItemNo, MItemMaster.ItemName ,MItemMaster.Barcode
order by ItemName '

Exec(@StrQry)
	RETURN

<BREAK>

ALTER PROCEDURE [dbo].[AddTDeliveryAddress]
     @PkSrNo                              numeric(18),
     @FkVoucherno                         numeric(18),
     @Ledgerno                            numeric(18),
     @LedgerDetailsNo                     numeric(18),
     @IsActive                            bit,
     @UserId                              int,
	 @UserDate					          datetime,
	 --@ModifiedBy					      varchar(500),
@Companyno                   int
   --  @StatusNo							  int
	
AS
IF EXISTS(select PkSrNo from TDeliveryAddress
          where
          FkVoucherno = @FkVoucherno)
     BEGIN
       --Update existing row
       UPDATE TDeliveryAddress
       SET
          FkVoucherno		= @FkVoucherno,
          Ledgerno			= @Ledgerno,
		  LedgerDetailsNo	= @LedgerDetailsNo,
          IsActive			= @IsActive,
          UserID			= @UserID,
          UserDate			= @UserDate,
          ModifiedBy		= isnull(ModifiedBy,'') + cast(@UserID as varchar)+'@'+ CONVERT(VARCHAR(10), GETDATE(), 105),
          StatusNo			= 2

       WHERE
          FkVoucherno = @FkVoucherno

     END
ELSE
     BEGIN
       --Insert new row
       Declare @Id numeric
       SELECT @Id=IsNull(Max(PkSrNo),0) From TDeliveryAddress
       DBCC CHECKIDENT('TDeliveryAddress', RESEED, @Id)
       INSERT INTO TDeliveryAddress(
 
          FkVoucherno,
          Ledgerno,
		  LedgerDetailsNo,
          IsActive,
          UserID,
          UserDate,
CompanyNo,
          StatusNo	
)
       VALUES(

          @FkVoucherno,
          @Ledgerno,
		  @LedgerDetailsNo,
		  @IsActive,
		  @UserID,
		  @UserDate,
@CompanyNo,
          1
)

END

<BREAK>

ALTER PROCEDURE [dbo].[AddTEWayDetails]
    @PKEWayNo						numeric(18),						                            
    @FkVoucherNo					numeric(18),		                       
    @EWayNo							varchar(50),                     
    @VoucherUserNo                  numeric(18),     
    @EWayDate                       datetime,
    @ModeNo                         numeric(18),
    @Distance                       numeric(18,2),    
	@TransportNo					numeric(18),							  
	@VehicleNo						varchar(50),
	@LRNo								varchar(50),
	@LRDate							datetime,
	@LedgerNo						numeric(18),
	@LedgerName						varchar(max),
	@Address						varchar(max),
	@CityNo							numeric(18),
	@CityName						varchar(50),
	@PinCode						numeric(18),
	@StateCode						numeric(18),
	@StateName						varchar(50),
	@UserID							numeric(18),
	@UserDate						datetime,
	--@ModifiedBy						varchar(max),
	@StatusNo						int,
	@IsActive						bit
    
AS
IF EXISTS(select FkVoucherNo from [TEWayDetails]
          where
          FkVoucherNo = @FkVoucherNo)
     BEGIN
       UPDATE TEWayDetails
       SET

	FkVoucherNo		= @FkVoucherNo,
	EWayNo			= @EWayNo,
	VoucherUserNo	= @VoucherUserNo,
	EWayDate		= @EWayDate,
	ModeNo			= @ModeNo,
	Distance		= @Distance,
	TransportNo		= @TransportNo,
	VehicleNo		= @VehicleNo,
	LRNo			= @LRNo,
	LRDate			= @LRDate,
	LedgerNo		= @LedgerNo,
	LedgerName		= @LedgerName,
	Address			= @Address,
	CityNo			= @CityNo,
	CityName		= @CityName,
	PinCode			= @PinCode,
	StateCode		= @StateCode,
	StateName		= @StateName,
	UserID			= @UserID,
	UserDate		= @UserDate,
	ModifiedBy		= isnull(ModifiedBy,'') + cast(@UserID as varchar)+'@'+ CONVERT(VARCHAR(10), GETDATE(), 105),
	StatusNo		= 2,
	IsActive		= @IsActive
    
       WHERE
          PKEWayNo = @PKEWayNo

     END
ELSE
     BEGIN
       Declare @Id numeric
       SELECT @Id=IsNull(Max(PKEWayNo),0) From TEWayDetails
       DBCC CHECKIDENT('TEWayDetails', RESEED, @Id)
       INSERT INTO TEWayDetails(

			FkVoucherNo,
			EWayNo,
			VoucherUserNo,
			EWayDate,
			ModeNo,
			Distance,
			TransportNo,
			VehicleNo,
			LRNo,
			LRDate,
			LedgerNo,
			LedgerName,
			Address,
			CityNo,
			CityName,
			PinCode,
			StateCode,
			StateName,
			UserID,
			UserDate,
			--ModifiedBy,
			StatusNo,
			IsActive
		        
)
       VALUES(
			@FkVoucherNo,
			@EWayNo,
			@VoucherUserNo,
			@EWayDate,
			@ModeNo,
			@Distance,
			@TransportNo,
			@VehicleNo,
			@LRNo,
			@LRDate,
			@LedgerNo,
			@LedgerName,
			@Address,
			@CityNo,
			@CityName,
			@PinCode,
			@StateCode,
			@StateName,
			@UserID,
			@UserDate,
			--@ModifiedBy,
			1,
			@IsActive                 
)

END

<BREAK>

--<EndVersion = 1.0.0.0>

--<Version = 1.0.1.1>

Create Procedure [dbo].[GetChequePrintDetails]
@ChqPrintingNo	numeric(18)
AS
Begin
	SELECT     MLedger.LedgerName, TChequePrinting.ChequeDate, TVoucherEntry.BilledAmount As ChequeAmount, TChequePrinting.Remark1, TChequePrinting.Remark2, 
                      TChequePrinting.Remark3
FROM         TChequePrinting INNER JOIN
                      MLedger ON TChequePrinting.LedgerNo = MLedger.LedgerNo INNER JOIN
                      TVoucherEntry ON TChequePrinting.FKVoucherNo = TVoucherEntry.PkVoucherNo
WHERE     (TChequePrinting.PkSrNo = @ChqPrintingNo)	
End

<BREAK>

ALTER FUNCTION [dbo].[MStockItems_V](@Type int, @PItemNo numeric(18),@PGroupNo numeric(18),@PGroupNo1 numeric(18),@PFkDepartmentNo numeric(18),@PFkCategoryNo numeric(18),@PCompanyNo numeric(18))

RETURNS @StockItems TABLE (ItemNo numeric(18),ItemName varchar(max),ItemNameLang nvarchar(max),ItemShortName varchar(max), GroupNo numeric(18),
			   UOMH numeric(18),UOML numeric(18),UOMDefault numeric(18),CompanyNo numeric(18),
			   FkDepartmentNo numeric(18),FkCategoryNo numeric(18),IsActive bit,
			   MinLevel numeric(18),MaxLevel numeric(18),UserId numeric(18),UserDate Datetime,ModifiedBy varchar(Max),ControlUnder numeric(18,2),FactorVal numeric(18,3),CessValue numeric(18,2),PackagingCharges numeric(18,2),ShortCode varchar(50),esflag bit)
AS
Begin 

	Declare @ItemNo numeric(18),@ItemName varchar(max),@ItemNameLang nvarchar(max),@ItemShortName varchar(max), @GroupNo numeric(18),
			@UOMH numeric(18),@UOML numeric(18),@UOMDefault numeric(18),@CompanyNo numeric(18),
			@FkDepartmentNo numeric(18),@FkCategoryNo numeric(18),@IsActive bit,
			@MinLevel numeric(18),@MaxLevel numeric(18),@UserId numeric(18),@UserDate Datetime,@ModifiedBy varchar(Max),
			@ControlUnder numeric(18,0),@FactorVal numeric(18,3),@CessValue numeric(18,2),@PackagingCharges numeric(18,2),@ShortCode varchar(50)
			
		
	set @ItemNo = 0
	set @GroupNo =0 
	set @UOMH = 0
	set @UOMDefault = 0
	set @CompanyNo = 0

	set @FkDepartmentNo = 0
	set @FkCategoryNo = 0
	set @MinLevel = 0
	set @MaxLevel = 0
	set @UserId = 0
	--set @MfgCompNo=0
	set @CessValue =0
	set @PackagingCharges = 0
	
			if(@Type IS NULL)  --If @Type is NULL Values Will Taken From TSalesSetting
			Begin 
					Select  @Type=Cast(SettingValue as numeric(10)) from MSettings Where PKSettingNo=29--TSalesSetting
			End

			if(@Type = 1) -- For Retriving Values Only From MStockItems
			Begin
			Insert into @StockItems Select  ItemNo,Case When(ItemShortName<>'') Then ItemShortName Else ItemName End,Case When(LangShortDesc<>'') Then LangShortDesc Else LangFullDesc End,ItemShortName , GroupNo,UOMH,UOML,UOMDefault,CompanyNo,
					   FkDepartmentNo,FkCategoryNo,IsActive  ,MinLevel,MaxLevel,UserId,UserDate,ModifiedBy,IsNull(ControlUnder,0),IsNull(FactorVal,0),MItemMaster.CessValue,MItemMaster.PackagingCharges,MItemMaster.ShortCode,MItemMaster.esFlag
				From MItemMaster 
				WHERE MItemMaster.ItemNo=Case When @PItemNo is null then MItemMaster.ItemNo else @PItemNo end 
				And MItemMaster.GroupNo=Case When @PGroupNo is null then MItemMaster.GroupNo else @PGroupNo end 
				--And MItemMaster.GroupNo1=Case When @PGroupNo1 is null then MItemMaster.GroupNo1 else @PGroupNo1 end 
				And MItemMaster.FkCategoryNo=Case When @PFkCategoryNo is null then MItemMaster.FkCategoryNo else @PFkCategoryNo end 
			    And MItemMaster.CompanyNo=Case When @PCompanyNo is null then MItemMaster.CompanyNo else @PCompanyNo end 
				And MItemMaster.FkDepartmentNo=Case When @PFkDepartmentNo is null then MItemMaster.FkDepartmentNo else @PFkDepartmentNo end 
				--And MItemMaster.IsActive='true'
			End --@Type = 1

			if(@Type = 2) -- For Retriving Values With GroupNo1_Name + MStockItems
			Begin
				Insert into @StockItems SELECT MItemMaster.ItemNo, MItemGroup.ItemGroupName + ' ' + Case When(ItemShortName<>'') Then ItemShortName Else ItemName End AS ItemName,MItemGroup.LangGroupName + ' ' + Case When(LangShortDesc<>'') Then LangShortDesc Else LangFullDesc End AS ItemNameLang, MItemMaster.ItemShortName, MItemMaster.GroupNo, 
					   MItemMaster.UOMH,MItemMaster.UOML, MItemMaster.UOMDefault, MItemMaster.CompanyNo, MItemMaster.FkDepartmentNo, 
					   MItemMaster.FkCategoryNo, MItemMaster.IsActive, MItemMaster.MinLevel, MItemMaster.MaxLevel, MItemMaster.UserId, 
					   MItemMaster.UserDate, MItemMaster.ModifiedBy,IsNull(MItemMaster.ControlUnder,0),IsNull(MItemMaster.FactorVal,0),MItemMaster.CessValue,MItemMaster.PackagingCharges,MItemMaster.ShortCode,MItemMaster.esFlag
				FROM MItemMaster 
				INNER JOIN MItemGroup ON MItemMaster.GroupNo = MItemGroup.ItemGroupNo
				WHERE MItemMaster.ItemNo=Case When @PItemNo is null then MItemMaster.ItemNo else @PItemNo end
				And MItemMaster.GroupNo=Case When @PGroupNo is null then MItemMaster.GroupNo else @PGroupNo end 
				--And MItemMaster.GroupNo1=Case When @PGroupNo1 is null then MItemMaster.GroupNo1 else @PGroupNo1 end 
				And MItemMaster.FkCategoryNo=Case When @PFkCategoryNo is null then MItemMaster.FkCategoryNo else @PFkCategoryNo end 
			    And MItemMaster.CompanyNo=Case When @PCompanyNo is null then MItemMaster.CompanyNo else @PCompanyNo end 
				--And MItemMaster.IsActive='true'

			End--@Type = 2

			if(@Type=3) -- For Retriving Values With GroupNo2_Name + MStockItems
			Begin
				Insert into @StockItems SELECT MItemMaster.ItemNo,MItemGroup3.ItemGroupName + ' ' +  MItemGroup2.ItemGroupName + ' ' + MItemGroup.ItemGroupName + ' ' + Case When(ItemShortName<>'') Then ItemShortName Else ItemName End AS ItemName,MItemGroup.LangGroupName + ' ' + Case When(LangShortDesc<>'') Then LangShortDesc Else LangFullDesc End AS ItemNameLang, MItemMaster.ItemShortName, MItemMaster.GroupNo, 
					   MItemMaster.UOMH,MItemMaster.UOML, MItemMaster.UOMDefault, MItemMaster.CompanyNo, MItemMaster.FkDepartmentNo, 
					   MItemMaster.FkCategoryNo, MItemMaster.IsActive, MItemMaster.MinLevel, MItemMaster.MaxLevel, MItemMaster.UserId, 
					   MItemMaster.UserDate, MItemMaster.ModifiedBy,IsNull(MItemMaster.ControlUnder,0),IsNull(MItemMaster.FactorVal,0),MItemMaster.CessValue,MItemMaster.PackagingCharges,MItemMaster.ShortCode,MItemMaster.esFlag
				FROM MItemMaster 
				INNER JOIN MItemGroup ON MItemMaster.GroupNo = MItemGroup.ItemGroupNo
	INNER JOIN MItemGroup AS MItemGroup2 ON MItemMaster.FkCategoryNo = MItemGroup2.ItemGroupNo
INNER JOIN MItemGroup AS MItemGroup3 ON MItemMaster.FkDepartmentNo = MItemGroup3.ItemGroupNo
				WHERE MItemMaster.ItemNo=Case When @PItemNo is null then MItemMaster.ItemNo else @PItemNo end
				And MItemMaster.GroupNo=Case When @PGroupNo is null then MItemMaster.GroupNo else @PGroupNo end 
				--And MItemMaster.GroupNo1=Case When @PGroupNo1 is null then MItemMaster.GroupNo1 else @PGroupNo1 end 
				And MItemMaster.FkCategoryNo=Case When @PFkCategoryNo is null then MItemMaster.FkCategoryNo else @PFkCategoryNo end 
			    And MItemMaster.CompanyNo=Case When @PCompanyNo is null then MItemMaster.CompanyNo else @PCompanyNo end 
			    --And MItemMaster.IsActive='true'

			End --@Type = 3

			if(@Type=4)-- For Retriving Values With GroupNo1_Name + GroupNo2_Name  +MStockItems
			Begin
				Insert into @StockItems SELECT MItemMaster.ItemNo, MItemGroup2.ItemGroupName + ' ' +  MItemGroup3.ItemGroupName + ' ' + MItemGroup.ItemGroupName + ' ' + Case When(ItemShortName<>'') Then ItemShortName Else ItemName End AS ItemName,MItemGroup.LangGroupName + ' ' + Case When(LangShortDesc<>'') Then LangShortDesc Else LangFullDesc End AS ItemNameLang, MItemMaster.ItemShortName, MItemMaster.GroupNo, 
					     MItemMaster.UOMH,MItemMaster.UOML,MItemMaster.UOMDefault, MItemMaster.CompanyNo, MItemMaster.FkDepartmentNo, 
					   MItemMaster.FkCategoryNo, MItemMaster.IsActive,  MItemMaster.MinLevel, MItemMaster.MaxLevel, MItemMaster.UserId, 
					   MItemMaster.UserDate, MItemMaster.ModifiedBy,IsNull(MItemMaster.ControlUnder,0),IsNull(MItemMaster.FactorVal,0),MItemMaster.CessValue,MItemMaster.PackagingCharges,MItemMaster.ShortCode,MItemMaster.esFlag
				FROM MItemMaster 
				INNER JOIN MItemGroup ON MItemMaster.GroupNo = MItemGroup.ItemGroupNo
	INNER JOIN MItemGroup AS MItemGroup2 ON MItemMaster.FkCategoryNo = MItemGroup2.ItemGroupNo
INNER JOIN MItemGroup AS MItemGroup3 ON MItemMaster.FkDepartmentNo = MItemGroup3.ItemGroupNo
				--INNER JOIN MItemGroup AS MItemGroup2 ON MItemMaster.GroupNo1 = MItemGroup2.ItemGroupNo
				WHERE MItemMaster.ItemNo=Case When @PItemNo is null then MItemMaster.ItemNo else @PItemNo end
				And MItemMaster.GroupNo=Case When @PGroupNo is null then MItemMaster.GroupNo else @PGroupNo end 
				--And MItemMaster.GroupNo1=Case When @PGroupNo1 is null then MItemMaster.GroupNo1 else @PGroupNo1 end 
				And MItemMaster.FkCategoryNo=Case When @PFkCategoryNo is null then MItemMaster.FkCategoryNo else @PFkCategoryNo end 
			    And MItemMaster.CompanyNo=Case When @PCompanyNo is null then MItemMaster.CompanyNo else @PCompanyNo end 
				--And MItemMaster.IsActive='true'
			End --@Type = 4

			if(@Type=5)-- For Retriving Values With GroupNo1_Name + GroupNo2_Name
			Begin
				Insert into @StockItems SELECT MItemMaster.ItemNo,  MItemGroup.ItemGroupName + ' ' + Case When(ItemShortName<>'') Then ItemShortName Else ItemName End AS ItemName, MItemGroup.LangGroupName + ' ' + Case When(LangShortDesc<>'') Then LangShortDesc Else LangFullDesc End AS ItemNameLang, MItemMaster.ItemShortName, MItemMaster.GroupNo, 
				MItemMaster.UOMH,MItemMaster.UOML, MItemMaster.UOMDefault, MItemMaster.CompanyNo, MItemMaster.FkDepartmentNo, 
				MItemMaster.FkCategoryNo, MItemMaster.IsActive, MItemMaster.MinLevel, MItemMaster.MaxLevel, MItemMaster.UserId, 
				MItemMaster.UserDate, MItemMaster.ModifiedBy,IsNull(MItemMaster.ControlUnder,0),IsNull(MItemMaster.FactorVal,0),MItemMaster.CessValue,MItemMaster.PackagingCharges,MItemMaster.ShortCode,MItemMaster.esFlag
				FROM MItemMaster 
				INNER JOIN MItemGroup ON MItemMaster.GroupNo = MItemGroup.ItemGroupNo
--				INNER JOIN MItemGroup AS MItemGroup2 ON MItemMaster.GroupNo1 = MItemGroup2.ItemGroupNo
				WHERE MItemMaster.ItemNo=Case When @PItemNo is null then MItemMaster.ItemNo else @PItemNo end
				And MItemMaster.GroupNo=Case When @PGroupNo is null then MItemMaster.GroupNo else @PGroupNo end 
				--And MItemMaster.GroupNo1=Case When @PGroupNo1 is null then MItemMaster.GroupNo1 else @PGroupNo1 end 
				And MItemMaster.FkCategoryNo=Case When @PFkCategoryNo is null then MItemMaster.FkCategoryNo else @PFkCategoryNo end 
			    And MItemMaster.CompanyNo=Case When @PCompanyNo is null then MItemMaster.CompanyNo else @PCompanyNo end 
				--And MItemMaster.IsActive='true'

			End --@Type = 5

			if(@Type=6)-- For Retriving Values With GroupNo1_Name + Item Name + GroupNo2_Name
			Begin
				Insert into @StockItems SELECT     MItemMaster.ItemNo, MItemGroup.ItemGroupName + ' ' + Case When(ItemShortName<>'') Then ItemShortName Else ItemName End   AS ItemName,MItemGroup.LangGroupName + ' ' + Case When(LangShortDesc<>'') Then LangShortDesc Else LangFullDesc End   AS ItemNameLang, 
                      MItemMaster.ItemShortName, MItemMaster.GroupNo, MItemMaster.UOMH,MItemMaster.UOML, MItemMaster.UOMDefault, MItemMaster.CompanyNo, 
                     MItemMaster.FkDepartmentNo, MItemMaster.FkCategoryNo, MItemMaster.IsActive, 
                      MItemMaster.MinLevel, MItemMaster.MaxLevel, MItemMaster.UserId, MItemMaster.UserDate, MItemMaster.ModifiedBy,IsNull(MItemMaster.ControlUnder,0),IsNull(MItemMaster.FactorVal,0),MItemMaster.CessValue,MItemMaster.PackagingCharges,MItemMaster.ShortCode,MItemMaster.esFlag
					  FROM         MItemMaster INNER JOIN
                      MItemGroup ON MItemMaster.GroupNo = MItemGroup.ItemGroupNo --INNER JOIN
--                      MItemGroup AS MItemGroup2 ON MItemMaster.GroupNo1 = MItemGroup2.ItemGroupNo
					  WHERE MItemMaster.ItemNo=Case When @PItemNo is null then MItemMaster.ItemNo else @PItemNo end
				    And MItemMaster.GroupNo=Case When @PGroupNo is null then MItemMaster.GroupNo else @PGroupNo end 
					--And MItemMaster.GroupNo1=Case When @PGroupNo1 is null then MItemMaster.GroupNo1 else @PGroupNo1 end 
					And MItemMaster.FkCategoryNo=Case When @PFkCategoryNo is null then MItemMaster.FkCategoryNo else @PFkCategoryNo end 
					And MItemMaster.CompanyNo=Case When @PCompanyNo is null then MItemMaster.CompanyNo else @PCompanyNo end 
					--And MItemMaster.IsActive='true'

			End --@Type = 6

	if(@Type=7)-- For Retriving Values With GroupNo1_Name + Item Name + GroupNo2_Name
			Begin
				Insert into @StockItems SELECT     MItemMaster.ItemNo, MItemGroup.ItemGroupName + ' ' + Case When(ItemShortName<>'') Then ItemShortName Else ItemName End   AS ItemName,MItemGroup.LangGroupName + ' ' + Case When(LangShortDesc<>'') Then LangShortDesc Else LangFullDesc End   AS ItemNameLang, 
                      MItemMaster.ItemShortName, MItemMaster.GroupNo, MItemMaster.UOMH,MItemMaster.UOML, MItemMaster.UOMDefault, MItemMaster.CompanyNo, 
                     MItemMaster.FkDepartmentNo, MItemMaster.FkCategoryNo, MItemMaster.IsActive, 
                      MItemMaster.MinLevel, MItemMaster.MaxLevel, MItemMaster.UserId, MItemMaster.UserDate, MItemMaster.ModifiedBy,IsNull(MItemMaster.ControlUnder,0),IsNull(MItemMaster.FactorVal,0),MItemMaster.CessValue,MItemMaster.PackagingCharges,MItemMaster.ShortCode,MItemMaster.esFlag
					  FROM         MItemMaster INNER JOIN
                      MItemGroup ON MItemMaster.GroupNo = MItemGroup.ItemGroupNo --INNER JOIN
--                      MItemGroup AS MItemGroup2 ON MItemMaster.GroupNo1 = MItemGroup2.ItemGroupNo
					  WHERE MItemMaster.ItemNo=Case When @PItemNo is null then MItemMaster.ItemNo else @PItemNo end
				    And MItemMaster.GroupNo=Case When @PGroupNo is null then MItemMaster.GroupNo else @PGroupNo end 
					--And MItemMaster.GroupNo1=Case When @PGroupNo1 is null then MItemMaster.GroupNo1 else @PGroupNo1 end 
					And MItemMaster.FkCategoryNo=Case When @PFkCategoryNo is null then MItemMaster.FkCategoryNo else @PFkCategoryNo end 
					And MItemMaster.CompanyNo=Case When @PCompanyNo is null then MItemMaster.CompanyNo else @PCompanyNo end 
					--And MItemMaster.IsActive='true'

			End 

	if(@Type=8)-- For Retriving Values With GroupNo1_Name + Item Name + GroupNo2_Name
			Begin
				Insert into @StockItems SELECT     MItemMaster.ItemNo, MItemGroup.ItemGroupName + ' ' + Case When(ItemShortName<>'') Then ItemShortName Else ItemName End   AS ItemName,MItemGroup.LangGroupName + ' ' + Case When(LangShortDesc<>'') Then LangShortDesc Else LangFullDesc End   AS ItemNameLang, 
                      MItemMaster.ItemShortName, MItemMaster.GroupNo, MItemMaster.UOMH,MItemMaster.UOML, MItemMaster.UOMDefault, MItemMaster.CompanyNo, 
                     MItemMaster.FkDepartmentNo, MItemMaster.FkCategoryNo, MItemMaster.IsActive, 
                      MItemMaster.MinLevel, MItemMaster.MaxLevel, MItemMaster.UserId, MItemMaster.UserDate, MItemMaster.ModifiedBy,IsNull(MItemMaster.ControlUnder,0),IsNull(MItemMaster.FactorVal,0),MItemMaster.CessValue,MItemMaster.PackagingCharges,MItemMaster.ShortCode,MItemMaster.esFlag
					  FROM         MItemMaster INNER JOIN
                      MItemGroup ON MItemMaster.GroupNo = MItemGroup.ItemGroupNo --INNER JOIN
--                      MItemGroup AS MItemGroup2 ON MItemMaster.GroupNo1 = MItemGroup2.ItemGroupNo
					  WHERE MItemMaster.ItemNo=Case When @PItemNo is null then MItemMaster.ItemNo else @PItemNo end
				    And MItemMaster.GroupNo=Case When @PGroupNo is null then MItemMaster.GroupNo else @PGroupNo end 
					--And MItemMaster.GroupNo1=Case When @PGroupNo1 is null then MItemMaster.GroupNo1 else @PGroupNo1 end 
					And MItemMaster.FkCategoryNo=Case When @PFkCategoryNo is null then MItemMaster.FkCategoryNo else @PFkCategoryNo end 
					And MItemMaster.CompanyNo=Case When @PCompanyNo is null then MItemMaster.CompanyNo else @PCompanyNo end 
					--And MItemMaster.IsActive='true'

			End 
	Return
	End

<BREAK>

Alter Procedure [dbo].[GetStockSummaryAllReport]
@CompNo		           numeric(18),
@FromDate	           datetime,
@ToDate		           datetime,
@ItStr		           varchar(max),
@EsFlag                int
As
declare @VType varchar(100),@SVType varchar(100),@SRVType varchar(100),@PVType varchar(100),@PRVType varchar(100)
declare @OPVType varchar(100),@PhVType varchar(100),@ProdVType varchar(100)
if(@EsFlag=0)
begin
        set @VType='15,9,12,13,8,36'
		set @SVType='15'
		set @SRVType='12'
		set @PVType='9'
		set @PRVType='13'
      set @OPVType='36'
       set @PhVType='8'
      set @ProdVType='0'
end
else if(@EsFlag=1)
begin
        set @VType='115,109,112,113,108,136'
        set @SVType='115'
        set @SRVType='112'
		set @PVType='109'
		set @PRVType='113'
  set @OPVType='136'
       set @PhVType='108'
      set @ProdVType='1'

end

SELECT   ItemNo,sum(PurQty) AS PurQty, sum(SaleQty)  AS SaleQty,sum(PurReturnQty) AS PurReturnQty,sum(SalesReturnQty) AS SalesReturnQty,
sum(OpnOutQty) AS OpnOutQty,sum (OpnInQty) AS OpnInQty,sum (PhyOutQty) AS PhyOutQty,sum (PhyInQty) AS PhyInQty,
ItemGroupName, ItemName, Barcode,UOMH,UOMName_H,UOML,UOMName_L,HSNCode ,sum(ProdOutQty) AS ProdOutQty,sum(ProdInQty) AS ProdInQty from
(
--------Opening Stock for Out or minus---------------

SELECT     0 as StockType,   b.ItemNo, 0 AS PurQty, 0  AS SaleQty,0 AS PurReturnQty,0 AS SalesReturnQty,b.FkUomNo, MUOM_S.UOMName AS UOMName_S,   
MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH,MUOM_H.UOMName AS UOMName_H,  
MItemMASter.UOML, MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,
CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End AS OpnOutQty,0 AS OpnInQty,0 AS PhyOutQty,0 AS PhyInQty,0 AS ProdOutQty,0 AS ProdInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo 
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 
INNER JOIN fn_Split (@VType,  ',') AS Vch on a.VoucherTypeCode= CAST(vch.value AS varchar) 
WHERE     a.VoucherDate < @FromDate AND a.IsCancel = 'False' --AND a.VoucherTypeCode IN (cast (@VType)
 and b.trncode=2
GROUP BY b.ItemNo, b.FkUomNo,MUOM_S.UOMName,MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,   
MItemMASter.UOMH, MUOM_H.UOMName,MItemMASter.UOML, MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate

--------Opening Stock in or plus---------------
union all 

SELECT     0 as StockType,   b.ItemNo, 0 AS PurQty, 0  AS SaleQty,0 AS PurReturnQty,0 AS SalesReturnQty,b.FkUomNo, MUOM_S.UOMName AS UOMName_S,   
MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH,MUOM_H.UOMName AS UOMName_H,  
MItemMASter.UOML, MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,0 AS OpnOutQty,
CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End AS OpnInQty,0 AS PhyOutQty,0 AS PhyInQty,0 AS ProdOutQty,0 AS ProdInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo 
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 
INNER JOIN fn_Split (@VType,  ',') AS Vch on a.VoucherTypeCode= CAST(vch.value AS varchar) 
WHERE     a.VoucherDate < @FromDate AND a.IsCancel = 'False'-- AND a.VoucherTypeCode IN  (CAST(@VType as numeric)   ) 
 and b.trncode=1
GROUP BY b.ItemNo, b.FkUomNo,MUOM_S.UOMName,MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,   
MItemMASter.UOMH, MUOM_H.UOMName,MItemMASter.UOML, MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate


Union All

------------------- Sales -------------------
SELECT   1 as StockType,     b.ItemNo, 0 AS PurQty, 
CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End  AS SaleQty,0 AS PurReturnQty,0 AS SalesReturnQty,b.FkUomNo,MUOM_S.UOMName AS UOMName_S,
MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH, MUOM_H.UOMName AS UOMName_H, 
MItemMASter.UOML, MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,0 AS OpnOutQty,0 AS OpnInQty,0 AS PhyOutQty,0 AS PhyInQty,0 AS ProdOutQty,0 AS ProdInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 
INNER JOIN fn_Split (@SVType,  ',') AS Vch on a.VoucherTypeCode= CAST(vch.value AS varchar) 
WHERE        (a.VoucherDate >= @FromDate) AND (a.VoucherDate <= @ToDate) AND (a.IsCancel = 'False') --AND (a.VoucherTypeCode IN (15))
GROUP BY b.ItemNo, b.FkUomNo,MUOM_S.UOMName,   MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,
MItemMASter.UOMH, MUOM_H.UOMName,MItemMASter.UOML, MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate

Union All

------------------- Pur Return -------------------
SELECT    1 as StockType,     b.ItemNo, 0 AS PurQty, 0 AS SaleQty, 
CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End AS PurReturnQty,0 AS SalesReturnQty,b.FkUomNo,MUOM_S.UOMName AS UOMName_S, 
MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH,MUOM_H.UOMName AS UOMName_H, 
MItemMASter.UOML, MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,0 AS OpnOutQty,0 AS OpnInQty,0 AS PhyOutQty,0 AS PhyInQty,0 AS ProdOutQty,0 AS ProdInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 
INNER JOIN fn_Split (@PRVType,  ',') AS Vch on a.VoucherTypeCode= CAST(vch.value AS varchar) 
WHERE     (a.VoucherDate >= @FromDate) AND (a.VoucherDate <= @ToDate) AND (a.IsCancel = 'False') --AND (a.VoucherTypeCode IN (13))
GROUP BY b.ItemNo, b.FkUomNo,MUOM_S.UOMName,MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,
MItemMASter.UOMH, MUOM_H.UOMName,MItemMASter.UOML, MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate

Union All
------------------- Purchase -------------------
SELECT   1 as StockType, b.ItemNo, CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End AS PurQty, 
0 AS SaleQty,0 AS PurReturnQty, 0 AS SalesReturnQty,b.FkUomNo, MUOM_S.UOMName AS UOMName_S,MItemGroup.ItemGroupName,
MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH, MUOM_H.UOMName AS UOMName_H,MItemMASter.UOML,
MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,0 AS OpnOutQty,0 AS OpnInQty,0 AS PhyOutQty,0 AS PhyInQty,0 AS ProdOutQty,0 AS ProdInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 
INNER JOIN fn_Split (@PVType,  ',') AS Vch on a.VoucherTypeCode= CAST(vch.value AS varchar) 
WHERE     (a.VoucherDate >= @FromDate) AND (a.VoucherDate <= @ToDate) AND (a.IsCancel = 'False')-- AND (a.VoucherTypeCode IN (9))
GROUP BY b.ItemNo, b.FkUomNo,MUOM_S.UOMName,MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,
MItemMASter.UOMH, MUOM_H.UOMName,MItemMASter.UOML,MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate

Union All
------------------- Sales Return -------------------
SELECT    1 as StockType,  b.ItemNo, 0 AS PurQty, 0 AS SaleQty,0 AS PurReturnQty, 
CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End AS SalesReturnQty,b.FkUomNo, MUOM_S.UOMName AS UOMName_S,
MItemGroup.ItemGroupName,   MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH, MUOM_H.UOMName AS UOMName_H, 
MItemMASter.UOML, MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,0 AS OpnOutQty,0 AS OpnInQty,0 AS PhyOutQty,0 AS PhyInQty,0 AS ProdOutQty,0 AS ProdInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 
INNER JOIN fn_Split (@SRVType,  ',') AS Vch on a.VoucherTypeCode= CAST(vch.value AS varchar) 
WHERE         (a.VoucherDate >= @FromDate) AND (a.VoucherDate <= @ToDate) AND (a.IsCancel = 'False')-- AND (a.VoucherTypeCode IN (12))
GROUP BY b.ItemNo,b.FkUomNo,MUOM_S.UOMName,MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode, 
MItemMASter.UOMH,MUOM_H.UOMName,MItemMASter.UOML, MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate

Union All
------------------- Physical stock entry minus Return -------------------
SELECT    1 as StockType,  b.ItemNo, 0 AS PurQty, 0 AS SaleQty,0 AS PurReturnQty, 
0 AS SalesReturnQty,b.FkUomNo, MUOM_S.UOMName AS UOMName_S,
MItemGroup.ItemGroupName,   MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH, MUOM_H.UOMName AS UOMName_H, 
MItemMASter.UOML, MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,0 AS OpnOutQty,0 AS OpnInQty,CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End AS PhyOutQty,0 AS PhyInQty,0 AS ProdOutQty,0 AS ProdInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 
INNER JOIN fn_Split (@PhVType,  ',') AS Vch on a.VoucherTypeCode= CAST(vch.value AS varchar) 

WHERE         (a.VoucherDate >= @FromDate) AND (a.VoucherDate <= @ToDate) AND (a.IsCancel = 'False') --AND (a.VoucherTypeCode IN (8)) 
and b.trncode=2
GROUP BY b.ItemNo,b.FkUomNo,MUOM_S.UOMName,MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode, 
MItemMASter.UOMH,MUOM_H.UOMName,MItemMASter.UOML, MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate
Union All
------------------- Physical stock entry plus Return -------------------
SELECT    1 as StockType,  b.ItemNo, 0 AS PurQty, 0 AS SaleQty,0 AS PurReturnQty, 
0 AS SalesReturnQty,b.FkUomNo, MUOM_S.UOMName AS UOMName_S,
MItemGroup.ItemGroupName,   MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH, MUOM_H.UOMName AS UOMName_H, 
MItemMASter.UOML, MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,0 AS OpnOutQty,0 AS OpnInQty,0 AS PhyOutQty,CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End  AS PhyInQty,0 AS ProdOutQty,0 AS ProdInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 
INNER JOIN fn_Split (@PhVType,  ',') AS Vch on a.VoucherTypeCode= CAST(vch.value AS varchar) 

WHERE         (a.VoucherDate >= @FromDate) AND (a.VoucherDate <= @ToDate) AND (a.IsCancel = 'False') --AND (a.VoucherTypeCode IN (8))
 and b.trncode=1
GROUP BY b.ItemNo,b.FkUomNo,MUOM_S.UOMName,MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode, 
MItemMASter.UOMH,MUOM_H.UOMName,MItemMASter.UOML, MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate

union all 
SELECT     1 AS StockType, MItemMaster.ItemNo, 0 AS PurQty, 0 AS SaleQty, 0 AS PurReturnQty, 0 AS SalesReturnQty,0 as FkUomNo,'' AS UOMName_S,
                      MItemGroup.ItemGroupName, MItemMaster.ItemName, MItemMaster.Barcode, MItemMaster.UOMH, MUOM_H.UOMName AS UOMName_H, MItemMaster.UOML, 
                      MUOM_L.UOMName AS UOMName_L,
MItemMASter.HSNCode,RDate as VoucherDate,0 AS OpnOutQty,0 AS OpnInQty,0 AS PhyOutQty,0 AS PhyInQty,
 0 AS ProdOutQty,sum( MRecipeMain.ProdQty ) AS ProdInQty
FROM         MItemGroup INNER JOIN
                      MItemMaster ON MItemGroup.ItemGroupNo = MItemMaster.GroupNo INNER JOIN
                      MUOM ON MItemMaster.UOML = MUOM.UOMNo INNER JOIN
                      MUOM AS MUOM_H ON MItemMaster.UOMH = MUOM_H.UOMNo INNER JOIN
                      MUOM AS MUOM_L ON MItemMaster.UOML = MUOM_L.UOMNo INNER JOIN
                      MRecipeMain ON MItemMaster.ItemNo = MRecipeMain.FinishItemID
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on MRecipeMain.FinishItemID= CAST(Bill_Itemno.value AS numeric) 
INNER JOIN fn_Split (@ProdVType,  ',') AS Vch on MRecipeMain.esflag= CAST(vch.value AS varchar)
WHERE     (MRecipeMain.RecipeType = 2)-- and (MRecipeMain.RDate >= @FromDate) AND (MRecipeMain.RDate  <= @ToDate)
 AND (MRecipeMain.IsActive = 'True') 
GROUP BY MItemMaster.ItemNo, MItemMaster.UOML, MItemMaster.ItemName, MItemGroup.ItemGroupName, MUOM.UOMName, MItemMaster.Barcode, MItemMaster.UOMH, 
                      MUOM_H.UOMName, MItemMaster.UOML, MUOM_L.UOMName,MItemMASter.HSNCode,RDate

union all 

SELECT     1 AS StockType, MItemMaster.ItemNo, 0 AS PurQty, 0 AS SaleQty, 0 AS PurReturnQty, 0 AS SalesReturnQty, 0 AS FkUomNo, '' AS UOMName_S, 
                      MItemGroup.ItemGroupName, MItemMaster.ItemName, MItemMaster.Barcode, MItemMaster.UOMH, MUOM_H.UOMName AS UOMName_H, MItemMaster.UOML, 
                      MUOM_L.UOMName AS UOMName_L, MItemMaster.HSNCode, MRecipeMain.RDate AS VoucherDate, 0 AS OpnOutQty, 0 AS OpnInQty, 0 AS PhyOutQty, 0 AS PhyInQty, 
                      sum(MRecipeSub.FinalQty) AS ProdOutQty,0 AS ProdInQty
FROM         MItemGroup INNER JOIN
                      MItemMaster ON MItemGroup.ItemGroupNo = MItemMaster.GroupNo INNER JOIN
                      MUOM ON MItemMaster.UOML = MUOM.UOMNo INNER JOIN
                      MUOM AS MUOM_H ON MItemMaster.UOMH = MUOM_H.UOMNo INNER JOIN
                      MUOM AS MUOM_L ON MItemMaster.UOML = MUOM_L.UOMNo INNER JOIN
                      MRecipeSub ON MItemMaster.ItemNo = MRecipeSub.RawProductID INNER JOIN
                      MRecipeMain ON MRecipeMain.MRecipeID = MRecipeSub.FKMRecipeID
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on MRecipeSub.RawProductID= CAST(Bill_Itemno.value AS numeric) 
INNER JOIN fn_Split (@ProdVType,  ',') AS Vch on MRecipeMain.esflag= CAST(vch.value AS varchar)
WHERE     (MRecipeMain.RecipeType = 2) and (MRecipeMain.RDate >= @FromDate) AND (MRecipeMain.RDate  <= @ToDate) AND (MRecipeMain.IsActive = 'True') 
GROUP BY MItemMaster.ItemNo, MItemMaster.UOML, MItemMaster.ItemName, MItemGroup.ItemGroupName, MUOM.UOMName, MItemMaster.Barcode, MItemMaster.UOMH, 
                      MUOM_H.UOMName, MItemMaster.UOML, MUOM_L.UOMName, MItemMaster.HSNCode, MRecipeMain.RDate


)AS tbl
GROUP BY ItemNo,ItemGroupName, ItemName, Barcode, UOMH,UOMName_H,UOML,UOMName_L,HSNCode
Order BY ItemGroupName, ItemName

<BREAK>

SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON

ALTER TABLE dbo.MRecipeMain ADD
	ESFlag bit NULL

<BREAK>

ALTER PROCEDURE [dbo].[AddMRecipeMain]
 @MRecipeID                  int,
 @DocNo                      int,
 --@ItemType                   varchar(50),
 @GroupNo                    int,
 @FinishItemID               int,
 @PackingSize                decimal(18,2), 
 @RDate                      datetime,
 @Qty                        numeric(18,2), 
 @UomNo                      numeric(18,0),
 @RecipeType                 numeric(18,0),
 @IsActive                   bit, 
 @UserID                     int,
 @UserDate                   datetime,
 @ProdQty                    numeric(18,2),
 @FkRecipeID                 numeric(18,2),
 @IsLock                     bit,
 @ReturnID                   int output

AS
IF EXISTS(select MRecipeID from MRecipeMain
          where
          MRecipeID = @MRecipeID and RecipeType=@RecipeType)
     BEGIN
       --Update existing row
       UPDATE MRecipeMain
       SET
        DocNo=@DocNo,
		--ItemType=@ItemType,
		GroupNo=@GroupNo,
		FinishItemID=@FinishItemID,
		PackingSize=@PackingSize,
		RDate=@RDate,
        Qty=@Qty,
        ProdQty=@ProdQty,
        UomNo=@UomNo,
        RecipeType=@RecipeType,
        FkRecipeID=@FkRecipeID,
        IsLock=@IsLock,
		IsActive=@IsActive,
		UserID=@UserID,
        ModifiedOn = isnull(ModifiedOn,'') + cast(@UserID as varchar)+'@'+ CONVERT(VARCHAR(10), GETDATE(), 105)

       WHERE
          MRecipeID = @MRecipeID and RecipeType=@RecipeType
		set @ReturnID=@MRecipeID 

     END
ELSE
     BEGIN
       --Insert new row
       Declare @Id numeric
  SELECT @Id=IsNull(Max(MRecipeID),0) From MRecipeMain
       DBCC CHECKIDENT('MRecipeMain', RESEED, @Id)
       SELECT @DocNo=IsNull(Max(DocNo),0)+1 From MRecipeMain where RecipeType=@RecipeType
     
       INSERT INTO MRecipeMain(
        DocNo,
		--ItemType, 
		GroupNo,
		FinishItemID, 
		PackingSize, 
		RDate, 
        Qty,
        ProdQty,
        UomNo,
        RecipeType,
        FkRecipeID,
        IsLock,
		IsActive, 
		UserID, 
		UserDate
         
)
       VALUES(
         
		@DocNo,
		--@ItemType,
		@GroupNo, 
		@FinishItemID, 
		@PackingSize, 
		@RDate,
        @Qty, 
        @ProdQty,
        @UomNo,
        @RecipeType,
        @FkRecipeID,
        @IsLock,
		@IsActive, 
		@UserID,
        @UserDate         
)
Set @ReturnID=Scope_Identity()
END

<BREAK>

ALTER PROCEDURE [dbo].[AddMItemTaxInfo2]
     @PkSrNo                              numeric(18),
     @ItemNo                              numeric(18),
     @TaxLedgerNo                         numeric(18),
	 @SalesLedgerNo						  numeric(18),
     @FromDate                            datetime,
     @CalculationMethod                   varchar(50),
     @Percentage                          numeric(18,2),
     @CompanyNo                           numeric(18),
	 @FKTaxSettingNo					  numeric(18),
     @UserID                              numeric(18),
     @UserDate                            datetime
     --@ModifiedBy                          varchar(50)
AS

BEGIN
	   --Insert new row
	     Declare @Id numeric
	   SELECT @Id=IsNull(Max(PkSrNo),0) From MItemTaxInfo
	   DBCC CHECKIDENT('MItemTaxInfo', RESEED, @Id)
	   INSERT INTO MItemTaxInfo(
          -- PkSrNo,     
		  ItemNo,
		  TaxLedgerNo,
		  SalesLedgerNo,
		  FromDate,
		  CalculationMethod,
		  Percentage,
		  CompanyNo,
		  FKTaxSettingNo,
		  UserID,
		  UserDate,
          StatusNo
		 -- ModifiedBy
       )
	   VALUES(
          -- @PkSrNo,
		  @ItemNo,
		  @TaxLedgerNo,
		  @SalesLedgerNo,
		  @FromDate,
		  @CalculationMethod,
		  @Percentage,
		  @CompanyNo,
		  @FKTaxSettingNo,
		  @UserID,
		  @UserDate,
          1
		  --@ModifiedBy
       )

	 
END

<BREAK>

IF NOT EXISTS(select ScriptNo from DBVersionLog where ScriptNo = 3)
BEGIN

UPDATE MSetting SET AppVersion = 'UyyhzHr5zqA=';

INSERT INTO [DBVersionLog]
           ([ScriptNo]
           ,[ScriptDescription])
     VALUES
           (3
           ,'Updated application version to 1.0.1.1')

END

<BREAK>

--<EndVersion = 1.0.1.1>

--<Version = 1.0.1.2>

IF NOT EXISTS(select ScriptNo from DBVersionLog where ScriptNo = 4)
BEGIN

UPDATE MSetting SET AppVersion = 'ICPQcnYnFK0=';

INSERT INTO [DBVersionLog]
           ([ScriptNo]
           ,[ScriptDescription])
     VALUES
           (4
           ,'Updated application version to 1.0.1.2')

END

<BREAK>

--<EndVersion = 1.0.1.2>

--<Version = 1.0.1.3>

ALTER PROCEDURE [dbo].[AddMRecipeMain]
 @MRecipeID                  int,
 @DocNo                      int,
 @GroupNo                    int,
 @FinishItemID               int,
 @PackingSize                decimal(18,2), 
 @RDate                      datetime,
 @Qty                        numeric(18,2), 
 @UomNo                      numeric(18,0),
 @RecipeType                 numeric(18,0),
 @IsActive                   bit, 
 @UserID                     int,
 @UserDate                   datetime,
 @ProdQty                    numeric(18,2),
 @FkRecipeID                 numeric(18,2),
 @IsLock                     bit,
 @ESFlag                     bit, 
 @ReturnID                   int output

AS
IF EXISTS(select MRecipeID from MRecipeMain
          where
          MRecipeID = @MRecipeID and RecipeType=@RecipeType)
     BEGIN
       --Update existing row
       UPDATE MRecipeMain
       SET
        DocNo=@DocNo,
		GroupNo=@GroupNo,
		FinishItemID=@FinishItemID,
		PackingSize=@PackingSize,
		RDate=@RDate,
        Qty=@Qty,
        ProdQty=@ProdQty,
        UomNo=@UomNo,
        RecipeType=@RecipeType,
        FkRecipeID=@FkRecipeID,
        IsLock=@IsLock,
		IsActive=@IsActive,
        ESFlag=@ESFlag,
		UserID=@UserID,
        ModifiedOn = isnull(ModifiedOn,'') + cast(@UserID as varchar)+'@'+ CONVERT(VARCHAR(10), GETDATE(), 105)

       WHERE
          MRecipeID = @MRecipeID and RecipeType=@RecipeType
		set @ReturnID=@MRecipeID 

     END
ELSE
     BEGIN
       --Insert new row
       Declare @Id numeric
  SELECT @Id=IsNull(Max(MRecipeID),0) From MRecipeMain
       DBCC CHECKIDENT('MRecipeMain', RESEED, @Id)
       SELECT @DocNo=IsNull(Max(DocNo),0)+1 From MRecipeMain where RecipeType=@RecipeType and ESFlag=@ESFlag
     
       INSERT INTO MRecipeMain(
        DocNo,
		GroupNo,
		FinishItemID, 
		PackingSize, 
		RDate, 
        Qty,
        ProdQty,
        UomNo,
        RecipeType,
        FkRecipeID,
        IsLock,
		IsActive,
        ESFlag, 
		UserID, 
		UserDate
         
)
       VALUES(
         
		@DocNo,
		@GroupNo, 
		@FinishItemID, 
		@PackingSize, 
		@RDate,
        @Qty, 
        @ProdQty,
        @UomNo,
        @RecipeType,
        @FkRecipeID,
        @IsLock,
		@IsActive, 
        @ESFlag,
		@UserID,
        @UserDate         
)
Set @ReturnID=Scope_Identity()
END

<BREAK>

update mledgerdetails set cityno=1 where cityno=0

<BREAK>

ALTER PROCEDURE [dbo].[GetMultiBill]
@FromDate          datetime,
@ToDate            datetime,
@VchType           int,
@CompanyNo                   varchar(50),
@PartyNo                   varchar(max)


AS
Begin
declare @Type						int
set @Type=1
SELECT    TVoucherEntry.PkVoucherNo,TVoucherEntry.LedgerNo, TVoucherEntry.VoucherUserNo, TVoucherEntry.VoucherDate, CASE WHEN (@Type = 1) 
                      THEN MStockItems_V_1.ItemName ELSE MStockItems_V_1.ItemNameLang END AS ItemName,MRateSetting.MRP, 
TStock.Quantity,TStock.GRWeight,TStock.TRWeight,
TStock.PackagingCharges,TStock.NoOfBag,TStock.CessValue,TStock.OtherCharges as Dhekharek,
 TStock.Rate, TStock.Amount,MUOM.UOMName, TStock.SGSTPercentage,TStock.SGSTAmount, 
                       TStock.DiscPercentage,TStock.DiscAmount,TStock.DiscRupees,TStock.DiscPercentage2,TStock.DiscAmount2,TStock.DiscRupees2, TStock.CGSTPercentage,
 TStock.CGSTAmount, TStock.IGSTPercentage, TStock.IGSTAmount, TStock.CessPercentage, 
                      TStock.CessAmount, MLedgerDetails.GSTNO AS CustGSTNo, MLedgerDetails.PANNo AS CustPANNo,
MLedgerDetails.FSSAI,MFirm.GSTNO as CmpGSTNo, MLedger.StateCode,MItemMaster.HSNCode, TVoucherEntry.BilledAmount,MFirm.FSSAINo as CompFSSAINO, 
     CASE WHEN (@Type = 1) THEN LedgerName ELSE LedgerLangName END AS LedgerName,
                      MLedger.ContactPerson, MLedgerDetails.PhNo1 as CustPhNo, MLedgerDetails.MobileNo1 as CustMoNo,

         CASE WHEN (@Type = 1) THEN MLedgerDetails.Address ELSE MLedgerDetails.AddressLang end AS CustAddress,



 MFirm.Address AS CmpAddress, MFirm.EmailID AS CmpEmailID,MFirm.PhoneNo1 +' / '+ Mfirm.PhoneNo2 as CompPhoneNo,



 TVoucherEntry.Reference, TVoucherEntry.VoucherTime,(TStock.NetAmount + TStock.CessValue + TStock.PackagingCharges + TStock.OtherCharges)as NetAmount, TStock.NetRate,  TStock.DisplayItemName, TStock.Remarks as RemarksItemlevel,
                      '' AS TransporterName,MTransporterPayType.TransPayTypeName,TVoucherEntry.LRNo,MTransporterMode.TransModeName, TVoucherEntry.TransNoOfItems,  
               (SELECT     SettingValue   FROM   MSettings     WHERE      (PkSettingNo = 311)) AS DisplayTrans,TVoucherEntry.Remark, MState.StateName, MCity.CityName, MPayType.PayTypeName
FROM         MLedgerDetails INNER JOIN
                      TStock INNER JOIN  MUOM ON TStock.FkUomNo = MUOM.UOMNo INNER JOIN 
                      TVoucherEntry ON TStock.FKVoucherNo = TVoucherEntry.PkVoucherNo INNER JOIN

                      MFirm ON TVoucherEntry.CompanyNo = MFirm.FirmNo INNER JOIN
                      MItemMaster ON TStock.ItemNo = MItemMaster.ItemNo INNER JOIN
                      dbo.MStockItems_V(NULL, NULL, NULL, NULL, NULL, NULL, NULL) AS MStockItems_V_1 ON TStock.ItemNo = MStockItems_V_1.ItemNo INNER JOIN
                      MLedger ON TVoucherEntry.LedgerNo = MLedger.LedgerNo ON MLedgerDetails.LedgerNo = MLedger.LedgerNo INNER JOIN
                      MRateSetting ON TStock.FkRateSettingNo = MRateSetting.PkSrNo   LEFT OUTER JOIN
 MTransporterMode ON TVoucherEntry.TransportMode = MTransporterMode.TransModeNo LEFT OUTER JOIN
                      MTransporterPayType ON TVoucherEntry.TransPayType = MTransporterPayType.TransPayTypeNo INNER JOIN
                      MState ON MLedger.StateCode = MState.StateCode INNER JOIN
                      MCity ON MLedgerDetails.CityNo = MCity.CityNo INNER JOIN
fn_Split (''+cast(@PartyNo as varchar(max))+ '','') AS Party_BILL on TVoucherEntry.LedgerNo= CAST(Party_BILL.value AS numeric) INNER JOIN

                      MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo
    
WHERE      (TVoucherEntry.vouchertypecode = @VchType)
ORDER BY TStock.PkStockTrnNo

end

<BREAK>

create FUNCTION [dbo].[GetOpeningLedgerBalanceOnlyES]
	(
	@LedgerNo	numeric(18),
	@CompNo		numeric(18)
	)
RETURNS @TLedgerBal Table(OpAmt numeric(18,2))
AS
BEGIN
	Declare @DrAmt numeric(18,2),@CrAmt numeric(18,2)
	Declare @BalAmt numeric(18,2),@Res int

	Set @DrAmt = 0 Set @CrAmt = 0 set @Res=0

	SELECT    @DrAmt= IsNull(SUM(TVoucherDetails.Debit),0), @CrAmt=IsNull(SUM(TVoucherDetails.Credit),0)
		FROM         TVoucherDetails INNER JOIN
							  TVoucherEntry ON TVoucherDetails.FKVoucherNo = TVoucherEntry.PKVoucherNo INNER JOIN
							  MLedger ON TVoucherDetails.LedgerNo = MLedger.LedgerNo
		WHERE     (TVoucherDetails.LedgerNo = @LedgerNo)  AND 
				  (TVoucherEntry.CompanyNo = @CompNo) AND (TVoucherEntry.IsCancel='false') AND
				  (TVoucherEntry.VoucherTypeCode = 136) -- 36 = OpeningBalance
	                   
	set @BalAmt = (@DrAmt - @CrAmt)
	insert into @TLedgerBal values(@BalAmt)
	
	RETURN
END

<BREAK>

ALTER PROCEDURE [dbo].[GetOutstandDetailst]
@VchType   numeric(18),
@CompanyNo  numeric(18),
@ToDate datetime,
@TempLedgNo varchar(max)

AS

if(@VchType=15)
  Begin
	SELECT MLedger.LedgerNo, Ledgername +' -'+ Cityname as Ledgername ,  SUM(TVoucherDetails.Debit) AS debit, SUM(TVoucherDetails.Credit) AS credit, SUM(TVoucherDetails.Debit) - SUM(TVoucherDetails.Credit) AS Balance,mobileno1
FROM         TVoucherDetails INNER JOIN
                      MLedger ON TVoucherDetails.LedgerNo = MLedger.LedgerNo LEFT JOIN
                      MLedgerDetails ON MLedger.LedgerNo = MLedgerDetails.LedgerNo LEFT  JOIN
                      MCity ON MLedgerDetails.CityNo = MCity.CityNo

inner join TVoucherEntry on TVoucherEntry.pkvoucherno=TVoucherDetails.fkvoucherno
INNER JOIN fn_Split (@TempLedgNo, ',') AS Party_BILL on MLedger.LedgerNo= CAST(Party_BILL.value AS numeric)
WHERE    -- TVoucherDetails.LedgerNo in('+@TempLedgNo+')
TVoucherEntry.VoucherDate<=''+cast(@ToDate as varchar)+''  and TVoucherEntry.IsCancel='false' and vouchertypecode in (15,11,30,36)
group by MLedger.LedgerNo, Ledgername +' -'+ Cityname,mobileno1
order by Ledgername +' -'+ Cityname
  End
else if(@VchType=115)
  Begin
	SELECT MLedger.LedgerNo, Ledgername +' -'+ Cityname as Ledgername ,  SUM(TVoucherDetails.Debit) AS debit, SUM(TVoucherDetails.Credit) AS credit, SUM(TVoucherDetails.Debit) - SUM(TVoucherDetails.Credit) AS Balance,mobileno1
FROM         TVoucherDetails INNER JOIN
                      MLedger ON TVoucherDetails.LedgerNo = MLedger.LedgerNo LEFT JOIN
                      MLedgerDetails ON MLedger.LedgerNo = MLedgerDetails.LedgerNo LEFT  JOIN
                      MCity ON MLedgerDetails.CityNo = MCity.CityNo

inner join TVoucherEntry on TVoucherEntry.pkvoucherno=TVoucherDetails.fkvoucherno
INNER JOIN fn_Split (@TempLedgNo, ',') AS Party_BILL on MLedger.LedgerNo= CAST(Party_BILL.value AS numeric)
WHERE    -- TVoucherDetails.LedgerNo in('+@TempLedgNo+')
TVoucherEntry.VoucherDate<=''+cast(@ToDate as varchar)+''  and TVoucherEntry.IsCancel='false'  and vouchertypecode in (115,111,130,136)
group by MLedger.LedgerNo, Ledgername +' -'+ Cityname,mobileno1
order by Ledgername +' -'+ Cityname
  End
else if(@VchType=9)
Begin
	SELECT MLedger.LedgerNo, Ledgername +' -'+ Cityname as Ledgername  ,  SUM(TVoucherDetails.Credit) AS debit, SUM(TVoucherDetails.Debit) AS credit, SUM(TVoucherDetails.credit) - SUM(TVoucherDetails.Debit) AS Balance,mobileno1
FROM         TVoucherDetails INNER JOIN
                      MLedger ON TVoucherDetails.LedgerNo = MLedger.LedgerNo LEFT JOIN
                      MLedgerDetails ON MLedger.LedgerNo = MLedgerDetails.LedgerNo LEFT  JOIN
                      MCity ON MLedgerDetails.CityNo = MCity.CityNo

inner join TVoucherEntry on TVoucherEntry.pkvoucherno=TVoucherDetails.fkvoucherno
INNER JOIN fn_Split (@TempLedgNo, ',') AS Party_BILL on MLedger.LedgerNo= CAST(Party_BILL.value AS numeric)
WHERE    -- TVoucherDetails.LedgerNo in(+@TempLedgNo) and 
TVoucherEntry.VoucherDate<=''+cast(@ToDate as varchar)+''  and TVoucherEntry.IsCancel='false' and vouchertypecode in (9,7,31,36)
group by MLedger.LedgerNo, Ledgername +' -'+ Cityname,mobileno1
order by Ledgername +' -'+ Cityname
end
else if(@VchType=109)
Begin
	SELECT MLedger.LedgerNo, Ledgername +' -'+ Cityname as Ledgername  ,  SUM(TVoucherDetails.Credit) AS debit, SUM(TVoucherDetails.Debit) AS credit, SUM(TVoucherDetails.credit) - SUM(TVoucherDetails.Debit) AS Balance,mobileno1
FROM         TVoucherDetails INNER JOIN
                      MLedger ON TVoucherDetails.LedgerNo = MLedger.LedgerNo LEFT JOIN
                      MLedgerDetails ON MLedger.LedgerNo = MLedgerDetails.LedgerNo LEFT  JOIN
                      MCity ON MLedgerDetails.CityNo = MCity.CityNo

inner join TVoucherEntry on TVoucherEntry.pkvoucherno=TVoucherDetails.fkvoucherno
INNER JOIN fn_Split (@TempLedgNo, ',') AS Party_BILL on MLedger.LedgerNo= CAST(Party_BILL.value AS numeric)
WHERE    -- TVoucherDetails.LedgerNo in(+@TempLedgNo) and 
TVoucherEntry.VoucherDate<=''+cast(@ToDate as varchar)+''  and TVoucherEntry.IsCancel='false' and vouchertypecode in (109,107,131,136)
group by MLedger.LedgerNo, Ledgername +' -'+ Cityname,mobileno1
order by Ledgername +' -'+ Cityname
end

<BREAK>

ALTER Procedure [dbo].[GetStockSummaryAllReport] -- exec [GetStockSummaryAllReport] 1,'1-Jan-2019','21-Jan-2019','139,946,140,742,49,139,940',1
@CompNo		           numeric(18),
@FromDate	           datetime,
@ToDate		           datetime,
@ItStr		           varchar(max),
@EsFlag                int
As
declare @VType varchar(100),@SVType varchar(100),@SRVType varchar(100),@PVType varchar(100),@PRVType varchar(100)
declare @OPVType varchar(100),@PhVType varchar(100),@ProdVType varchar(100)
if(@EsFlag=0)
begin
        set @VType='15,9,12,13,8,36'
		set @SVType='15'
		set @SRVType='12'
		set @PVType='9'
		set @PRVType='13'
      set @OPVType='36'
       set @PhVType='8'
      set @ProdVType='0'
end
else if(@EsFlag=1)
begin
        set @VType='115,109,112,113,108,136'
        set @SVType='115'
        set @SRVType='112'
		set @PVType='109'
		set @PRVType='113'
  set @OPVType='136'
       set @PhVType='108'
      set @ProdVType='1'

end

SELECT   ItemNo,sum(PurQty) AS PurQty, sum(SaleQty)  AS SaleQty,sum(PurReturnQty) AS PurReturnQty,sum(SalesReturnQty) AS SalesReturnQty,
sum(OpnOutQty) AS OpnOutQty,sum (OpnInQty) AS OpnInQty,sum (PhyOutQty) AS PhyOutQty,sum (PhyInQty) AS PhyInQty,
ItemGroupName, ItemName, Barcode,UOMH,UOMName_H,UOML,UOMName_L,HSNCode ,sum(ProdOutQty) AS ProdOutQty,sum(ProdInQty) AS ProdInQty from
(
--------Opening Stock for Out---------------

SELECT     0 as StockType,   b.ItemNo, 0 AS PurQty, 0  AS SaleQty,0 AS PurReturnQty,0 AS SalesReturnQty,b.FkUomNo, MUOM_S.UOMName AS UOMName_S,   
MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH,MUOM_H.UOMName AS UOMName_H,  
MItemMASter.UOML, MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,
CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End AS OpnOutQty,0 AS OpnInQty,0 AS PhyOutQty,0 AS PhyInQty,0 AS ProdOutQty,0 AS ProdInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo 
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 
INNER JOIN fn_Split (@VType,  ',') AS Vch on a.VoucherTypeCode= CAST(vch.value AS varchar) 
WHERE     a.VoucherDate < @FromDate AND a.IsCancel = 'False' --AND a.VoucherTypeCode IN (cast (@VType)
 and b.trncode=2
GROUP BY b.ItemNo, b.FkUomNo,MUOM_S.UOMName,MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,   
MItemMASter.UOMH, MUOM_H.UOMName,MItemMASter.UOML, MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate

--------Opening Stock in---------------
union all 

SELECT     0 as StockType,   b.ItemNo, 0 AS PurQty, 0  AS SaleQty,0 AS PurReturnQty,0 AS SalesReturnQty,b.FkUomNo, MUOM_S.UOMName AS UOMName_S,   
MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH,MUOM_H.UOMName AS UOMName_H,  
MItemMASter.UOML, MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,0 AS OpnOutQty,
CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End AS OpnInQty,0 AS PhyOutQty,0 AS PhyInQty,0 AS ProdOutQty,0 AS ProdInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo 
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 
INNER JOIN fn_Split (@VType,  ',') AS Vch on a.VoucherTypeCode= CAST(vch.value AS varchar) 
WHERE     a.VoucherDate < @FromDate AND a.IsCancel = 'False'-- AND a.VoucherTypeCode IN  (CAST(@VType as numeric)   ) 
 and b.trncode=1
GROUP BY b.ItemNo, b.FkUomNo,MUOM_S.UOMName,MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,   
MItemMASter.UOMH, MUOM_H.UOMName,MItemMASter.UOML, MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate


Union All

------------------- Sales -------------------
SELECT   1 as StockType,     b.ItemNo, 0 AS PurQty, 
CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End  AS SaleQty,0 AS PurReturnQty,0 AS SalesReturnQty,b.FkUomNo,MUOM_S.UOMName AS UOMName_S,
MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH, MUOM_H.UOMName AS UOMName_H, 
MItemMASter.UOML, MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,0 AS OpnOutQty,0 AS OpnInQty,0 AS PhyOutQty,0 AS PhyInQty,0 AS ProdOutQty,0 AS ProdInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 
INNER JOIN fn_Split (@SVType,  ',') AS Vch on a.VoucherTypeCode= CAST(vch.value AS varchar) 
WHERE        (a.VoucherDate >= @FromDate) AND (a.VoucherDate <= @ToDate) AND (a.IsCancel = 'False') --AND (a.VoucherTypeCode IN (15))
GROUP BY b.ItemNo, b.FkUomNo,MUOM_S.UOMName,   MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,
MItemMASter.UOMH, MUOM_H.UOMName,MItemMASter.UOML, MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate

Union All

------------------- Pur Return -------------------
SELECT    1 as StockType,     b.ItemNo, 0 AS PurQty, 0 AS SaleQty, 
CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End AS PurReturnQty,0 AS SalesReturnQty,b.FkUomNo,MUOM_S.UOMName AS UOMName_S, 
MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH,MUOM_H.UOMName AS UOMName_H, 
MItemMASter.UOML, MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,0 AS OpnOutQty,0 AS OpnInQty,0 AS PhyOutQty,0 AS PhyInQty,0 AS ProdOutQty,0 AS ProdInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 
INNER JOIN fn_Split (@PRVType,  ',') AS Vch on a.VoucherTypeCode= CAST(vch.value AS varchar) 
WHERE     (a.VoucherDate >= @FromDate) AND (a.VoucherDate <= @ToDate) AND (a.IsCancel = 'False') --AND (a.VoucherTypeCode IN (13))
GROUP BY b.ItemNo, b.FkUomNo,MUOM_S.UOMName,MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,
MItemMASter.UOMH, MUOM_H.UOMName,MItemMASter.UOML, MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate

Union All
------------------- PurchASe -------------------
SELECT   1 as StockType, b.ItemNo, CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End AS PurQty, 
0 AS SaleQty,0 AS PurReturnQty, 0 AS SalesReturnQty,b.FkUomNo, MUOM_S.UOMName AS UOMName_S,MItemGroup.ItemGroupName,
MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH, MUOM_H.UOMName AS UOMName_H,MItemMASter.UOML,
MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,0 AS OpnOutQty,0 AS OpnInQty,0 AS PhyOutQty,0 AS PhyInQty,0 AS ProdOutQty,0 AS ProdInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 
INNER JOIN fn_Split (@PVType,  ',') AS Vch on a.VoucherTypeCode= CAST(vch.value AS varchar) 
WHERE     (a.VoucherDate >= @FromDate) AND (a.VoucherDate <= @ToDate) AND (a.IsCancel = 'False')-- AND (a.VoucherTypeCode IN (9))
GROUP BY b.ItemNo, b.FkUomNo,MUOM_S.UOMName,MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode,
MItemMASter.UOMH, MUOM_H.UOMName,MItemMASter.UOML,MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate

Union All
------------------- Sales Return -------------------
SELECT    1 as StockType,  b.ItemNo, 0 AS PurQty, 0 AS SaleQty,0 AS PurReturnQty, 
CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End AS SalesReturnQty,b.FkUomNo, MUOM_S.UOMName AS UOMName_S,
MItemGroup.ItemGroupName,   MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH, MUOM_H.UOMName AS UOMName_H, 
MItemMASter.UOML, MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,0 AS OpnOutQty,0 AS OpnInQty,0 AS PhyOutQty,0 AS PhyInQty,0 AS ProdOutQty,0 AS ProdInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 
INNER JOIN fn_Split (@SRVType,  ',') AS Vch on a.VoucherTypeCode= CAST(vch.value AS varchar) 
WHERE         (a.VoucherDate >= @FromDate) AND (a.VoucherDate <= @ToDate) AND (a.IsCancel = 'False')-- AND (a.VoucherTypeCode IN (12))
GROUP BY b.ItemNo,b.FkUomNo,MUOM_S.UOMName,MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode, 
MItemMASter.UOMH,MUOM_H.UOMName,MItemMASter.UOML, MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate

Union All
------------------- Physical stock entry minus Return -------------------
SELECT    1 as StockType,  b.ItemNo, 0 AS PurQty, 0 AS SaleQty,0 AS PurReturnQty, 
0 AS SalesReturnQty,b.FkUomNo, MUOM_S.UOMName AS UOMName_S,
MItemGroup.ItemGroupName,   MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH, MUOM_H.UOMName AS UOMName_H, 
MItemMASter.UOML, MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,0 AS OpnOutQty,0 AS OpnInQty,CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End AS PhyOutQty,0 AS PhyInQty,0 AS ProdOutQty,0 AS ProdInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 
INNER JOIN fn_Split (@PhVType,  ',') AS Vch on a.VoucherTypeCode= CAST(vch.value AS varchar) 

WHERE         (a.VoucherDate >= @FromDate) AND (a.VoucherDate <= @ToDate) AND (a.IsCancel = 'False') --AND (a.VoucherTypeCode IN (8)) 
and b.trncode=2
GROUP BY b.ItemNo,b.FkUomNo,MUOM_S.UOMName,MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode, 
MItemMASter.UOMH,MUOM_H.UOMName,MItemMASter.UOML, MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate
Union All
------------------- Physical stock entry plus Return -------------------
SELECT    1 as StockType,  b.ItemNo, 0 AS PurQty, 0 AS SaleQty,0 AS PurReturnQty, 
0 AS SalesReturnQty,b.FkUomNo, MUOM_S.UOMName AS UOMName_S,
MItemGroup.ItemGroupName,   MItemMASter.ItemName,MItemMASter.Barcode,MItemMASter.UOMH, MUOM_H.UOMName AS UOMName_H, 
MItemMASter.UOML, MUOM_L.UOMName AS UOMName_L,MItemMASter.HSNCode,VoucherDate,0 AS OpnOutQty,0 AS OpnInQty,0 AS PhyOutQty,CASe When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName!='GRAM'  then SUM(b.Quantity)   
When  MUOM_H.UOMName='KG' and MUOM_L.UOMName='GRAM' and MUOM_S.UOMName='GRAM' then SUM(b.Quantity)/1000   
Else   SUM(b.Quantity*r.stockconversion) End  AS PhyInQty,0 AS ProdOutQty,0 AS ProdInQty
FROM              TStock AS b INNER JOIN
                           TVoucherEntry AS a ON b.FKVoucherNo = a.PkVoucherNo INNER JOIN
                           MRateSetting AS r ON r.PkSrNo = b.FkRateSettingNo AND b.ItemNo = r.ItemNo INNER JOIN
                           MItemMASter ON b.ItemNo =   MItemMASter.ItemNo INNER JOIN
                           MItemGroup ON   MItemMASter.GroupNo =   MItemGroup.ItemGroupNo INNER JOIN
                           MUOM AS MUOM_H ON   MItemMASter.UOMH = MUOM_H.UOMNo INNER JOIN
                           MUOM AS MUOM_L ON   MItemMASter.UOML = MUOM_L.UOMNo INNER JOIN
                           MUOM AS MUOM_S ON b.FkUomNo = MUOM_S.UOMNo
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on b.ItemNo= CAST(Bill_Itemno.value AS numeric) 
INNER JOIN fn_Split (@PhVType,  ',') AS Vch on a.VoucherTypeCode= CAST(vch.value AS varchar) 

WHERE         (a.VoucherDate >= @FromDate) AND (a.VoucherDate <= @ToDate) AND (a.IsCancel = 'False') --AND (a.VoucherTypeCode IN (8))
 and b.trncode=1
GROUP BY b.ItemNo,b.FkUomNo,MUOM_S.UOMName,MItemGroup.ItemGroupName,MItemMASter.ItemName,MItemMASter.Barcode, 
MItemMASter.UOMH,MUOM_H.UOMName,MItemMASter.UOML, MUOM_L.UOMName,MItemMASter.HSNCode,VoucherDate


union all 
SELECT     1 AS StockType, MItemMaster.ItemNo, 0 AS PurQty, 0 AS SaleQty, 0 AS PurReturnQty, 0 AS SalesReturnQty,0 as FkUomNo,'' AS UOMName_S,
                      MItemGroup.ItemGroupName, MItemMaster.ItemName, MItemMaster.Barcode, MItemMaster.UOMH, MUOM_H.UOMName AS UOMName_H, MItemMaster.UOML, 
                      MUOM_L.UOMName AS UOMName_L,
MItemMASter.HSNCode,RDate as VoucherDate,0 AS OpnOutQty,0 AS OpnInQty,0 AS PhyOutQty,0 AS PhyInQty,
 0 AS ProdOutQty,sum( MRecipeMain.ProdQty ) AS ProdInQty
FROM         MItemGroup INNER JOIN
                      MItemMaster ON MItemGroup.ItemGroupNo = MItemMaster.GroupNo INNER JOIN
                      MUOM ON MItemMaster.UOML = MUOM.UOMNo INNER JOIN
                      MUOM AS MUOM_H ON MItemMaster.UOMH = MUOM_H.UOMNo INNER JOIN
                      MUOM AS MUOM_L ON MItemMaster.UOML = MUOM_L.UOMNo INNER JOIN
                      MRecipeMain ON MItemMaster.ItemNo = MRecipeMain.FinishItemID
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on MRecipeMain.FinishItemID= CAST(Bill_Itemno.value AS numeric) 
INNER JOIN fn_Split (@ProdVType,  ',') AS Vch on MRecipeMain.esflag= CAST(vch.value AS varchar)
WHERE     (MRecipeMain.RecipeType = 2)-- and (MRecipeMain.RDate >= @FromDate) AND (MRecipeMain.RDate  <= @ToDate)
 AND (MRecipeMain.IsActive = 'True') 
GROUP BY MItemMaster.ItemNo, MItemMaster.UOML, MItemMaster.ItemName, MItemGroup.ItemGroupName, MUOM.UOMName, MItemMaster.Barcode, MItemMaster.UOMH, 
                      MUOM_H.UOMName, MItemMaster.UOML, MUOM_L.UOMName,MItemMASter.HSNCode,RDate

union all 

SELECT     1 AS StockType, MItemMaster.ItemNo, 0 AS PurQty, 0 AS SaleQty, 0 AS PurReturnQty, 0 AS SalesReturnQty, 0 AS FkUomNo, '' AS UOMName_S, 
                      MItemGroup.ItemGroupName, MItemMaster.ItemName, MItemMaster.Barcode, MItemMaster.UOMH, MUOM_H.UOMName AS UOMName_H, MItemMaster.UOML, 
                      MUOM_L.UOMName AS UOMName_L, MItemMaster.HSNCode, MRecipeMain.RDate AS VoucherDate, 0 AS OpnOutQty, 0 AS OpnInQty, 0 AS PhyOutQty, 0 AS PhyInQty, 
                      sum(MRecipeSub.FinalQty) AS ProdOutQty,0 AS ProdInQty
FROM         MItemGroup INNER JOIN
                      MItemMaster ON MItemGroup.ItemGroupNo = MItemMaster.GroupNo INNER JOIN
                      MUOM ON MItemMaster.UOML = MUOM.UOMNo INNER JOIN
                      MUOM AS MUOM_H ON MItemMaster.UOMH = MUOM_H.UOMNo INNER JOIN
                      MUOM AS MUOM_L ON MItemMaster.UOML = MUOM_L.UOMNo INNER JOIN
                      MRecipeSub ON MItemMaster.ItemNo = MRecipeSub.RawProductID INNER JOIN
                      MRecipeMain ON MRecipeMain.MRecipeID = MRecipeSub.FKMRecipeID
INNER JOIN fn_Split (@ItStr,  ',') AS Bill_Itemno on MRecipeSub.RawProductID= CAST(Bill_Itemno.value AS numeric) 
INNER JOIN fn_Split (@ProdVType,  ',') AS Vch on MRecipeMain.esflag= CAST(vch.value AS varchar)
WHERE     (MRecipeMain.RecipeType = 2) and (MRecipeMain.RDate >= @FromDate) AND (MRecipeMain.RDate  <= @ToDate) AND (MRecipeMain.IsActive = 'True') 
GROUP BY MItemMaster.ItemNo, MItemMaster.UOML, MItemMaster.ItemName, MItemGroup.ItemGroupName, MUOM.UOMName, MItemMaster.Barcode, MItemMaster.UOMH, 
                      MUOM_H.UOMName, MItemMaster.UOML, MUOM_L.UOMName, MItemMaster.HSNCode, MRecipeMain.RDate


)AS tbl
GROUP BY ItemNo,ItemGroupName, ItemName, Barcode, UOMH,UOMName_H,UOML,UOMName_L,HSNCode
Order BY ItemGroupName, ItemName

<BREAK>

Alter PROCEDURE [dbo].[GetVoucherDetailsByDays]
@CurrDate datetime,
@CompNo numeric(18),
@MfgCompNo numeric(18)

AS  

if(@MfgCompNo=0)

SELECT     Convert(Varchar(11), TVoucherEntry.VoucherDate, 105) AS VoucherDate, TVoucherEntry.VoucherUserNo,MLedger.LedgerName AS LedgerName, MVoucherType.VoucherTypeName, TVoucherDetails.FKVoucherNo,
                     case when  TVoucherEntry.IsCancel='true' then 0 else   TVoucherDetails.Debit end  as [Debit Amount], 
                         case when  TVoucherEntry.IsCancel='true' then 0 else TVoucherDetails.Credit end AS [Credit Amount] --TVoucherEntry.VoucherTypeCode,TVoucherEntry.VoucherUserNo
FROM         TVoucherEntry INNER JOIN
                      TVoucherDetails ON TVoucherEntry.PKVoucherNo = TVoucherDetails.FKVoucherNo INNER JOIN
                      MLedger ON TVoucherDetails.LedgerNo = MLedger.LedgerNo INNER JOIN
                      MVoucherType ON TVoucherEntry.VoucherTypeCode = MVoucherType.VoucherTypeCode
WHERE      (TVoucherDetails.VoucherSrNo = 1) AND (Convert(varchar,TVoucherEntry.VoucherDate,101) = Convert(varchar,@CurrDate,101))
			 AND (TVoucherEntry.CompanyNo = @CompNo)--and TVoucherEntry.IsCancel='false'
union
SELECT     Convert(Varchar(11), TVoucherEntry.VoucherDate, 105) AS VoucherDate, TVoucherEntry.VoucherUserNo,'PHYSICAL STOCK' as LedgerName, MVoucherType.VoucherTypeName, TVoucherEntry.PKVoucherNo,0 as [Debit Amount],
			0 as [Credit Amount]
FROM         TVoucherEntry INNER JOIN
                      MVoucherType ON TVoucherEntry.VoucherTypeCode = MVoucherType.VoucherTypeCode
WHERE      (TVoucherEntry.VoucherTypeCode = 8) AND (Convert(varchar,TVoucherEntry.VoucherDate,101) = Convert(varchar,@CurrDate,101))
		and TVoucherEntry.IsCancel='false'	 AND (TVoucherEntry.CompanyNo = @CompNo)

else

	SELECT     Convert(Varchar(11), TVoucherEntry.VoucherDate, 105) AS VoucherDate, TVoucherEntryCompany.VoucherUserNo,MLedger.LedgerName AS LedgerName, MVoucherType.VoucherTypeName, TVoucherDetailsCompany.FKVoucherNo, 
 case when  TVoucherEntry.IsCancel='true' then 0 else  TVoucherDetailsCompany.Debit end as [Debit Amount], 
                      case when  TVoucherEntry.IsCancel='true' then 0 else  TVoucherDetailsCompany.Credit end AS [Credit Amount] --TVoucherEntry.VoucherTypeCode,TVoucherEntry.VoucherUserNo
FROM         TVoucherEntry INNER JOIN TVoucherEntryCompany ON TVoucherEntry.PKVoucherNo=TVoucherEntryCompany.FKVoucherNo INNER JOIN 
                      TVoucherDetailsCompany ON TVoucherEntryCompany.PKVoucherCompanyNo = TVoucherDetailsCompany.FKVoucherNo INNER JOIN
                      MLedger ON TVoucherDetailsCompany.LedgerNo = MLedger.LedgerNo INNER JOIN
                      MVoucherType ON TVoucherEntryCompany.VoucherTypeCode = MVoucherType.VoucherTypeCode
WHERE      (TVoucherDetailsCompany.VoucherSrNo = 1) AND (Convert(varchar,TVoucherEntry.VoucherDate,101) = Convert(varchar,@CurrDate,101))
	and TVoucherEntry.IsCancel='false'	 	 AND (TVoucherEntryCompany.CompanyNo = @CompNo) AND TVoucherEntryCompany.MfgCompNo=@MfgCompNo


<BREAK>

ALTER  PROCEDURE [dbo].[LedgerBookSummary] --exec LedgerBookSummary '01-Apr-2018','01-Apr-2019',15,1,'104'
@FromDate          datetime,
@ToDate            datetime,
@VchType           int,
@CompanyNo		   varchar(50),
@PartyNo		   varchar(max)
AS

Declare @StrQry varchar(max)
if (@VchType=15)
begin
set @StrQry =
'SELECT 0 as PayTypeNo, '''+cast(@FromDate as varchar)+''' as VoucherDate, 0 as VoucherUserNo, 0 as VoucherTypeCode,
 sum(TVoucherDetails.Debit) AS billamount, ''Opening '' as PayTypeName,'''+cast(@FromDate as varchar)+''' AS recvDate,    sum(TVoucherDetails.Credit ) AS recvamount,
'''' as cheque ,   MLedger.LedgerName,MLedger.LedgerNo,   ''Opening''  AS Remark ,''Opening Balance'' as NARRATION 
 from  TVoucherEntry INNER JOIN TVoucherDetails ON TVoucherEntry.PKVoucherNo = TVoucherDetails.FkVoucherNo 
 INNER JOIN MVoucherType ON  TVoucherEntry.VoucherTypeCode = MVoucherType.VoucherTypeCode 
 left join MPayType on MPayType.PKPayTypeNo=TVoucherEntry.paytypeno 
INNER JOIN  fn_Split ('''+(@PartyNo)+ ''','','' )As Party_BILL on TVoucherDetails.LedgerNo= CAST(Party_BILL.value AS numeric)
  INNER JOIN MLedger ON MLedger.LedgerNo = CAST(Party_BILL.value AS numeric)  
WHERE TVoucherEntry.VoucherTypeCode not in(111,109,115,130,131,136,107,112,113) 
and TVoucherEntry.IsCancel=0 And TVoucherEntry.VoucherDate<'''+cast(@FromDate as varchar)+'''
group by  MLedger.LedgerName,MLedger.LedgerNo  union all'+

' SELECT TVoucherEntry.PayTypeNo, TVoucherEntry.VoucherDate, TVoucherEntry.VoucherUserNo, TVoucherEntry.VoucherTypeCode, ' +
 '(SELECT  TVoucherDetails.Debit  AS Expr1) AS billamount, MPayType.PayTypeName as PayTypeName,TVoucherEntry.VoucherDate AS recvDate,   ' +
' (SELECT     TVoucherDetails.Credit  AS Expr1) AS recvamount,  (Select Case When TCC.ChequeNo<>'''' Then TCC.ChequeNo ' +
' Else TCC.CreditCardNo End From TVoucherChqCreditDetails TCC Where TCC.FkVoucherNo=TVoucherEntry.PKVoucherno) ,' +
 '   MLedger.LedgerName,MLedger.LedgerNo, ' +
'  TVoucherEntry.Remark ' +
'  AS Remark ,TVoucherEntry.NARRATION  from  TVoucherEntry INNER JOIN TVoucherDetails ON TVoucherEntry.PKVoucherNo = TVoucherDetails.FkVoucherNo ' +
' INNER JOIN MVoucherType ON  TVoucherEntry.VoucherTypeCode = MVoucherType.VoucherTypeCode ' +
' left join MPayType on MPayType.PKPayTypeNo=TVoucherEntry.paytypeno ' +
' INNER JOIN  fn_Split ('''+(@PartyNo)+ ''','','' )As Party_BILL on TVoucherDetails.LedgerNo= CAST(Party_BILL.value AS numeric) '+  ' INNER JOIN MLedger ON MLedger.LedgerNo = CAST(Party_BILL.value AS numeric) ' +
' WHERE TVoucherEntry.VoucherTypeCode not in(111,109,115,130,131,136,107,112,113) and TVoucherEntry.IsCancel=0 And TVoucherEntry.VoucherDate>= '''+cast(@FromDate as varchar)+'''and TVoucherEntry.VoucherDate<='''+cast(@ToDate as varchar)+''''

end
else  if (@VchType=9)

begin
set @StrQry = 
'SELECT 0 as PayTypeNo, '''+cast(@FromDate as varchar)+''' as VoucherDate, 0 as VoucherUserNo, 0 as VoucherTypeCode,
 sum(TVoucherDetails.Credit) AS billamount, ''Opening '' as PayTypeName,'''+cast(@FromDate as varchar)+''' AS recvDate,    sum(TVoucherDetails.Debit ) AS recvamount,
'''' as cheque ,   MLedger.LedgerName,MLedger.LedgerNo,   ''Opening''  AS Remark ,''Opening Balance'' as NARRATION 
 from  TVoucherEntry INNER JOIN TVoucherDetails ON TVoucherEntry.PKVoucherNo = TVoucherDetails.FkVoucherNo 
 INNER JOIN MVoucherType ON  TVoucherEntry.VoucherTypeCode = MVoucherType.VoucherTypeCode 
 left join MPayType on MPayType.PKPayTypeNo=TVoucherEntry.paytypeno 
INNER JOIN  fn_Split ('''+(@PartyNo)+ ''','','' )As Party_BILL on TVoucherDetails.LedgerNo= CAST(Party_BILL.value AS numeric)
  INNER JOIN MLedger ON MLedger.LedgerNo = CAST(Party_BILL.value AS numeric)  
WHERE TVoucherEntry.VoucherTypeCode not in(111,109,115,130,131,136,107,112,113) 
and TVoucherEntry.IsCancel=0 And TVoucherEntry.VoucherDate<'''+cast(@FromDate as varchar)+'''
group by  MLedger.LedgerName,MLedger.LedgerNo  union all'+
' SELECT TVoucherEntry.PayTypeNo, TVoucherEntry.VoucherDate,TVoucherEntry.Reference as VoucherUserNo, TVoucherEntry.VoucherTypeCode, ' +
 '(SELECT  TVoucherDetails.Credit  AS Expr1) AS billamount, MPayType.PayTypeName  as PayTypeName,TVoucherEntry.VoucherDate AS recvDate,   ' +
' (SELECT     TVoucherDetails.Debit  AS Expr1) AS recvamount,  (Select Case When TCC.ChequeNo<>'''' Then TCC.ChequeNo ' +
' Else TCC.CreditCardNo End From TVoucherChqCreditDetails TCC Where TCC.FkVoucherNo=TVoucherEntry.PKVoucherno) , ' +
 '  MLedger.LedgerName,MLedger.LedgerNo, ' +
'  TVoucherEntry.Remark ' +
'  AS Remark ,TVoucherEntry.NARRATION  from  TVoucherEntry INNER JOIN TVoucherDetails ON TVoucherEntry.PKVoucherNo = TVoucherDetails.FkVoucherNo ' +
' INNER JOIN MVoucherType ON  TVoucherEntry.VoucherTypeCode = MVoucherType.VoucherTypeCode ' +
' left join MPayType on MPayType.PKPayTypeNo=TVoucherEntry.paytypeno ' +
' INNER JOIN  fn_Split ('''+(@PartyNo)+ ''','','' )As Party_BILL on TVoucherDetails.LedgerNo= CAST(Party_BILL.value AS numeric) '+  ' INNER JOIN MLedger ON MLedger.LedgerNo = CAST(Party_BILL.value AS numeric) ' +
' WHERE TVoucherEntry.VoucherTypeCode not in(111,109,115,130,131,136,107,112,113) and  TVoucherEntry.IsCancel=0 And TVoucherEntry.VoucherDate>= '''+cast(@FromDate as varchar)+'''and TVoucherEntry.VoucherDate<='''+cast(@ToDate as varchar)+''''
end
else  if (@VchType=109)

begin
set @StrQry = 
'SELECT 0 as PayTypeNo, '''+cast(@FromDate as varchar)+''' as VoucherDate, 0 as VoucherUserNo, 0 as VoucherTypeCode,
 sum(TVoucherDetails.Credit) AS billamount, ''Opening '' as PayTypeName,'''+cast(@FromDate as varchar)+''' AS recvDate,    sum(TVoucherDetails.Debit ) AS recvamount,
'''' as cheque ,   MLedger.LedgerName,MLedger.LedgerNo,   ''Opening''  AS Remark ,''Opening Balance'' as NARRATION 
 from  TVoucherEntry INNER JOIN TVoucherDetails ON TVoucherEntry.PKVoucherNo = TVoucherDetails.FkVoucherNo 
 INNER JOIN MVoucherType ON  TVoucherEntry.VoucherTypeCode = MVoucherType.VoucherTypeCode 
 left join MPayType on MPayType.PKPayTypeNo=TVoucherEntry.paytypeno 
INNER JOIN  fn_Split ('''+(@PartyNo)+ ''','','' )As Party_BILL on TVoucherDetails.LedgerNo= CAST(Party_BILL.value AS numeric)
  INNER JOIN MLedger ON MLedger.LedgerNo = CAST(Party_BILL.value AS numeric)  
WHERE TVoucherEntry.VoucherTypeCode not in(11,9,15,30,31,36,7,12,13) 
and TVoucherEntry.IsCancel=0 And TVoucherEntry.VoucherDate<'''+cast(@FromDate as varchar)+'''
group by  MLedger.LedgerName,MLedger.LedgerNo  union all'+
' SELECT TVoucherEntry.PayTypeNo, TVoucherEntry.VoucherDate,TVoucherEntry.Reference as VoucherUserNo, TVoucherEntry.VoucherTypeCode, ' +
 '(SELECT  TVoucherDetails.Credit  AS Expr1) AS billamount, MPayType.PayTypeName  as PayTypeName,TVoucherEntry.VoucherDate AS recvDate,   ' +
' (SELECT     TVoucherDetails.Debit  AS Expr1) AS recvamount,  (Select Case When TCC.ChequeNo<>'''' Then TCC.ChequeNo ' +
' Else TCC.CreditCardNo End From TVoucherChqCreditDetails TCC Where TCC.FkVoucherNo=TVoucherEntry.PKVoucherno) , ' +
 '  MLedger.LedgerName,MLedger.LedgerNo, ' +
'  TVoucherEntry.Remark ' +
'  AS Remark ,TVoucherEntry.NARRATION  from  TVoucherEntry INNER JOIN TVoucherDetails ON TVoucherEntry.PKVoucherNo = TVoucherDetails.FkVoucherNo ' +
' INNER JOIN MVoucherType ON  TVoucherEntry.VoucherTypeCode = MVoucherType.VoucherTypeCode ' +
' left join MPayType on MPayType.PKPayTypeNo=TVoucherEntry.paytypeno ' +
' INNER JOIN  fn_Split ('''+(@PartyNo)+ ''','','' )As Party_BILL on TVoucherDetails.LedgerNo= CAST(Party_BILL.value AS numeric) '+  ' INNER JOIN MLedger ON MLedger.LedgerNo = CAST(Party_BILL.value AS numeric) ' +
' WHERE TVoucherEntry.VoucherTypeCode not in(11,9,15,30,31,36,7,12,13) and  TVoucherEntry.IsCancel=0 And TVoucherEntry.VoucherDate>= '''+cast(@FromDate as varchar)+'''and TVoucherEntry.VoucherDate<='''+cast(@ToDate as varchar)+''''
end
else if (@VchType=115)
begin
set @StrQry = 
'SELECT 0 as PayTypeNo, '''+cast(@FromDate as varchar)+''' as VoucherDate, 0 as VoucherUserNo, 0 as VoucherTypeCode,
 sum(TVoucherDetails.Debit) AS billamount, ''Opening '' as PayTypeName,'''+cast(@FromDate as varchar)+''' AS recvDate,    sum(TVoucherDetails.Credit ) AS recvamount,
'''' as cheque ,   MLedger.LedgerName,MLedger.LedgerNo,   ''Opening''  AS Remark ,''Opening Balance'' as NARRATION 
 from  TVoucherEntry INNER JOIN TVoucherDetails ON TVoucherEntry.PKVoucherNo = TVoucherDetails.FkVoucherNo 
 INNER JOIN MVoucherType ON  TVoucherEntry.VoucherTypeCode = MVoucherType.VoucherTypeCode 
 left join MPayType on MPayType.PKPayTypeNo=TVoucherEntry.paytypeno 
INNER JOIN  fn_Split ('''+(@PartyNo)+ ''','','' )As Party_BILL on TVoucherDetails.LedgerNo= CAST(Party_BILL.value AS numeric)
  INNER JOIN MLedger ON MLedger.LedgerNo = CAST(Party_BILL.value AS numeric)  
WHERE TVoucherEntry.VoucherTypeCode not in(11,9,15,30,31,36,7,12,13) 
and TVoucherEntry.IsCancel=0 And TVoucherEntry.VoucherDate<'''+cast(@FromDate as varchar)+'''
group by  MLedger.LedgerName,MLedger.LedgerNo  union all'+
' SELECT TVoucherEntry.PayTypeNo, TVoucherEntry.VoucherDate, TVoucherEntry.VoucherUserNo, TVoucherEntry.VoucherTypeCode, ' +
 '(SELECT  TVoucherDetails.Debit  AS Expr1) AS billamount, MPayType.PayTypeName as PayTypeName,TVoucherEntry.VoucherDate AS recvDate,   ' +
' (SELECT     TVoucherDetails.Credit  AS Expr1) AS recvamount,  (Select Case When TCC.ChequeNo<>'''' Then TCC.ChequeNo ' +
' Else TCC.CreditCardNo End From TVoucherChqCreditDetails TCC Where TCC.FkVoucherNo=TVoucherEntry.PKVoucherno) ,' +
 '   MLedger.LedgerName,MLedger.LedgerNo, ' +
'  TVoucherEntry.Remark ' +
'  AS Remark ,TVoucherEntry.NARRATION  from  TVoucherEntry INNER JOIN TVoucherDetails ON TVoucherEntry.PKVoucherNo = TVoucherDetails.FkVoucherNo ' +
' INNER JOIN MVoucherType ON  TVoucherEntry.VoucherTypeCode = MVoucherType.VoucherTypeCode ' +
' left join MPayType on MPayType.PKPayTypeNo=TVoucherEntry.paytypeno ' +
' INNER JOIN  fn_Split ('''+(@PartyNo)+ ''','','' )As Party_BILL on TVoucherDetails.LedgerNo= CAST(Party_BILL.value AS numeric) '+  ' INNER JOIN MLedger ON MLedger.LedgerNo = CAST(Party_BILL.value AS numeric) ' +
' WHERE TVoucherEntry.VoucherTypeCode not in(11,9,15,30,31,36,7,12,13) and TVoucherEntry.IsCancel=0 And TVoucherEntry.VoucherDate>= '''+cast(@FromDate as varchar)+'''and TVoucherEntry.VoucherDate<='''+cast(@ToDate as varchar)+''''
end

Exec(@StrQry)

<BREAK>

ALTER PROCEDURE [dbo].[StockUpdateAll]

AS
declare @Type numeric(18)

--Select Cast(SettingValue as bit) from MSettings Where PKSettingNo=309

Select  @Type=Cast(SettingValue as bit) from MSettings Where PKSettingNo=309

--0 means post firmwise setting off
--1 means post firmwise setting on
update mratesetting set stock=0,stock2=0

--Purchase 
update m set m.stock =m.stock + t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN  TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 9 and TVoucherEntry.iscancel='false' and TStock.itype = 0
group by itemno ) t
on m.itemno=t.itemno 
--sales return
update m set m.stock =m.stock + t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN  TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 12 and TVoucherEntry.iscancel='false' and TStock.itype = 0
group by itemno ) t
on m.itemno=t.itemno 

--sales
update m set m.stock =m.stock - t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 15 and TVoucherEntry.iscancel='false' and TStock.itype = 0
group by itemno ) t
on m.itemno=t.itemno 
--Opening Stock
update m set m.stock =m.stock + t.qty from mratesetting m 
inner join (select CASE WHEN TStock.TrnCode=1 THEN sum(tstock.billedquantity )ELSE sum(tstock.billedquantity )*-1 END   as qty,itemno from tstock 
  INNER JOIN TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 36 and TVoucherEntry.iscancel='false' and TStock.itype = 0
group by itemno,TStock.TrnCode ) t
on m.itemno=t.itemno 
--Physical Stock
update m set m.stock =m.stock + t.qty from mratesetting m 
inner join (select CASE WHEN TStock.TrnCode=1 THEN sum(tstock.billedquantity )ELSE sum(tstock.billedquantity )*-1 END   as qty,itemno from tstock 
  INNER JOIN TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 8 and TVoucherEntry.iscancel='false' and TStock.itype = 0
group by itemno,TStock.TrnCode  ) t
on m.itemno=t.itemno 

--Production sales plus
update m set m.stock =m.stock + t.qty from mratesetting m 
inner join (
select sum(MRecipeMain.ProdQty ) as qty,FinishItemID as itemno from MRecipeMain 
where  MRecipeMain.RecipeType = 2 and MRecipeMain.IsActive='true' and MRecipeMain.ESFlag = 'false'
group by FinishItemID 
) t on m.itemno=t.itemno 

--Production Rawsales plus
update m set m.stock =m.stock - t.qty from mratesetting m 
inner join (
select sum(MRecipeSub.FinalQty ) as qty,RawProductID as itemno from MRecipeMain 
 INNER JOIN  MRecipeSub ON MRecipeSub.FKMRecipeID = MRecipeMain.MRecipeID
where  MRecipeMain.RecipeType = 2 and MRecipeMain.IsActive='true' and MRecipeMain.ESFlag = 'false'
group by RawProductID 
) t on m.itemno=t.itemno 


if(@Type=1)
begin
--Estimate Purchase
update m set m.stock2 =m.stock2 + t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN  TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 109 and TVoucherEntry.iscancel='false' and TStock.itype = 1
group by itemno ) t
on m.itemno=t.itemno 

--Estimate purchase Return 
update m set m.stock2 =m.stock2 - t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 109 and TVoucherEntry.iscancel='false' and TStock.itype = 1
group by itemno ) t
on m.itemno=t.itemno 

--Estimate Sales Return
update m set m.stock2 =m.stock2 + t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN  TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 112 and TVoucherEntry.iscancel='false' and TStock.itype = 1
group by itemno ) t
on m.itemno=t.itemno 

--Estimate Sales 
update m set m.stock2 =m.stock2 - t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 115 and TVoucherEntry.iscancel='false' and TStock.itype = 1
group by itemno ) t
on m.itemno=t.itemno 

--Estimate Opening Stock
update m set m.stock2 =m.stock2 + t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 136 and TVoucherEntry.iscancel='false' and TStock.itype = 1
group by itemno ) t
on m.itemno=t.itemno 
--Production estimate minus
update m set m.stock2 =m.stock2 + t.qty from mratesetting m 
inner join (
select sum(MRecipeMain.ProdQty ) as qty,FinishItemID as itemno from MRecipeMain 
where  MRecipeMain.RecipeType = 2 and MRecipeMain.IsActive='true' and MRecipeMain.ESFlag = 'true'
group by FinishItemID 
) t on m.itemno=t.itemno 

--Production Raw Material estimate minus
update m set m.stock2 =m.stock2 - t.qty from mratesetting m 
inner join (
select sum(MRecipeSub.FinalQty ) as qty,RawProductID as itemno from MRecipeMain 
 INNER JOIN  MRecipeSub ON MRecipeSub.FKMRecipeID = MRecipeMain.MRecipeID
where  MRecipeMain.RecipeType = 2 and MRecipeMain.IsActive='true' and MRecipeMain.ESFlag = 'true'
group by RawProductID 
) t on m.itemno=t.itemno 

------------------------------------------------------missing entry
update m set m.stock2 =m.stock2 - t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 15 and TVoucherEntry.iscancel='false' and TStock.itype = 1
group by itemno ) t
on m.itemno=t.itemno 

update m set m.stock2 =m.stock2 + t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 12 and TVoucherEntry.iscancel='false' and TStock.itype = 1
group by itemno ) t
on m.itemno=t.itemno 

update m set m.stock =m.stock + t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 9 and TVoucherEntry.iscancel='false' and TStock.itype = 1
group by itemno ) t
on m.itemno=t.itemno 
end

-----------------------------------auto post off---------------------------------

if(@Type=0)
begin
--Estimate Purchase
update m set m.stock2 =m.stock2 + t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN  TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 109 and TVoucherEntry.iscancel='false' and TStock.itype = 0
group by itemno ) t
on m.itemno=t.itemno 
--Estimate Sales Return
update m set m.stock2 =m.stock2 + t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN  TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 112 and TVoucherEntry.iscancel='false' and TStock.itype = 0
group by itemno ) t
on m.itemno=t.itemno 

--Estimate Sales 
update m set m.stock2 =m.stock2 - t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 115 and TVoucherEntry.iscancel='false' and TStock.itype = 0
group by itemno ) t
on m.itemno=t.itemno 

--Estimate Opening Stock
update m set m.stock2 =m.stock2 + t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 136 and TVoucherEntry.iscancel='false' and TStock.itype = 0
group by itemno ) t
on m.itemno=t.itemno 


--Estimate physical Stock
update m set m.stock2 =m.stock2 - t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 108 and TVoucherEntry.iscancel='false' and TStock.itype = 0
group by itemno ) t
on m.itemno=t.itemno 

--Estimate purchase return 
update m set m.stock2 =m.stock2 - t.qty from mratesetting m 
inner join (select sum(tstock.billedquantity ) as qty,itemno from tstock 
  INNER JOIN TVoucherEntry ON TVoucherEntry.PkVoucherNo = TStock.FKVoucherNo
where  TVoucherEntry.vouchertypecode = 113 and TVoucherEntry.iscancel='false' and TStock.itype = 0
group by itemno ) t
on m.itemno=t.itemno
end 


--Production estimate minus
update m set m.stock2 =m.stock2 + t.qty from mratesetting m 
inner join (
select sum(MRecipeMain.ProdQty ) as qty,FinishItemID as itemno from MRecipeMain 
where  MRecipeMain.RecipeType = 2 and MRecipeMain.IsActive='true' and MRecipeMain.ESFlag = 'true'
group by FinishItemID 
) t on m.itemno=t.itemno 

--Production Raw Material estimate minus
update m set m.stock2 =m.stock2 - t.qty from mratesetting m 
inner join (
select sum(MRecipeSub.FinalQty ) as qty,RawProductID as itemno from MRecipeMain 
 INNER JOIN  MRecipeSub ON MRecipeSub.FKMRecipeID = MRecipeMain.MRecipeID
where  MRecipeMain.RecipeType = 2 and MRecipeMain.IsActive='true' and MRecipeMain.ESFlag = 'true'
group by RawProductID 
) t on m.itemno=t.itemno 

<BREAK>

IF NOT EXISTS(select ScriptNo from DBVersionLog where ScriptNo = 5)
BEGIN

UPDATE MSetting SET AppVersion = 'vLTBeRFnTn4=';

INSERT INTO [DBVersionLog]
           ([ScriptNo]
           ,[ScriptDescription])
     VALUES
           (5
           ,'Updated application version to 1.0.1.3')

END

<BREAK>

--<EndVersion = 1.0.1.3>

--<Version = 1.0.1.4>

SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON

ALTER TABLE dbo.MFirm ADD
	EmailPass nvarchar(50) NULL

<BREAK>

SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON

ALTER TABLE dbo.MUOM ADD
	UomLang varchar(50) NULL

<BREAK>

CREATE TABLE [dbo].[MCashDenomination](
	[CashDenominationNo] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
	[Note] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[RSType] [numeric](18, 0) NULL,
	[SerialNo] [numeric](18, 0) NULL,
	[IsActive] [bit] NULL,
	[UserID] [numeric](18, 0) NULL,
	[UserDate] [datetime] NULL,
	[CompanyNo] [numeric](18, 0) NULL,
 CONSTRAINT [PK_MCashDenomination] PRIMARY KEY CLUSTERED 
(
	[CashDenominationNo] ASC
)WITH (PAD_INDEX  = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

<BREAK>

Create PROCEDURE [dbo].[AddMCashDenomination]
     @CashDenominationNo              numeric(18),
     @Note                            varchar(50),
     @RSType                          numeric(18),  
     @SerialNo                        numeric(18),  
     @IsActive                        bit,
     @UserID                          numeric(18),
     @UserDate                        datetime,
	 @CompanyNo						  numeric(18)

AS
IF EXISTS(select CashDenominationNo from MCashDenomination
          where
          CashDenominationNo = @CashDenominationNo)
     BEGIN
       --Update existing row
       UPDATE MCashDenomination
       SET
          Note = @Note,
          RSType=@RSType,
          SerialNo = @SerialNo,
          IsActive = @IsActive,
          UserID = @UserID,
          UserDate = @UserDate,
	      CompanyNo=@CompanyNo

       WHERE
          CashDenominationNo = @CashDenominationNo

     END
ELSE
     BEGIN
       --Insert new row
       Declare @Id numeric
       SELECT @Id=IsNull(Max(CashDenominationNo),0) From MCashDenomination
       DBCC CHECKIDENT('MCashDenomination', RESEED, @Id)
       INSERT INTO MCashDenomination(
          Note,
          RSType,
          SerialNo,
          IsActive,
          UserID,
          UserDate,
		  CompanyNo
)
       VALUES(
          @Note,
          @RSType,
          @SerialNo,
          @IsActive,
          @UserID,
          @UserDate,
	      @CompanyNo
)

END

<BREAK>

Create PROCEDURE  [dbo].[DeleteMCashDenomination] 
@CashDenominationNo                             numeric(18)


AS
Update MCashDenomination set IsActive='False' where CashDenominationNo = @CashDenominationNo

<BREAK>

Create Procedure [dbo].[RptTDocketPrinting]
@DocketPrintingNo numeric(18)

As

SELECT     MLedger.LedgerName, TVoucherChqCreditDetails.ChequeNo, TVoucherChqCreditDetails.ChequeDate, MBranch.BranchName, TVoucherEntry.BilledAmount, 
                      TDocketPrintingDetails.Remark, '' AS Status, TDocketPrinting.DocketUserNo, TDocketPrinting.FromDate, TDocketPrinting.ToDate, 
                      MLedger_1.LedgerName AS DepositeTo, MLedgerDetails.AccountNo AS PANNo
FROM         MLedger INNER JOIN
                      TVoucherDetails ON MLedger.LedgerNo = TVoucherDetails.LedgerNo INNER JOIN
                      TVoucherEntry INNER JOIN
                      TVoucherChqCreditDetails ON TVoucherEntry.PkVoucherNo = TVoucherChqCreditDetails.FKVoucherNo ON 
                      TVoucherDetails.PkVoucherTrnNo = TVoucherChqCreditDetails.FkVoucherTrnNo INNER JOIN
                      MBranch ON TVoucherChqCreditDetails.BranchNo = MBranch.BranchNo INNER JOIN
                      TDocketPrintingDetails ON TVoucherEntry.PkVoucherNo = TDocketPrintingDetails.FkVoucherNo INNER JOIN
                      TDocketPrinting ON TDocketPrintingDetails.DocketPrintingNo = TDocketPrinting.DocketPrintingNo INNER JOIN
                      MLedger AS MLedger_1 ON TDocketPrinting.LedgerNo = MLedger_1.LedgerNo LEFT OUTER JOIN
                      MLedgerDetails ON MLedger_1.LedgerNo = MLedgerDetails.LedgerNo
WHERE     (TVoucherEntry.CompanyNo = 1) AND (TVoucherEntry.PayTypeNo = 4) AND (TVoucherDetails.SrNo = 501) AND (TDocketPrintingDetails.DocketPrintingNo = @DocketPrintingNo)
ORDER BY MLedger.LedgerName

<BREAK>

CREATE TABLE [dbo].[TCashSlip](
	[CashSlipNo] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
	[DocketUserNo] [numeric](18, 0) NULL,
	[ToDate] [datetime] NULL,
	[LedgerNo] [numeric](18, 0) NULL,
	[UserID] [numeric](18, 0) NULL,
	[UserDate] [datetime] NULL,
	[CompanyNo] [numeric](18, 0) NULL

 CONSTRAINT [PK_TCashSlip] PRIMARY KEY CLUSTERED 
(
	[CashSlipNo] ASC
)WITH (PAD_INDEX  = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

<BREAK>

CREATE TABLE [dbo].[TCashSlipDetails](
	[CashSlipDetailsNo] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
	[CashSlipNo]  [numeric](18, 0) NULL,
	[Note] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[RSType] [numeric](18, 0) NULL,
	[Pieces] [numeric](18, 0) NULL,
	[Amount] [numeric](18, 2) NULL,
    [IsActive] [bit] NULL,
	[UserID] [numeric](18, 0) NULL,
	[UserDate] [datetime] NULL,
	[CompanyNo] [numeric](18, 0) NULL,
	[Status] [numeric](18, 0) NULL,

 CONSTRAINT [PK_TCashSlipDetails] PRIMARY KEY CLUSTERED 
(
	[CashSlipDetailsNo] ASC
)WITH (PAD_INDEX  = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

<BREAK>

Create PROCEDURE [dbo].[AddTCashSlip]
     @CashSlipNo                            numeric(18),
     @DocketUserNo                          numeric(18),
     @ToDate                                datetime,
     @LedgerNo                              numeric(18),
     @UserID                                numeric(18),
     @UserDate                              datetime,
     @CompanyNo                             numeric(18),
     @ReturnID                              int output
AS
IF EXISTS(select CashSlipNo from TCashSlip
          where
          CashSlipNo = @CashSlipNo)
     BEGIN
       --Update existing row
       UPDATE TCashSlip
       SET
          DocketUserNo = @DocketUserNo,
          ToDate = @ToDate,
          LedgerNo = @LedgerNo,
          UserID = @UserID,
          UserDate = @UserDate,
          CompanyNo = @CompanyNo

       WHERE
          CashSlipNo = @CashSlipNo
		  set @ReturnID = @CashSlipNo

     END
ELSE
     BEGIN
       --Insert new row
       Declare @Id numeric
       SELECT @Id=IsNull(Max(CashSlipNo),0) From TCashSlip
       DBCC CHECKIDENT('TCashSlip', RESEED, @Id)
       INSERT INTO TCashSlip(
          DocketUserNo,
          ToDate,
          LedgerNo,
          UserID,
          UserDate,
          CompanyNo
)
       VALUES(
          @DocketUserNo,
          @ToDate,
          @LedgerNo,
          @UserID,
          @UserDate,
          @CompanyNo
)
set @ReturnID = Scope_Identity()
END

<BREAK>

Create PROCEDURE [dbo].[AddTCashSlipDetails]
     @CashSlipDetailsNo               numeric(18),
     @CashSlipNo                      numeric(18),
     @Note                            varchar(50),
     @RSType                          numeric(18),  
     @Pieces                          numeric(18),  
     @Amount                          numeric(18,2),  
     @IsActive                        bit,
     @UserID                          numeric(18),
     @UserDate                        datetime,
     @CompanyNo                       numeric(18)
     
AS
IF EXISTS(select CashSlipDetailsNo from TCashSlipDetails
          where
          CashSlipDetailsNo = @CashSlipDetailsNo)
     BEGIN
       --Update existing row
       UPDATE TCashSlipDetails
       SET
          CashSlipNo = @CashSlipNo,
          Note = @Note,
          RSType=@RSType,
          Pieces = @Pieces,
          Amount=@Amount,
          IsActive = @IsActive,
          UserID = @UserID,
          UserDate = @UserDate,
          CompanyNo = @CompanyNo

       WHERE
          CashSlipDetailsNo = @CashSlipDetailsNo

     END
ELSE
     BEGIN
       --Insert new row
       Declare @Id numeric
       SELECT @Id=IsNull(Max(CashSlipDetailsNo),0) From TCashSlipDetails
       DBCC CHECKIDENT('TCashSlipDetails', RESEED, @Id)
       INSERT INTO TCashSlipDetails(
          CashSlipNo,
          Note,
          RSType,
          Pieces,
          Amount,
          IsActive,
          UserID,
          UserDate,
          CompanyNo
)
       VALUES(
          @CashSlipNo,
          @Note,
          @RSType,
          @Pieces,
          @Amount,
          @IsActive,
          @UserID,
          @UserDate,
          @CompanyNo
)

END

<BREAK>

Create PROCEDURE  [dbo].[DeleteTCashSlip] 
@CashSlipNo                       numeric(18)

AS
DELETE FROM TCashSlipDetails 
       WHERE
          CashSlipNo = @CashSlipNo

DELETE FROM TCashSlip
       WHERE
          CashSlipNo = @CashSlipNo

<BREAK>

Create PROCEDURE  [dbo].[DeleteTCashSlipDetails] 
@CashSlipDetailsNo                     numeric(18)

AS
DELETE FROM TCashSlipDetails 
       WHERE
          CashSlipDetailsNo = @CashSlipDetailsNo

<BREAK>

Create PROCEDURE [dbo].[GetGSTSummary] 
	@FromDate datetime,
	@ToDate datetime,
	@VchType numeric(18)
AS


Select * from (
select pkvoucherno , a.ledgerno ,b.ledgername ,c.gstno, b.statecode , a.vouchertypecode ,voucheruserno , voucherdate , billedamount ,[0] ,[2.5],[6],[9],[14],0 as tax0,
0 as tax25,0 as tax6,0 as tax9,0 as tax14  from 
(
Select fkvoucherno ,sgstpercentage , (sgstamount)  as taxamount from tstock) as tb1
pivot
(
sum(taxamount)
for  sgstpercentage in ([0],[2.5],[6],[9],[14]
)
)
 as tb2
 inner join tvoucherentry as a on tb2.fkvoucherno = a.pkvoucherno inner join mledger as b on a.ledgerno = b.ledgerno
inner join mledgerdetails as c on b.ledgerno = c.ledgerno  and b.statecode=27
WHERE  a.VoucherTypeCode=+cast(@VchType as varchar)
			and a.VoucherDate>=''+cast(@FromDate as varchar)+'' and a.VoucherDate<=''+cast(@ToDate as varchar)+'' 

union 

select pkvoucherno , a.ledgerno ,b.ledgername ,c.gstno, b.statecode , a.vouchertypecode ,voucheruserno , voucherdate , billedamount ,0 as [0],0 as [2.5],0 as [6],0 as [9],0 as [14],
[0] as tax0,
[2.5] as tax25,[6] as tax6,[9] as tax9,[14] as tax14  from 

 
(
Select fkvoucherno ,sgstpercentage , (netamount)  as taxamount from tstock) as tb1
pivot
(
sum(taxamount)
for  sgstpercentage in ([0],[2.5],[6],[9],[14]
)
)
 as tb2
 inner join tvoucherentry as a on tb2.fkvoucherno = a.pkvoucherno inner join mledger as b on a.ledgerno = b.ledgerno  
inner join mledgerdetails as c on b.ledgerno = c.ledgerno  and b.statecode=27
WHERE  a.VoucherTypeCode= cast(@VchType as varchar)
			and a.VoucherDate>=''+cast(@FromDate as varchar)+'' and a.VoucherDate<=''+cast(@ToDate as varchar)+'' 
) as tbl4 

order by voucheruserno

<BREAK>


SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON

ALTER TABLE dbo.MLanguageDictionary ADD
	KarnatakaVal nvarchar(50) NULL

<BREAK>

ALTER PROCEDURE [dbo].[AddMLanguageDictionary]
     @PkSrNo                              numeric(18),
     @EnglishVal                          varchar(50),
     @MarathiVal                          nvarchar(50),
     @HindiVal                          nvarchar(50),
  @KarnatakaVal                          nvarchar(50),
	 @CompanyNo						    numeric(18)
AS
IF EXISTS(select PkSrNo from MLanguageDictionary
          where
          PkSrNo = @PkSrNo)
     BEGIN
       --Update existing row
       UPDATE MLanguageDictionary
       SET
          EnglishVal = @EnglishVal,
          MarathiVal = Case When (@MarathiVal<>'') then @MarathiVal else MarathiVal end,
          HindiVal = Case When (@HindiVal<>'') then @HindiVal else HindiVal end,
KarnatakaVal = Case When (@KarnatakaVal<>'') then @KarnatakaVal else KarnatakaVal end,
		  CompanyNo=@CompanyNo,
          StatusNo=2
       WHERE
          PkSrNo = @PkSrNo

     END
ELSE
     BEGIN
       --Insert new row
       Declare @Id numeric
       SELECT @Id=IsNull(Max(PkSrNo),0) From MLanguageDictionary
       DBCC CHECKIDENT('MLanguageDictionary', RESEED, @Id)
       INSERT INTO MLanguageDictionary(
          EnglishVal,
          MarathiVal,
          HindiVal,
KarnatakaVal,
		  CompanyNo,
          StatusNo
)
       VALUES(
          @EnglishVal,
          @MarathiVal,
          @HindiVal,
@KarnatakaVal,
		  @CompanyNo,
          1
)

END

<BREAK>

ALTER TABLE dbo.TStock ADD
	ContainerCharges numeric(18, 2) NULL,
	ContainerChargesAmt numeric(18, 2) NULL,
	PackagingChargesAmt numeric(18, 2) NULL

<BREAK>

ALTER PROCEDURE [dbo].[AddTStock]
     @PkStockTrnNo                        numeric(18),
	 @FKVoucherNo						  numeric(18),
     @FkVoucherTrnNo                      numeric(18),
     @FkVoucherSrNo                       numeric(18),
     @GroupNo                             numeric(18),
     @ItemNo                              numeric(18),
     @TrnCode                             numeric(18),
     @Quantity                            numeric(18,2),
     @BilledQuantity                      numeric(18,2),
     @Rate                                numeric(18,2),
     @Amount                              numeric(18,2),
	 @NetRate							  numeric(18,2),
	 @NetAmount							  numeric(18,2),
     @SGSTPercentage                       numeric(18,2),
     @SGSTAmount                           numeric(18,2),
     @AddTaxPercentage                    numeric(18,2),
     @AddTaxAmount                        numeric(18,2),
	 @DiscPercentage					  numeric(18,2),
	 @DiscAmount						  numeric(18,2),
	 @DiscRupees						  numeric(18,2),
	 @DiscPercentage2					  numeric(18,2),
	 @DiscAmount2						  numeric(18,2),
	 @DiscRupees2						  numeric(18,2),
	 @FkUomNo							  numeric(18),
	 @FkStockBarCodeNo				      numeric(18),
	 @FkRateSettingNo					  numeric(18),
	 @FkItemTaxInfo						  numeric(18),
	 @FKAddItemTaxSettingNo				  numeric(18),
	 @FreeQty                             numeric(18,2),
	 @FreeUOMNo							  numeric(18),   
     @UserID                              numeric(18),
     @UserDate                            datetime,
	 @CompanyNo							  numeric(18),
	 @LandedRate						  numeric(18,2),
	 @FkGRNNo						      numeric(18),
	 @BatchNo							  varchar(50),
	 @NoOfBag							  numeric(18),
	 @CessValue							  numeric(18,2),
	 @PackagingCharges					  numeric(18,2),
--	 @LBTPerce							  numeric(18,2),
--	 @LBTApplicableAmount				  numeric(18,2),
--	 @LBTAmount							  numeric(18,2),
	 @DisplayItemName					  varchar(500),
	-- @MfgCompNo							  numeric(18,0),

     @CGSTPercentage                      numeric(18, 2),
     @CGSTAmount                          numeric(18, 2),
     @IGSTPercentage                      numeric(18, 2),
     @IGSTAmount                          numeric(18, 2),
     @FkItemTaxInfo2                         numeric(18, 0),

     @CessPercentage                       numeric(18, 2),
     @CessAmount                           numeric(18, 2),
	@TRWeight			numeric(18, 2),
	@GRWeight			numeric(18, 2),
	@Remarks		 varchar(500),
	@Freight  numeric(18, 2),
	@OtherCharges   numeric(18, 2),
	@SalesMan int,
	@IType bit,
    @ContainerCharges                     numeric(18, 2),
	@ContainerChargesAmt                     numeric(18, 2),
	@PackagingChargesAmt                     numeric(18, 2),
    @ReturnID							  int output


AS
IF EXISTS(select PkStockTrnNo from TStock
          where
          PkStockTrnNo = @PkStockTrnNo)
     BEGIN
       --Update existing row
       UPDATE TStock
       SET
		  FKVoucherNo = @FKVoucherNo,
          FkVoucherTrnNo = @FkVoucherTrnNo,
          FkVoucherSrNo = @FkVoucherSrNo,
          GroupNo = @GroupNo,
          ItemNo = @ItemNo,
          TrnCode = @TrnCode,
          Quantity = @Quantity,
          BilledQuantity = @BilledQuantity,
          Rate = @Rate,
          Amount = @Amount,
		  NetRate = @NetRate,
		  NetAmount = @NetAmount,
          SGSTPercentage = @SGSTPercentage,
          SGSTAmount = @SGSTAmount,
          AddTaxPercentage = @AddTaxPercentage,
          AddTaxAmount = @AddTaxAmount,
		  DiscPercentage = @DiscPercentage,
		  DiscAmount = @DiscAmount,
		  DiscRupees = @DiscRupees,
		  DiscPercentage2 = @DiscPercentage2,
		  DiscAmount2 = @DiscAmount2,
		  DiscRupees2 = @DiscRupees2,
	      FkUomNo = @FkUomNo,
	      FkStockBarCodeNo = @FkStockBarCodeNo,
	      FkRateSettingNo = @FkRateSettingNo,
	      FkItemTaxInfo = @FkItemTaxInfo,
		  FKAddItemTaxSettingNo = @FKAddItemTaxSettingNo,
		  FreeQty = @FreeQty,
	      FreeUOMNo = @FreeUOMNo,
          UserID = @UserID,
          UserDate = @UserDate,
		  CompanyNo= @CompanyNo,
		  LandedRate = @LandedRate,
		  StatusNo = 2,
		  FkGRNNo = @FkGRNNo,
		  BatchNo = @BatchNo,
		  NoOfBag = @NoOfBag,
		  CessValue = @CessValue,
	      PackagingCharges = @PackagingCharges,
--		  LBTPerce = @LBTPerce,
--		  LBTApplicableAmount = @LBTApplicableAmount,
--		  LBTAmount = @LBTAmount,
	      DisplayItemName = @DisplayItemName,
--		  MfgCompNo = @MfgCompNo,
  CGSTPercentage=@CGSTPercentage,                    
     CGSTAmount=@CGSTAmount,                          
     IGSTPercentage=@IGSTPercentage,                     
     IGSTAmount=@IGSTAmount,
              FkItemTaxInfo2   = @FkItemTaxInfo2,
    CessPercentage=@CessPercentage,
    CessAmount=@CessAmount,
          --ModifiedBy = isnull(ModifiedBy,'') + cast(@UserID as varchar)+'@'+ CONVERT(VARCHAR(10), GETDATE(), 105)
     TRWeight= @TRWeight,
	GRWeight=@GRWeight,
	Remarks=@Remarks,
	Freight =@Freight,
    OtherCharges=  @OtherCharges,
    ContainerCharges =@ContainerCharges,
	ContainerChargesAmt =@ContainerChargesAmt,
	PackagingChargesAmt =@PackagingChargesAmt,
SalesMan=@SalesMan,
IType=@IType
 WHERE
          PkStockTrnNo = @PkStockTrnNo
		  set @ReturnID=@PkStockTrnNo    

     END
ELSE
     BEGIN
       --Insert new row
       Declare @Id numeric
       SELECT @Id=IsNull(Max(PkStockTrnNo),0) From TStock
       DBCC CHECKIDENT('TStock', RESEED, @Id)
       INSERT INTO TStock(
		  FKVoucherNo,
          FkVoucherTrnNo,
          FkVoucherSrNo,
          GroupNo,
          ItemNo,
          TrnCode,
          Quantity,
          BilledQuantity,
          Rate,
          Amount,
		  NetRate,
		  NetAmount,
          SGSTPercentage,
          SGSTAmount,
          AddTaxPercentage,
          AddTaxAmount,
		  DiscPercentage,
		  DiscAmount,
		  DiscRupees,
		  DiscPercentage2,
		  DiscAmount2,
		  DiscRupees2,
		  FkUomNo,
		  FkStockBarCodeNo,
		  FkRateSettingNo,
		  FkItemTaxInfo,
		  FKAddItemTaxSettingNo,
		  IsVoucherLock,
	      FreeQty,
		  FreeUOMNo,
          UserID,
          UserDate,
		  CompanyNo,
		  LandedRate,
		  StatusNo,
		  FkGRNNo,
		  BatchNo,
          NoOfBag,
          CessValue,
		  PackagingCharges,
--		  LBTPerce,
--		  LBTApplicableAmount,
--		  LBTAmount,
--		  MfgCompNo,
      DisplayItemName,
 CGSTPercentage,                    
          CGSTAmount,                          
          IGSTPercentage,                     
          IGSTAmount, 
       FkItemTaxInfo2,
CessPercentage,
CessAmount,
     TRWeight,
GRWeight,
Remarks,
Freight,
    OtherCharges,
ContainerCharges,
ContainerChargesAmt,
PackagingChargesAmt,
SalesMan,
IType
          
)
       VALUES(
		  @FKVoucherNo,
          @FkVoucherTrnNo,
          @FkVoucherSrNo,
          @GroupNo,
          @ItemNo,
          @TrnCode,
          @Quantity,
          @BilledQuantity,
          @Rate,
		  @Amount,
		  @NetRate,
          @NetAmount,
          @SGSTPercentage,
          @SGSTAmount,
          @AddTaxPercentage,
          @AddTaxAmount,
	      @DiscPercentage,
		  @DiscAmount,
		  @DiscRupees,
		  @DiscPercentage2,
		  @DiscAmount2,
		  @DiscRupees2,
		  @FkUomNo,
		  @FkStockBarCodeNo,
		  @FkRateSettingNo,
		  @FkItemTaxInfo,
		  @FKAddItemTaxSettingNo,
		  'false',
	      @FreeQty,
		  @FreeUOMNo,
          @UserID,
          @UserDate,
		  @CompanyNo,
		  @LandedRate,
		  1,
		  @FkGRNNo,
		  @BatchNo,
		  @NoOfBag,
		  @CessValue,
		  @PackagingCharges,
--		  @LBTPerce,
--		  @LBTApplicableAmount,
--          @LBTAmount,
--		  @MfgCompNo,
		  @DisplayItemName,
@CGSTPercentage,                    
          @CGSTAmount,                          
          @IGSTPercentage,                     
          @IGSTAmount,
         @FkItemTaxInfo2,
@CessPercentage,
@CessAmount,
@TRWeight,
@GRWeight,
@Remarks,
@Freight,
@OtherCharges,
@ContainerCharges,
@ContainerChargesAmt,
@PackagingChargesAmt,
@SalesMan,@IType
)
Set @ReturnID=Scope_Identity()
END

<BREAK>

INSERT INTO [Yadi2018].[dbo].[MLanguage]
           ([LanguageName]
           ,[FontName]
           ,[FontSize]
           ,[FontBold]
           ,[CompanyNo]
           ,[StatusNo])
     VALUES
           ('Karnataka','Nudi 01 e',16,'False',1,3)
<BREAK>

IF NOT EXISTS(select ScriptNo from DBVersionLog where ScriptNo = 6)
BEGIN

UPDATE MSetting SET AppVersion = 'LMT1Er+CsO8=';

INSERT INTO [DBVersionLog]
           ([ScriptNo]
           ,[ScriptDescription])
     VALUES
           (6
           ,'Cash Dnomination& Email Password setting also karnataka font')

END

<BREAK>

CREATE TABLE [dbo].[TGenerateIMEI](
	[PkGenerateIMEIID] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
	[IMEINo] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FkVoucherNo]  [numeric](18, 0) NULL,
	[FkStockTrnNo] [numeric](18, 0) NULL,
    [ItemNo]   [numeric](18, 0) NULL,
    [IsSales]  [bit] NULL,
    [SalesStockTrnNo]   [numeric](18, 0) NULL,
    [SalesFkVoucherNo]  [numeric](18, 0) NULL,
	[IsActive] [bit] NULL,
	[UserID] [numeric](18, 0) NULL,
	[UserDate] [datetime] NULL,
	[CompanyNo] [numeric](18, 0) NULL,

 CONSTRAINT [PK_TGenerateIMEI] PRIMARY KEY CLUSTERED 
(
	[PkGenerateIMEIID] ASC
)WITH (PAD_INDEX  = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

<BREAK>

create PROCEDURE [dbo].[AddTGenerateIMEI]
     @PkGenerateIMEIID               numeric(18),
     @IMEINo                         varchar(50),
     @FkVoucherNo                    numeric(18),
     @FkStockTrnNo                   numeric(18),   
     @ItemNo                         numeric(18),  
     @IsSales                        bit,
     @SalesStockTrnNo                numeric(18),  
     @SalesFkVoucherNo               numeric(18),  
     @IsActive                       bit,
     @UserID                         numeric(18),
     @UserDate                       datetime,
     @CompanyNo                      numeric(18)
     
AS
IF EXISTS(select PkGenerateIMEIID from TGenerateIMEI
          where
          PkGenerateIMEIID = @PkGenerateIMEIID and IMEINo=@IMEINo)
     BEGIN
       --Update existing row
       UPDATE TGenerateIMEI
       SET
          IMEINo = @IMEINo,
          FkVoucherNo = @FkVoucherNo,
          FkStockTrnNo=@FkStockTrnNo,
          ItemNo = @ItemNo,
          IsSales=@IsSales,
          SalesStockTrnNo=@SalesStockTrnNo,  
          SalesFkVoucherNo=@SalesFkVoucherNo,      
          IsActive = @IsActive,
          UserID = @UserID,
          UserDate = @UserDate,
          CompanyNo = @CompanyNo

       WHERE
          PkGenerateIMEIID = @PkGenerateIMEIID and IMEINo=@IMEINo

     END
ELSE
     BEGIN
       --Insert new row
       Declare @Id numeric
       SELECT @Id=IsNull(Max(PkGenerateIMEIID),0) From TGenerateIMEI
       DBCC CHECKIDENT('TGenerateIMEI', RESEED, @Id)
       INSERT INTO TGenerateIMEI(
          IMEINo,
          FkVoucherNo,
          FkStockTrnNo,
          ItemNo,
          IsSales,
          SalesStockTrnNo,  
          SalesFkVoucherNo,   
          IsActive,
          UserID,
          UserDate,
          CompanyNo
)
       VALUES(
          @IMEINo,
          @FkVoucherNo,
          @FkStockTrnNo,
          @ItemNo,
          @IsSales,
          @SalesStockTrnNo,  
          @SalesFkVoucherNo,   
          @IsActive,
          @UserID,
          @UserDate,
          @CompanyNo
)

END

<BREAK>

ALTER PROCEDURE [dbo].[GetBill]
@PkVoucherNo                numeric(18),
@Type						int

AS
Begin

SELECT        TVoucherEntry.VoucherUserNo, TVoucherEntry.VoucherDate, CASE WHEN (@Type = 1) 
                          THEN MStockItems_V_1.ItemName ELSE MStockItems_V_1.ItemNameLang END AS ItemName, MRateSetting.MRP, TStock.Quantity, TStock.GRWeight, 
                         TStock.TRWeight, TStock.PackagingCharges, TStock.NoOfBag, TStock.CessValue, TStock.OtherCharges AS Dhekharek, TStock.Rate, TStock.Amount, 
                         MUOM.UOMName, TStock.SGSTPercentage, TStock.SGSTAmount, TStock.DiscPercentage, TStock.DiscAmount, TStock.DiscRupees, TStock.DiscPercentage2, 
                         TStock.DiscAmount2, TStock.DiscRupees2, TStock.CGSTPercentage, TStock.CGSTAmount, TStock.IGSTPercentage, TStock.IGSTAmount, TStock.CessPercentage, 
                         TStock.CessAmount, MLedgerDetails.GSTNO AS CustGSTNo, MLedgerDetails.PANNo AS CustPANNo, MLedgerDetails.FSSAI, MFirm.GSTNO AS CmpGSTNo, MUOM.UomLang,
                         MLedger.StateCode, MItemMaster.HSNCode, TVoucherEntry.BilledAmount, CASE WHEN (@Type = 1) THEN LedgerName ELSE LedgerLangName END AS LedgerName, 
                         MLedger.ContactPerson, MLedgerDetails.PhNo1 AS CustPhNo, MLedgerDetails.MobileNo1 AS CustMoNo, CASE WHEN (@Type = 1) 
                         THEN MLedgerDetails.Address ELSE MLedgerDetails.AddressLang END AS CustAddress, MFirm.Address + ' / ' + Mfirm.pincode AS CmpAddress, MFirm.EmailID AS CmpEmailID, 
                         MFirm.PhoneNo1 + ' / ' + MFirm.PhoneNo2 AS CompPhoneNo,MFirm.FSSAINo as CompFSSAINo, TVoucherEntry.Reference, TVoucherEntry.VoucherTime, 
                         TStock.NetAmount + TStock.CessValue + TStock.PackagingCharges + TStock.OtherCharges AS NetAmount, TStock.NetRate, TStock.DisplayItemName, 
                         TStock.Remarks AS RemarksItemlevel, '' AS TransporterName, TVoucherEntry.LRNo, MTransporterMode.TransModeName, TVoucherEntry.TransNoOfItems,
                             (SELECT        SettingValue
                               FROM            MSettings
                               WHERE        (PkSettingNo = 311)) AS DisplayTrans, TVoucherEntry.Remark, MState.StateName, MCity.CityName, MPayType.PayTypeName
							      ,MLedgerDetails_1.address as CustDeliveryAddress,Mcity_1.Cityname as custDeliverycity
FROM            TStock INNER JOIN
                         MUOM ON TStock.FkUomNo = MUOM.UOMNo INNER JOIN
                         TVoucherEntry ON TStock.FKVoucherNo = TVoucherEntry.PkVoucherNo INNER JOIN
                         MFirm ON TVoucherEntry.CompanyNo = MFirm.FirmNo INNER JOIN
                         MItemMaster ON TStock.ItemNo = MItemMaster.ItemNo INNER JOIN
                         dbo.MStockItems_V(NULL, NULL, NULL, NULL, NULL, NULL, NULL) AS MStockItems_V_1 ON TStock.ItemNo = MStockItems_V_1.ItemNo INNER JOIN
                         MLedger ON TVoucherEntry.LedgerNo = MLedger.LedgerNo INNER JOIN
                         MLedgerDetails ON MLedgerDetails.LedgerNo = MLedger.LedgerNo  INNER JOIN
                         MRateSetting ON TStock.FkRateSettingNo = MRateSetting.PkSrNo LEFT OUTER JOIN
                         MTransporterMode ON TVoucherEntry.TransportMode = MTransporterMode.TransModeNo INNER JOIN
                         MState ON MLedger.StateCode = MState.StateCode Left outer JOIN
                         MCity ON MLedgerDetails.CityNo = MCity.CityNo INNER JOIN
                         MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo
						 left outer JOIN
                         TDeliveryAddress ON  TVoucherEntry.PkVoucherNo = TDeliveryAddress.FkVoucherno AND
                          TVoucherEntry.LedgerNo = TDeliveryAddress.Ledgerno
						  Left outer join MLedgerDetails as MLedgerDetails_1
						   on MLedgerDetails_1.Ledgerdetailsno=TDeliveryAddress.Ledgerdetailsno 
						   and TDeliveryAddress.Ledgerno=MLedgerDetails_1.DeliveryLedgerNo
 Left outer join mcity as mcity_1 on MLedgerDetails_1.cityno=mcity_1.cityno
WHERE        (TVoucherEntry.PkVoucherNo = @PkVoucherNo)

ORDER BY TStock.PkStockTrnNo
END

<BREAK>

--<EndVersion = 1.0.1.4>

--<Version = 1.0.1.5>


SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON

ALTER TABLE dbo.MRateSetting ADD
	Hamali  numeric(18,2) NULL

ALTER TABLE dbo.MRateSetting ADD CONSTRAINT
	DF_MRateSetting_Hamali DEFAULT 0.0 FOR Hamali

<BREAK>

UPDATE dbo.MRateSetting SET Hamali = 0 where Hamali is null

<BREAK>

SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON

ALTER TABLE dbo.TStock ADD
	Hamali  numeric(18,2) NULL

ALTER TABLE dbo.TStock ADD CONSTRAINT
	DF_TStock_Hamali DEFAULT 0.0 FOR Hamali

<BREAK>

UPDATE dbo.TStock SET Hamali = 0 where Hamali is null

<BREAK>

ALTER PROCEDURE [dbo].[AddMRateSetting2]
     @PkSrNo                              numeric(18),
--   @FkBcdSrNo                           numeric(18),
     @ItemNo                              numeric(18),
     @FromDate                            datetime,
     @PurRate                             numeric(18,4),
	 @MRP				                  numeric(18,4),
	 @UOMNo                               numeric(18),
	 @ASaleRate                           numeric(18,4),
	 @BSaleRate                           numeric(18,4),
	 @CSaleRate                           numeric(18,4),
	 @DSaleRate                           numeric(18,4),
	 @ESaleRate                           numeric(18,4),
	 @StockConversion					  Numeric(18,2),
--	 @PerOfRateVariation				  numeric(18),
     @MKTQty						      numeric(18),
	 @IsActive							  bit,
	 @UserID                              numeric(18),
     @UserDate                            datetime,
	 @CompanyNo							  numeric(18),
     @Weight1                             Numeric(18,2),  
     @Weight2                             Numeric(18,2),
     @LPPerc                             Numeric(18,2),  
     @SPPerc                             Numeric(18,2),
     @Hamali                             Numeric(18,2)
AS
if(cast(@FromDate as datetime) < cast('02-02-1900 00:00:00' as datetime))
begin
	set @FromDate= Convert(datetime,Cast(getdate() as varchar))
end
IF EXISTS(select PkSrNo from MRateSetting
          where
          PkSrNo = @PkSrNo)
     BEGIN
       --Update existing row
       UPDATE MRateSetting
       SET

          ItemNo = @ItemNo,
          FromDate = @FromDate,
          PurRate = @PurRate,
	      MRP = @MRP,
		  UOMNo=@UOMNo,                               
		  ASaleRate = @ASaleRate,
		  BSaleRate = @BSaleRate,
		  CSaleRate = @CSaleRate,
		  DSaleRate = @DSaleRate,
		  ESaleRate = @ESaleRate,
		  StockConversion=@StockConversion,
		  MKTQty=@MKTQty,
		  IsActive=@IsActive,
          UserID = @UserID,
          UserDate = @UserDate,
		  CompanyNo=@CompanyNo,
          StatusNo=2,
          Weight1 = @Weight1,                              
          Weight2 = @Weight2,
          LPPerc = @LPPerc,                              
          SPPerc = @SPPerc,
          Hamali=@Hamali  
       WHERE
          PkSrNo = @PkSrNo

     END
ELSE
     BEGIN
       --Insert new row
       Declare @Id numeric
       SELECT @Id=IsNull(Max(PkSrNo),0) From MRateSetting
       DBCC CHECKIDENT('MRateSetting', RESEED, @Id)
       INSERT INTO MRateSetting(
          ItemNo,
          FromDate,
          PurRate,
	      MRP,
		  UOMNo,
		  ASaleRate,
		  BSaleRate,
		  CSaleRate,
		  DSaleRate,
		  ESaleRate,
		  StockConversion,

		  MKTQty,
		  IsActive,
          UserID,
          UserDate,
		  CompanyNo,
          StatusNo,
          Weight1 ,                             
          Weight2,
          LPPerc,
          SPPerc,
          Hamali
)
       VALUES(
          @ItemNo,
          @FromDate,
          @PurRate,
		  @MRP,
		  @UOMNo,
          @ASaleRate,
          @BSaleRate,
          @CSaleRate,
          @DSaleRate,
          @ESaleRate,
		  @StockConversion,
		  @MKTQty,
		  @IsActive,
          @UserID,
          @UserDate,
		  @CompanyNo,
          1,
          @Weight1,                              
          @Weight2,
          @LPPerc,
          @SPPerc,
          @Hamali
)

END

<BREAK>

ALTER PROCEDURE [dbo].[AddTStock]
     @PkStockTrnNo                        numeric(18),
	 @FKVoucherNo						  numeric(18),
     @FkVoucherTrnNo                      numeric(18),
     @FkVoucherSrNo                       numeric(18),
     @GroupNo                             numeric(18),
     @ItemNo                              numeric(18),
     @TrnCode                             numeric(18),
     @Quantity                            numeric(18,2),
     @BilledQuantity                      numeric(18,2),
     @Rate                                numeric(18,2),
     @Amount                              numeric(18,2),
	 @NetRate							  numeric(18,2),
	 @NetAmount							  numeric(18,2),
     @SGSTPercentage                       numeric(18,2),
     @SGSTAmount                           numeric(18,2),
     @AddTaxPercentage                    numeric(18,2),
     @AddTaxAmount                        numeric(18,2),
	 @DiscPercentage					  numeric(18,2),
	 @DiscAmount						  numeric(18,2),
	 @DiscRupees						  numeric(18,2),
	 @DiscPercentage2					  numeric(18,2),
	 @DiscAmount2						  numeric(18,2),
	 @DiscRupees2						  numeric(18,2),
	 @FkUomNo							  numeric(18),
	 @FkStockBarCodeNo				      numeric(18),
	 @FkRateSettingNo					  numeric(18),
	 @FkItemTaxInfo						  numeric(18),
	 @FKAddItemTaxSettingNo				  numeric(18),
	 @FreeQty                             numeric(18,2),
	 @FreeUOMNo							  numeric(18),   
     @UserID                              numeric(18),
     @UserDate                            datetime,
	 @CompanyNo							  numeric(18),
	 @LandedRate						  numeric(18,2),
	 @FkGRNNo						      numeric(18),
	 @BatchNo							  varchar(50),
	 @NoOfBag							  numeric(18),
	 @CessValue							  numeric(18,2),
	 @PackagingCharges					  numeric(18,2),
--	 @LBTPerce							  numeric(18,2),
--	 @LBTApplicableAmount				  numeric(18,2),
--	 @LBTAmount							  numeric(18,2),
	 @DisplayItemName					  varchar(500),
	-- @MfgCompNo							  numeric(18,0),

     @CGSTPercentage                      numeric(18, 2),
     @CGSTAmount                          numeric(18, 2),
     @IGSTPercentage                      numeric(18, 2),
     @IGSTAmount                          numeric(18, 2),
     @FkItemTaxInfo2                         numeric(18, 0),

     @CessPercentage                       numeric(18, 2),
     @CessAmount                           numeric(18, 2),
	@TRWeight			numeric(18, 2),
	@GRWeight			numeric(18, 2),
	@Remarks		 varchar(500),
	@Freight  numeric(18, 2),
	@OtherCharges   numeric(18, 2),
	@SalesMan int,
	@IType bit,
    @ContainerCharges                     numeric(18, 2),
	@ContainerChargesAmt                     numeric(18, 2),
	@PackagingChargesAmt                     numeric(18, 2),
     @Hamali                             Numeric(18,2),
    @ReturnID							  int output

AS
IF EXISTS(select PkStockTrnNo from TStock
          where
          PkStockTrnNo = @PkStockTrnNo)
     BEGIN
       --Update existing row
       UPDATE TStock
       SET
		  FKVoucherNo = @FKVoucherNo,
          FkVoucherTrnNo = @FkVoucherTrnNo,
          FkVoucherSrNo = @FkVoucherSrNo,
          GroupNo = @GroupNo,
          ItemNo = @ItemNo,
          TrnCode = @TrnCode,
          Quantity = @Quantity,
          BilledQuantity = @BilledQuantity,
          Rate = @Rate,
          Amount = @Amount,
		  NetRate = @NetRate,
		  NetAmount = @NetAmount,
          SGSTPercentage = @SGSTPercentage,
          SGSTAmount = @SGSTAmount,
          AddTaxPercentage = @AddTaxPercentage,
          AddTaxAmount = @AddTaxAmount,
		  DiscPercentage = @DiscPercentage,
		  DiscAmount = @DiscAmount,
		  DiscRupees = @DiscRupees,
		  DiscPercentage2 = @DiscPercentage2,
		  DiscAmount2 = @DiscAmount2,
		  DiscRupees2 = @DiscRupees2,
	      FkUomNo = @FkUomNo,
	      FkStockBarCodeNo = @FkStockBarCodeNo,
	      FkRateSettingNo = @FkRateSettingNo,
	      FkItemTaxInfo = @FkItemTaxInfo,
		  FKAddItemTaxSettingNo = @FKAddItemTaxSettingNo,
		  FreeQty = @FreeQty,
	      FreeUOMNo = @FreeUOMNo,
          UserID = @UserID,
          UserDate = @UserDate,
		  CompanyNo= @CompanyNo,
		  LandedRate = @LandedRate,
		  StatusNo = 2,
		  FkGRNNo = @FkGRNNo,
		  BatchNo = @BatchNo,
		  NoOfBag = @NoOfBag,
		  CessValue = @CessValue,
	      PackagingCharges = @PackagingCharges,
--		  LBTPerce = @LBTPerce,
--		  LBTApplicableAmount = @LBTApplicableAmount,
--		  LBTAmount = @LBTAmount,
	      DisplayItemName = @DisplayItemName,
--		  MfgCompNo = @MfgCompNo,
  CGSTPercentage=@CGSTPercentage,                    
     CGSTAmount=@CGSTAmount,                          
     IGSTPercentage=@IGSTPercentage,                     
     IGSTAmount=@IGSTAmount,
              FkItemTaxInfo2   = @FkItemTaxInfo2,
    CessPercentage=@CessPercentage,
    CessAmount=@CessAmount,
          --ModifiedBy = isnull(ModifiedBy,'') + cast(@UserID as varchar)+'@'+ CONVERT(VARCHAR(10), GETDATE(), 105)
     TRWeight= @TRWeight,
	GRWeight=@GRWeight,
	Remarks=@Remarks,
	Freight =@Freight,
    OtherCharges=  @OtherCharges,
    ContainerCharges =@ContainerCharges,
	ContainerChargesAmt =@ContainerChargesAmt,
	PackagingChargesAmt =@PackagingChargesAmt,
SalesMan=@SalesMan,
IType=@IType,
        Hamali=  @Hamali
 WHERE
          PkStockTrnNo = @PkStockTrnNo
		  set @ReturnID=@PkStockTrnNo    

     END
ELSE
     BEGIN
       --Insert new row
       Declare @Id numeric
       SELECT @Id=IsNull(Max(PkStockTrnNo),0) From TStock
       DBCC CHECKIDENT('TStock', RESEED, @Id)
       INSERT INTO TStock(
		  FKVoucherNo,
          FkVoucherTrnNo,
          FkVoucherSrNo,
          GroupNo,
          ItemNo,
          TrnCode,
          Quantity,
          BilledQuantity,
          Rate,
          Amount,
		  NetRate,
		  NetAmount,
          SGSTPercentage,
          SGSTAmount,
          AddTaxPercentage,
          AddTaxAmount,
		  DiscPercentage,
		  DiscAmount,
		  DiscRupees,
		  DiscPercentage2,
		  DiscAmount2,
		  DiscRupees2,
		  FkUomNo,
		  FkStockBarCodeNo,
		  FkRateSettingNo,
		  FkItemTaxInfo,
		  FKAddItemTaxSettingNo,
		  IsVoucherLock,
	      FreeQty,
		  FreeUOMNo,
          UserID,
          UserDate,
		  CompanyNo,
		  LandedRate,
		  StatusNo,
		  FkGRNNo,
		  BatchNo,
          NoOfBag,
          CessValue,
		  PackagingCharges,
--		  LBTPerce,
--		  LBTApplicableAmount,
--		  LBTAmount,
--		  MfgCompNo,
      DisplayItemName,
 CGSTPercentage,                    
          CGSTAmount,                          
          IGSTPercentage,                     
          IGSTAmount, 
       FkItemTaxInfo2,
CessPercentage,
CessAmount,
     TRWeight,
GRWeight,
Remarks,
Freight,
    OtherCharges,
ContainerCharges,
ContainerChargesAmt,
PackagingChargesAmt,
SalesMan,
IType,
          Hamali
          
)
       VALUES(
		  @FKVoucherNo,
          @FkVoucherTrnNo,
          @FkVoucherSrNo,
          @GroupNo,
          @ItemNo,
          @TrnCode,
          @Quantity,
          @BilledQuantity,
          @Rate,
		  @Amount,
		  @NetRate,
          @NetAmount,
          @SGSTPercentage,
          @SGSTAmount,
          @AddTaxPercentage,
          @AddTaxAmount,
	      @DiscPercentage,
		  @DiscAmount,
		  @DiscRupees,
		  @DiscPercentage2,
		  @DiscAmount2,
		  @DiscRupees2,
		  @FkUomNo,
		  @FkStockBarCodeNo,
		  @FkRateSettingNo,
		  @FkItemTaxInfo,
		  @FKAddItemTaxSettingNo,
		  'false',
	      @FreeQty,
		  @FreeUOMNo,
          @UserID,
          @UserDate,
		  @CompanyNo,
		  @LandedRate,
		  1,
		  @FkGRNNo,
		  @BatchNo,
		  @NoOfBag,
		  @CessValue,
		  @PackagingCharges,
--		  @LBTPerce,
--		  @LBTApplicableAmount,
--          @LBTAmount,
--		  @MfgCompNo,
		  @DisplayItemName,
@CGSTPercentage,                    
          @CGSTAmount,                          
          @IGSTPercentage,                     
          @IGSTAmount,
         @FkItemTaxInfo2,
@CessPercentage,
@CessAmount,
@TRWeight,
@GRWeight,
@Remarks,
@Freight,
@OtherCharges,
@ContainerCharges,
@ContainerChargesAmt,
@PackagingChargesAmt,
@SalesMan,@IType,
          @Hamali
)
Set @ReturnID=Scope_Identity()
END

<BREAK>

ALTER Function [dbo].[GetItemRateAll]
(
@PItemNo		           numeric(18),
--@PBarCodeNo			   numeric(18),
@PUOMNo	               numeric(18),
@PMRP				   numeric(18,4),
@POnDate		           datetime,
@PGroupNo				numeric(18)
)
RETURNS @TRate TABLE  (PkSrNo numeric(18)/*,FkBcdSrNo numeric(18)*/ ,ItemNo numeric(18),FromDate datetime,PurRate numeric(18,2),MRP numeric(18,2),
ASaleRate numeric(18, 2),BSaleRate numeric(18, 2),CSaleRate numeric(18, 2),DSaleRate numeric(18, 2),ESaleRate numeric(18, 2)
,UOMNo numeric(18), StockConversion numeric(18,2),PerOfRateVariation numeric(18, 2),MKTQty numeric(18,0),IsActive bit,
Stock numeric(18, 2),Stock2 numeric(18, 2),Weight1 numeric(18, 2),Weight2 numeric(18, 2),LPPerc numeric(18, 2),SPPerc numeric(18, 2),Hamali numeric(18, 2))
AS
Begin
Declare @TempTbl TABLE (PkSrNo numeric(18)/*,FkBcdSrNo numeric(18) */,ItemNo numeric(18),FromDate datetime,PurRate numeric(18,2),MRP numeric(18,2),
ASaleRate numeric(18, 2),BSaleRate numeric(18, 2),CSaleRate numeric(18, 2),DSaleRate numeric(18, 2),ESaleRate numeric(18, 2),
UOMNo numeric(18), StockConversion numeric(18,2),PerOfRateVariation numeric(18, 2),IsActive bit)

Declare @PkSrNo numeric(18) , /*@FkBcdSrNo numeric(18) , */ @ItemNo numeric(18) , 
@FromDate datetime , @PurRate numeric(18,2), @MRP numeric(18,2),@IsActive bit,@Stock numeric(18, 2),@Stock2 numeric(18, 2),
@Weight1 numeric(18, 2),@Weight2 numeric(18, 2),@LPPerc numeric(18, 2),@SPPerc numeric(18, 2),@Hamali numeric(18, 2),
@ASaleRate numeric(18, 2),@BSaleRate numeric(18, 2),@CSaleRate numeric(18, 2),@DSaleRate numeric(18, 2),@ESaleRate numeric(18, 2),
@UOMNo numeric(18) ,@StockConversion numeric(18,2) , @PerOfRateVariation numeric(18, 2),@MKTQty numeric(18, 0),
@StrFilter varchar(max),@SqlQuery varchar(max), @VItemNo numeric(18), 
@VBarCodeNo numeric(18), @VUOMNo numeric(18),@VMRP numeric(18,4)

Set  @PkSrNo = 0-- Set @FkBcdSrNo = 0 
set @MKTQty=0 set @MRP=0.00
Set  @ItemNo = 0 Set @FromDate = 0 Set  @PurRate  = 0 
Set  @ASaleRate = 0 Set  @BSaleRate = 0 Set  @CSaleRate = 0 Set  @DSaleRate = 0 Set  @ESaleRate = 0 Set  @UOMNo  = 0 
Set  @StockConversion = 0 
Set  @PerOfRateVariation = 0
Set @VItemNo = 0 
set @VBarCodeNo=0 set @VUOMNo =0 set @VMRP=0.00
set @Stock=0 set @Stock2=0
set @Weight1=0 set @Weight2=0
set @Hamali=0
if(@PGroupNo is Null)
Declare CurRate Cursor For Select PkSrNo ,ItemNo/*,MRateSetting.FkBcdSrNo*/,FromDate ,PurRate,MRP,ASaleRate,BSaleRate,CSaleRate,DSaleRate,ESaleRate ,
				 UOMNo , StockConversion ,
				 PerOfRateVariation,MKTQty,IsActive, Stock,Stock2,Weight1,Weight2,LPPerc,SPPerc,Hamali From MRateSetting 
				 where IsActive='true' AND  ItemNo=Case When @PItemNo is null then ItemNo else @PItemNo end 
				AND UOMNo=Case When @PUOMNo is null then UOMNo else @PUOMNo end 
				AND MRP=Case When @PMRP is null then MRP else @PMRP end				
				 Order by ItemNo,UOMNo,MRP,FromDate DESC, PkSrNo DESC 
else
	Declare CurRate Cursor For Select MRateSetting.PkSrNo /*,MRateSetting.FkBcdSrNo*/,MRateSetting.ItemNo,MRateSetting.FromDate ,MRateSetting.PurRate,MRateSetting.MRP,MRateSetting.ASaleRate,MRateSetting.BSaleRate,MRateSetting.CSaleRate,MRateSetting.DSaleRate,MRateSetting.ESaleRate ,
				 MRateSetting.UOMNo , MRateSetting.StockConversion ,
				 MRateSetting.PerOfRateVariation,MRateSetting.MKTQty,MRateSetting.IsActive  ,MRateSetting.Stock,MRateSetting.Stock2,MRateSetting.Weight1,
MRateSetting.Weight2,MRateSetting.LPPerc,MRateSetting.SPPerc,MRateSetting.Hamali
 From MRateSetting INNER JOIN 
				 MItemMaster ON MRateSetting.ItemNo=MItemMaster.ItemNo
				 where MRateSetting.IsActive='true' AND  MRateSetting.ItemNo=Case When @PItemNo is null then MRateSetting.ItemNo else @PItemNo end 
				AND MRateSetting.UOMNo=Case When @PUOMNo is null then MRateSetting.UOMNo else @PUOMNo end 
				AND MRateSetting.MRP=Case When @PMRP is null then MRateSetting.MRP else @PMRP end
				AND MItemMaster.GroupNo=@PGroupNo
				 Order by MRateSetting.ItemNo/*,MRateSetting.FkBcdSrNo*/,MRateSetting.UOMNo,MRateSetting.MRP,MRateSetting.FromDate DESC, PkSrNo DESC 
Open CurRate 

Fetch CurRate into @PkSrNo ,@ItemNo,@FromDate,@PurRate,@MRP,@ASaleRate,@BSaleRate,@CSaleRate,@DSaleRate,@ESaleRate ,
								  @UOMNo ,@StockConversion ,@PerOfRateVariation,@MKTQty,@IsActive,@Stock,@Stock2,@Weight1,@Weight2,@LPPerc,@SPPerc,@Hamali
DECLARE @isRecOK int

while(@@Fetch_Status = 0)
Begin
		SET @isRecOK = 1
	    if(@PItemNo IS not NULL AND @PItemNo != @ItemNo)
		Begin
            SET @isRecOK = 0
		End 

		if( @PUOMNo is not NUll AND @PUOMNo != @UOMNo)
		Begin
			 SET @isRecOK = 0
		End 

		if( @PMRP is not NUll AND @PMRP != @MRP)
		Begin
			 SET @isRecOK = 0
		End 
		
		if(@POnDate is not NUll AND @FromDate > @POnDate)
		Begin
			 SET @isRecOK = 0
		End 
		else if(getdate()<@FromDate)
		Begin
			SET @isRecOK = 0
		End
 
	if((@isRecOK = 1) AND 
       (@VItemNo != @ItemNo or @VUOMNo != @UOMNo or @VMRP!=@MRP ))
	Begin
		set @VItemNo = @ItemNo  
		set @VUOMNo = @UOMNo 
		set @VMRP=@MRP
		
		insert into @TRate values (@PkSrNo /*,@FkBcdSrNo*/,@ItemNo,@FromDate,@PurRate,@MRP,@ASaleRate,@BSaleRate,@CSaleRate,@DSaleRate,@ESaleRate ,@UOMNo, 
								   @StockConversion ,@PerOfRateVariation,@MKTQty,@IsActive,@Stock,@Stock2,@Weight1,@Weight2,@LPPerc,@SPPerc,@Hamali)
	End 
	
	Fetch CurRate into @PkSrNo /*,@FkBcdSrNo*/,@ItemNo,@FromDate,@PurRate,@MRP,@ASaleRate,@BSaleRate,@CSaleRate,@DSaleRate,@ESaleRate ,
								  @UOMNo ,@StockConversion ,@PerOfRateVariation,@MKTQty,@IsActive,@Stock,@Stock2,@Weight1,@Weight2,@LPPerc,@SPPerc,@Hamali
End 

close CurRate deallocate CurRate 

Return
End

<BREAK>

INSERT INTO [MSettings]([PkSettingNo],[SettingKeyCode],[SettingTypeNo],[SettingValue],[SettingDescription],[StatusNo])
     VALUES(467,'SB_SalesMan',4,'True',NULL,2);
<BREAK>
INSERT INTO [MSettings]([PkSettingNo],[SettingKeyCode],[SettingTypeNo],[SettingValue],[SettingDescription],[StatusNo])
     VALUES(468,'SB_Hamali',4,'True',NULL,2);
<BREAK>
INSERT INTO [MSettings]([PkSettingNo],[SettingKeyCode],[SettingTypeNo],[SettingValue],[SettingDescription],[StatusNo])
     VALUES(374,'S_IsMobileShop',1,'False',NULL,2);
<BREAK>
INSERT INTO [MSettings]([PkSettingNo],[SettingKeyCode],[SettingTypeNo],[SettingValue],[SettingDescription],[StatusNo])
     VALUES(375,'P_IsBroker',1,'False',NULL,2);

<BREAK>
INSERT INTO [MMenuMaster](SrNo, MenuID, MenuName, ControlMenu, NavigateURL, IsChildNode, IsAllow, ShortCutKey, ConstructorValue)VALUES(172,8,'Broker Master',21,'Master.BrokerAE',NULL,1,NULL,NULL)
<BREAK>
INSERT INTO [MMenuMaster](SrNo, MenuID, MenuName, ControlMenu, NavigateURL, IsChildNode, IsAllow, ShortCutKey, ConstructorValue)VALUES(170,2,'Cash Denomination Master',134,'Master.CashDenominationAE',NULL,1,NULL,NULL)
<BREAK>
INSERT INTO [MMenuMaster](SrNo, MenuID, MenuName, ControlMenu, NavigateURL, IsChildNode, IsAllow, ShortCutKey, ConstructorValue)VALUES(171,3,'Cash Denomination Master',134,'Utilities.CashSlip',NULL,1,NULL,NULL)
<BREAK>
ALTER PROCEDURE [dbo].[GetBill]
@PkVoucherNo                numeric(18),
@Type						int

AS
Begin
SELECT        TVoucherEntry.VoucherUserNo, TVoucherEntry.VoucherDate, CASE WHEN (@Type = 1) 
                          THEN MStockItems_V_1.ItemName ELSE MStockItems_V_1.ItemNameLang END AS ItemName, MRateSetting.MRP, TStock.Quantity, TStock.GRWeight, 
                         TStock.TRWeight, TStock.PackagingCharges, TStock.NoOfBag, TStock.CessValue, TStock.OtherCharges AS Dhekharek, TStock.Rate, TStock.Amount, 
                         MUOM.UOMName, TStock.SGSTPercentage, TStock.SGSTAmount, TStock.DiscPercentage, TStock.DiscAmount, TStock.DiscRupees, TStock.DiscPercentage2, 
                         TStock.DiscAmount2, TStock.DiscRupees2, TStock.CGSTPercentage, TStock.CGSTAmount, TStock.IGSTPercentage, TStock.IGSTAmount, TStock.CessPercentage, 
                         TStock.CessAmount, MLedgerDetails.GSTNO AS CustGSTNo, MLedgerDetails.PANNo AS CustPANNo, MLedgerDetails.FSSAI, MFirm.GSTNO AS CmpGSTNo, MUOM.UomLang,
                         MLedger.StateCode, MItemMaster.HSNCode, TVoucherEntry.BilledAmount, CASE WHEN (@Type = 1) THEN LedgerName ELSE LedgerLangName END AS LedgerName, 
                         MLedger.ContactPerson, MLedgerDetails.PhNo1 AS CustPhNo, MLedgerDetails.MobileNo1 AS CustMoNo, CASE WHEN (@Type = 1) 
                         THEN MLedgerDetails.Address ELSE MLedgerDetails.AddressLang END AS CustAddress, MFirm.Address + ' / ' + Mfirm.pincode AS CmpAddress, MFirm.EmailID AS CmpEmailID, 
                         MFirm.PhoneNo1 + ' / ' + MFirm.PhoneNo2 AS CompPhoneNo,MFirm.FSSAINo as CompFSSAINo, TVoucherEntry.Reference, TVoucherEntry.VoucherTime, 
                         TStock.NetAmount + TStock.CessValue + TStock.PackagingCharges + TStock.OtherCharges AS NetAmount, TStock.NetRate, TStock.DisplayItemName, 
                         TStock.Remarks AS RemarksItemlevel, '' AS TransporterName, TVoucherEntry.LRNo, MTransporterMode.TransModeName, TVoucherEntry.TransNoOfItems,
                             (SELECT        SettingValue
                               FROM            MSettings
                               WHERE        (PkSettingNo = 311)) AS DisplayTrans, TVoucherEntry.Remark, MState.StateName, MCity.CityName, MPayType.PayTypeName
							      ,MLedgerDetails_1.address as CustDeliveryAddress,Mcity_1.Cityname as custDeliverycity,tstock.hamali
FROM            TStock INNER JOIN
                         MUOM ON TStock.FkUomNo = MUOM.UOMNo INNER JOIN
                         TVoucherEntry ON TStock.FKVoucherNo = TVoucherEntry.PkVoucherNo INNER JOIN
                         MFirm ON TVoucherEntry.CompanyNo = MFirm.FirmNo INNER JOIN
                         MItemMaster ON TStock.ItemNo = MItemMaster.ItemNo INNER JOIN
                         dbo.MStockItems_V(NULL, NULL, NULL, NULL, NULL, NULL, NULL) AS MStockItems_V_1 ON TStock.ItemNo = MStockItems_V_1.ItemNo INNER JOIN
                         MLedger ON TVoucherEntry.LedgerNo = MLedger.LedgerNo INNER JOIN
                         MLedgerDetails ON MLedgerDetails.LedgerNo = MLedger.LedgerNo  INNER JOIN
                         MRateSetting ON TStock.FkRateSettingNo = MRateSetting.PkSrNo LEFT OUTER JOIN
                         MTransporterMode ON TVoucherEntry.TransportMode = MTransporterMode.TransModeNo INNER JOIN
                         MState ON MLedger.StateCode = MState.StateCode Left outer JOIN
                         MCity ON MLedgerDetails.CityNo = MCity.CityNo INNER JOIN
                         MPayType ON TVoucherEntry.PayTypeNo = MPayType.PKPayTypeNo
						 left outer JOIN
                         TDeliveryAddress ON  TVoucherEntry.PkVoucherNo = TDeliveryAddress.FkVoucherno AND
                          TVoucherEntry.LedgerNo = TDeliveryAddress.Ledgerno
						  Left outer join MLedgerDetails as MLedgerDetails_1
						   on MLedgerDetails_1.Ledgerdetailsno=TDeliveryAddress.Ledgerdetailsno 
						   and TDeliveryAddress.Ledgerno=MLedgerDetails_1.DeliveryLedgerNo
 Left outer join mcity as mcity_1 on MLedgerDetails_1.cityno=mcity_1.cityno
WHERE        (TVoucherEntry.PkVoucherNo = @PkVoucherNo)

ORDER BY TStock.PkStockTrnNo
END

<BREAK>

Create Function [dbo].[GetItemRateAllAuto]
(
@PItemNo		           numeric(18),
--@PBarCodeNo			   numeric(18),
@PUOMNo	               numeric(18),
@PMRP				   numeric(18,4),
@POnDate		           datetime,
@PGroupNo				numeric(18),
@PDepartmentNo				numeric(18),
@PCatNo				numeric(18)
)
RETURNS @TRate TABLE  (PkSrNo numeric(18)/*,FkBcdSrNo numeric(18)*/ ,ItemNo numeric(18),FromDate datetime,PurRate numeric(18,2),MRP numeric(18,2),
ASaleRate numeric(18, 2),BSaleRate numeric(18, 2),CSaleRate numeric(18, 2),DSaleRate numeric(18, 2),ESaleRate numeric(18, 2)
,UOMNo numeric(18), StockConversion numeric(18,2),PerOfRateVariation numeric(18, 2),MKTQty numeric(18,0),IsActive bit,
Stock numeric(18, 2),Stock2 numeric(18, 2),Weight1 numeric(18, 2),Weight2 numeric(18, 2),LPPerc numeric(18, 2),SPPerc numeric(18, 2),Hamali numeric(18, 2))
AS
Begin
Declare @TempTbl TABLE (PkSrNo numeric(18)/*,FkBcdSrNo numeric(18) */,ItemNo numeric(18),FromDate datetime,PurRate numeric(18,2),MRP numeric(18,2),
ASaleRate numeric(18, 2),BSaleRate numeric(18, 2),CSaleRate numeric(18, 2),DSaleRate numeric(18, 2),ESaleRate numeric(18, 2),
UOMNo numeric(18), StockConversion numeric(18,2),PerOfRateVariation numeric(18, 2),IsActive bit)

Declare @PkSrNo numeric(18) , /*@FkBcdSrNo numeric(18) , */ @ItemNo numeric(18) , 
@FromDate datetime , @PurRate numeric(18,2), @MRP numeric(18,2),@IsActive bit,@Stock numeric(18, 2),@Stock2 numeric(18, 2),
@Weight1 numeric(18, 2),@Weight2 numeric(18, 2),@LPPerc numeric(18, 2),@SPPerc numeric(18, 2),@Hamali numeric(18, 2),
@ASaleRate numeric(18, 2),@BSaleRate numeric(18, 2),@CSaleRate numeric(18, 2),@DSaleRate numeric(18, 2),@ESaleRate numeric(18, 2),
@UOMNo numeric(18) ,@StockConversion numeric(18,2) , @PerOfRateVariation numeric(18, 2),@MKTQty numeric(18, 0),
@StrFilter varchar(max),@SqlQuery varchar(max), @VItemNo numeric(18), 
@VBarCodeNo numeric(18), @VUOMNo numeric(18),@VMRP numeric(18,4)

Set  @PkSrNo = 0-- Set @FkBcdSrNo = 0 
set @MKTQty=0 set @MRP=0.00
Set  @ItemNo = 0 Set @FromDate = 0 Set  @PurRate  = 0 
Set  @ASaleRate = 0 Set  @BSaleRate = 0 Set  @CSaleRate = 0 Set  @DSaleRate = 0 Set  @ESaleRate = 0 Set  @UOMNo  = 0 
Set  @StockConversion = 0 
Set  @PerOfRateVariation = 0
Set @VItemNo = 0 
set @VBarCodeNo=0 set @VUOMNo =0 set @VMRP=0.00
set @Stock=0 set @Stock2=0
set @Weight1=0 set @Weight2=0
set @Hamali=0
if(@PGroupNo is Null) and (@PDepartmentNo is Null)
Declare CurRate Cursor For Select PkSrNo ,ItemNo/*,MRateSetting.FkBcdSrNo*/,FromDate ,PurRate,MRP,ASaleRate,BSaleRate,CSaleRate,DSaleRate,ESaleRate ,
				 UOMNo , StockConversion ,
				 PerOfRateVariation,MKTQty,IsActive, Stock,Stock2,Weight1,Weight2,LPPerc,SPPerc,Hamali From MRateSetting 
				 where IsActive='true' AND  ItemNo=Case When @PItemNo is null then ItemNo else @PItemNo end 
				AND UOMNo=Case When @PUOMNo is null then UOMNo else @PUOMNo end 
				AND MRP=Case When @PMRP is null then MRP else @PMRP end				
				 Order by ItemNo,UOMNo,MRP,FromDate DESC, PkSrNo DESC 
else
	Declare CurRate Cursor For Select MRateSetting.PkSrNo /*,MRateSetting.FkBcdSrNo*/,MRateSetting.ItemNo,MRateSetting.FromDate ,MRateSetting.PurRate,MRateSetting.MRP,MRateSetting.ASaleRate,MRateSetting.BSaleRate,MRateSetting.CSaleRate,MRateSetting.DSaleRate,MRateSetting.ESaleRate ,
				 MRateSetting.UOMNo , MRateSetting.StockConversion ,
				 MRateSetting.PerOfRateVariation,MRateSetting.MKTQty,MRateSetting.IsActive  ,MRateSetting.Stock,MRateSetting.Stock2,MRateSetting.Weight1,
MRateSetting.Weight2,MRateSetting.LPPerc,MRateSetting.SPPerc,MRateSetting.Hamali
 From MRateSetting INNER JOIN 
				 MItemMaster ON MRateSetting.ItemNo=MItemMaster.ItemNo
				 where MRateSetting.IsActive='true' AND  MRateSetting.ItemNo=Case When @PItemNo is null then MRateSetting.ItemNo else @PItemNo end 
				AND MRateSetting.UOMNo=Case When @PUOMNo is null then MRateSetting.UOMNo else @PUOMNo end 
				AND MRateSetting.MRP=Case When @PMRP is null then MRateSetting.MRP else @PMRP end
AND MItemMaster.FkDepartmentNo=Case When @PDepartmentNo is null then MItemMaster.FkDepartmentNo else @PDepartmentNo end
				AND MItemMaster.GroupNo=Case When @PGroupNo is null then MItemMaster.Groupno else @PGroupNo  end
				 Order by MRateSetting.ItemNo/*,MRateSetting.FkBcdSrNo*/,MRateSetting.UOMNo,MRateSetting.MRP,MRateSetting.FromDate DESC, PkSrNo DESC 
Open CurRate 

Fetch CurRate into @PkSrNo ,@ItemNo,@FromDate,@PurRate,@MRP,@ASaleRate,@BSaleRate,@CSaleRate,@DSaleRate,@ESaleRate ,
								  @UOMNo ,@StockConversion ,@PerOfRateVariation,@MKTQty,@IsActive,@Stock,@Stock2,@Weight1,@Weight2,@LPPerc,@SPPerc,@Hamali
DECLARE @isRecOK int

while(@@Fetch_Status = 0)
Begin
		SET @isRecOK = 1
	    if(@PItemNo IS not NULL AND @PItemNo != @ItemNo)
		Begin
            SET @isRecOK = 0
		End 

		if( @PUOMNo is not NUll AND @PUOMNo != @UOMNo)
		Begin
			 SET @isRecOK = 0
		End 

		if( @PMRP is not NUll AND @PMRP != @MRP)
		Begin
			 SET @isRecOK = 0
		End 
		
		if(@POnDate is not NUll AND @FromDate > @POnDate)
		Begin
			 SET @isRecOK = 0
		End 
		else if(getdate()<@FromDate)
		Begin
			SET @isRecOK = 0
		End
 
	if((@isRecOK = 1) AND 
       (@VItemNo != @ItemNo or @VUOMNo != @UOMNo or @VMRP!=@MRP ))
	Begin
		set @VItemNo = @ItemNo  
		set @VUOMNo = @UOMNo 
		set @VMRP=@MRP
		
		insert into @TRate values (@PkSrNo /*,@FkBcdSrNo*/,@ItemNo,@FromDate,@PurRate,@MRP,@ASaleRate,@BSaleRate,@CSaleRate,@DSaleRate,@ESaleRate ,@UOMNo, 
								   @StockConversion ,@PerOfRateVariation,@MKTQty,@IsActive,@Stock,@Stock2,@Weight1,@Weight2,@LPPerc,@SPPerc,@Hamali)
	End 
	
	Fetch CurRate into @PkSrNo /*,@FkBcdSrNo*/,@ItemNo,@FromDate,@PurRate,@MRP,@ASaleRate,@BSaleRate,@CSaleRate,@DSaleRate,@ESaleRate ,
								  @UOMNo ,@StockConversion ,@PerOfRateVariation,@MKTQty,@IsActive,@Stock,@Stock2,@Weight1,@Weight2,@LPPerc,@SPPerc,@Hamali
End 

close CurRate deallocate CurRate 

Return
End

<BREAK>

CREATE TABLE [dbo].[MPrintReportName](
	[PkSrNO] [numeric](18, 0) NOT NULL,
	[ReportName] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LangReportName] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ButtonType] [numeric](18, 0) NOT NULL,
	[ButtonName] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[VoucherTypecode] [numeric](18, 0) NOT NULL,
	[IsActive] [bit] NOT NULL,
	[UserId] [numeric](18, 0) NULL,
	[UserDate] [datetime] NULL,
 CONSTRAINT [PK_MPrintReportName] PRIMARY KEY CLUSTERED 
(
	[PkSrNO] ASC
)WITH (PAD_INDEX  = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

<BREAK>

INSERT INTO [dbo].[MPrintReportName]([PkSrNO],[ReportName],[LangReportName],[ButtonType],[ButtonName],[VoucherTypecode]
           ,[IsActive],[UserId],[UserDate])
     VALUES (1,'GetBill','GetBillMar',1,'Print',15,'true',1,NULL)
INSERT INTO [dbo].[MPrintReportName]([PkSrNO],[ReportName],[LangReportName],[ButtonType],[ButtonName],[VoucherTypecode]
           ,[IsActive],[UserId],[UserDate])
     VALUES (2,'GetBigBill','GetBigBillMar',2,'BigPrint',15,'true',1,NULL)

<BREAK>

IF NOT EXISTS(select Ledgername from mledger where groupno= 37)
BEGIN


INSERT INTO MLedger(  LedgerUserNo, LedgerName, GroupNo, OpeningBalance, SignCode, MaintainBillByBill, IsActive, ContactPerson, CompanyNo, LedgerStatus, IsEnroll, IsSendSMS, 
                      UserID, UserDate, TransporterNo, StateCode, LedgerLangName, IsPartyWiseRate, QuotationRate, ContactPersonLang, StatusNo, IsSendEmail)
     VALUES (0,'NA',37,0.00,0,'False','True','NA',1,2,'False','False',1,'3/4/2019 12:00:00 AM',0,27,'','False','False','naa',2,'False')    

END

<BREAK>

IF NOT EXISTS(select ScriptNo from DBVersionLog where ScriptNo = 8)
BEGIN

UPDATE MSetting SET AppVersion = 'Aaco4ishkXk=';

INSERT INTO [DBVersionLog]
           ([ScriptNo]
           ,[ScriptDescription])
     VALUES
           (8
           ,'Hamali added in itemmaster also in tstock Updated application version to 1.0.1.5')

END

<BREAK>

--<EndVersion = 1.0.1.5>